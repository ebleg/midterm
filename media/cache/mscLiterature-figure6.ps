%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: media/cache/mscLiterature-figure6.dvi
%%CreationDate: Wed Aug 25 10:30:17 2021
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 201 202
%%DocumentFonts: LMSans10-Regular MSAM10 LMRoman9-Regular
%%+ LMMathItalic10-Regular
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o media/cache/mscLiterature-figure6.ps
%+ media/cache/mscLiterature-figure6.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.08.25:1230
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathItalic10-Regular
%!PS-AdobeFont-1.0: LMMathItalic10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathItalic10-Regular known{/LMMathItalic10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic10-Regular)readonly def
/FamilyName(LMMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathItalic10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC2
3C0E2BAF712D9A4BE80B6E38C9F5A449DD2DCD493C0A130001F01DB02EE2BE50
8CF3C1EE0898661980578B4396FB3179F301761100231D260FCA63E74EDCCEC8
08E4BD0AB6545195F32F881C99FE3877DF3BC94657DAE2BD20767AE9DA7D582A
DF256F4A52C57F9D228B3E1CC5DC93FDDE8E791DB1E6FA18E0B9B2423868792A
2BC90B78D9F9640524C758D0FEFB713A9A0D66350CD78C8FC945A63D8C07C8FF
5D66E1D7D963B7567F270FB876D2FF1E76F1FC1AD80246E413D337A718699FE7
EC080448FCCD4B5AD8453287D86BC727C140A6B2C1F62439396AEDC897D546C6
F8241122821F88FE9BA1342B044AE9A33CE496ABD5D7F76B1CBCD331A08C6DD4
37A78E15453AE3B1AB6664CFBD92B9982E6C0F5AAD267804425AEC523A184899
3A2D0259E64F914D353ED128EA5774EA6F87DEFDD1BCA35A413EA5D75E42E3B5
66539B7414AF09F23C1DAEFD913327B6CBEE7B5F6258CFB98B288A2A2019D344
E9335FA5D1887F0A3E6CD430AA65E3A59B396F035C7E84875F5A5E374875FE5F
2B49567A6E8C851A51D8BA4F6AF388BAFFF88D02B166F37F0CE1D4D4201AE26E
047084E2ED3E3662B60089E355AEFEB3964748C5F836C437C042B64BE3AF79DE
75AC4E7255CEC0F20E6D9400D29BC8D9BC2FF1E08D8E020F33BDEA08A38A5E90
CDD238866C66BFEF1B3B61F2564CCDD80BD048586674B94291DB7268CF59686E
D95927FBF8CD3224572B687E01791F40D51A230B9F12EFD86A7F90A0978CF220
FA314AB43197FE6E7C4F22C4BF4C4DF7ACC7EFE7C6B152984BE0FFDD1714ABB9
CE834B59B859F89231021E34E2BEF6C78D5697E25CB5D72D2A5F8093158818EC
60233DE494228ED13DC8AB6685A5332341BC02AB2064AA00FBE26BFD27263C04
461327FBAA2D88B6D1477815F4188980ECF40CD3AD1E29DFA34769ABC993DE8A
AF8A0E27487EA582D55886C3B2F6DED5322AA7F265EF97187DDAE8237E4A34D9
C496BB1C04588AE85FA5B209321554AF2252858B319283FC9468887C282A8537
29BD1E86B7A26AC1D3470F561C13613A73572D79A8CBE1180F4C4E8BEE8EC0B0
14E2B65B5E8054506521227674339C79F366B6CAB4CB030073A615CD431B3DE8
E976AA00381C839090AFFC5C4FD59672140465B77C5EBD8D4AA4CC5301982586
82BA540FC6F55ACFF8DFBB285BE2E3F8D48E10D096AE21862F26B45F455DA8C4
DA9C56A0E7FD569B8EC19D3B513CFECEA47F4155680D6C4DF122599C3ACD2F03
3B4BF52C74F27EA8C593C0199D51F71320FE8FD6974E3644DCA15254E4741D3A
764D86C444FD2496EB79AC46A7563F62EE15EA2516EB04B48AA9EB9627AB0E26
1327FFC1A7860963C9AF78382DE47B7A4BB2FCF281C9D16411F6DD29248B3E28
D3AB62A7E4477E19372B598F27332F652860EB46530FFA0066AD0EF0E90A3AFC
BD7FA23B43FBE9F5ECCFC105A9DCA68D6A0A27C1C7FF08862EAECF9EEE0B5DE6
0D5237D9317A26FE9C3B3B55E82184D99DB8D66A2DD6B9715B8C279A06D79A42
D4113E2B48380BC661E25A8AA3F115026A794AB76500F72ED1616CFD46F53BB5
1352FC0AA4B2834AC6D144BF46DD0305777B9E897CD23656824778227DC2421A
8700EC5E7FBE7D946130276CF1BDD3BCBAF605897C3BE227496A73EF3A79FE9C
03E302DA2B429F68CB3F70C5B36F2AD8A73DB1720C78A4FEEF2595DB07A11011
F6B78FDA99BE4F9D21F0BCDBF51594F54ECE28ECE04EA5D5F9DF4E622EDFA1BE
DCDFAC91B4FE44C45B6AADFACA871B861B5B969A01856CD69996E89D8AA63218
977BC1E3DED4AC10C89C360C87D92E4E56E1485B1939D2D947D03951B44164E7
536C3CB806E95D640ADFBBC1970F1ABEE543C7AD659F4EE2D486B09145D685EF
397B41CFD13A2D0BD74192163FD5CD5B296D69AEB9BA6FE7ADE552EF13E94C01
47614600DEF12C19C38CA07EAB0D20C2FF795077981D802140EA7435C2F82E1F
8460
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 30 /shiftleft put
dup 31 /shiftright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DEC8206D4F9B8D3B0
1CB47BCDCCC4F1898958555F5218EBA0BB9F6BDA92E8A8F645C51D69C597141A
DACC7696EC47C399F6BC4CC2760FF9366A7D1F2ADE54B913F1ED476D606ACA25
83D3958E9EE0547A5C54C359AD40D487FEED3555A936A7F9A2098050930339C0
DB023D22CC949331C13287D1108A4F840235AF8E613FD6176485B22BFFEFEEDC
79CCF729E7E3EDD1C4EF920B40CEA5C0AFD214806ED9D4FBF1320C845F3FB72F
5F230ADCE460200B094F25EE268E77B5DECA02D984A6665F8C59C1A23E32930A
9EF5A8D653EC1E0CBFF3398F09C9FB27673DA7BD4DBA60F8ACDE81EF963E6550
24F6608C9924B684543A892F35CF1B4F2A41C25F0D189312D8AAD995193EC63F
E602A4C1490DDDA94E4C89DBD94E7174BFEF27103BD1D0542BEA93A5D6E46FC8
E7389AB33B0A96809C794EA6217B15D383C6F30482817E6EC35B68A98BC17A11
19F22D0F2608046994AEB110C836D441BD90F8038023683945ED9E0ADADE4754
58FDEEF235E6225784A04000A3660C2919641788834FD4BE7D76ED352369E616
9E0F4DB6336F6A81F5A8A18356505630C487F1CAAFCE3C0DF787579539F49ED7
A0492AB50770C76BD8506D97EA35686CEC1B365A58ABA7873C1B45CADE13D6CB
019D82C457DAB41C3EC3AEC097151B21E4E1FEDC9F4E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman9-Regular
%!PS-AdobeFont-1.0: LMRoman9-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman9-Regular known{/LMRoman9-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman9-Regular)readonly def
/FamilyName(LMRoman9)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -131 def
/UnderlineThickness 38 def
end readonly def
/FontName /LMRoman9-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-443 -292 1454 1128}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6116FD75187CCA25A83C18B7D36238D683DD1BDBC6A88423ABB03DE1E80733F5
EB2A5806F5FE4B1ADBE6C1D86F980E374E8A548591F37ADA6411F46A0DF302DF
BC030FE18BC9AE64F74ED6727BEA55018BD56BC16BDB2D1D7238756AC4AC1F97
2793B7460EA635B857CD13CCE722D93CFF930116F50BFB864AA6B5CFAB471C5E
621630B6A5EA55FEE07590DC85728540B113E52CEAAD4112CDAB2327118DFDC5
955B8CC380F1355107729559D8312EF337D6D2572276DE8C0E5EDF6D0937E67C
7C25F5096AE8AD1B52978F02336A9ABB54BC5F84B558D35BC54DFAA00D145A6E
734D580D84E97B88854C491011807439E930EF66C618DFAA7289A65E0B852115
3D3218FDBE42E7D93E411C417A453EE676DBB88945E5335EF02771E119407A7E
04A329DD88EBE730D59CBCC7615377C1C6400640C26526C0A03395986CC3CA89
7453F7E6C4251D81ED29E82F7052C7F8DED9C0AA224861F102875E94718A4408
D823FDAACBAFD47660527816A0ED5875D8DF3EAE713E38FBC5D74E10D5529AF6
84C4B2BDB673B5985A8AE2871F758C0B8E59D849CB1A7AFE0651ACB97F7A5980
896F5B17979FF104C4D97E05E803EB92D60A8BB1E79692C384FEA60B7EE3A158
56C67CAEDEFB99732C9630C988B23D892B53C23EE9FCDDD95E1E790CF9265D08
A0DCE99B83FD1F717581B25B4FB468E7469DE0B761D0DF672E738BD2F2FA5F05
7295764127AAC2DBE5CEF9311FF48353CB8FD62E27C4E3A05DA549B40B6C0AD3
DA4B590E9E7311FCE86C774F907838140046A7D1F368B77ADEFC2B0D3D3EA9C2
D391DEC576BEA2C931E1644AF25D310A41640B8F454653B262C99C83A99A616B
BD1008CC50D1B15154B0EE989B48B94474AECF51A4791C5CAD5D6C71A85131AC
C5EDD88B5059BFBB42A80775A3F971147F03E4C46915B00329A509EFD1DE55D0
83BD9484F2D6B94F1263739B92CD7991A50DD3FD1B2CD5F5F4759D06B82101C1
9895ADCD17E804781710B4F1A4DBD8E6BC328B41E8E615D349ED779BF6D14A44
1B03A37376B173FE9669F35AADCBCB4A34C7B0AAB2ED51D0F47C86F8AECF9633
DF30292B2420262A6BD8C8C8676189F016B1FEABC10785FEEF0F4B11C7658A59
C128BE483D01113B2BD7AD8D322D32EEDA3DFF2E9C95AC24F5B336209C225484
07738EE40C97E7A79C34A5C001792669DE7F11CE8CACBF994B414731F0AA42B6
7A911F54C201E4F627816CFED662D19C21824CCDBE85DAD457C8351CA765BA35
8247310D2D65F7AA1342BCDBE88FCF29C984876BEFF75AFC65947B449F26DFD6
EC46527591BFB94442A0146D8F93A35D8AA216356AE807F9874C8D167AEDA5D3
F96AB60F049863F6A96A895DAB0CEAC693810ECC15C53E710CC7E4C7735973D4
16B3A6CEA55846C3FD406C74CE152AE8FD1D0E01EA695F3FD5E3C045AE9913F8
DB0E20616F63B552387FF65A63CF2A927E5F2D7313EA2C5610209DAB5DCF62C4
6683A81AE2BA83BE28EF402C92B79B8A0A3DBE61395BEAFAF4002BAAC94DCBB8
1185B62F9450EFA8573FF718CEF0E2EA461EF974D242BF0ADACC43EE5B4C766F
93041FAA0DBB196B0A220B8E3A9FCA64B16C0FADF9A6C05BE3499567E930F710
682B895413290F74DDFEF1E47302C69058C93CD486D302BC98D9CB373BDEEA5E
6B5F5897445B471395DF6F39D245EAC43973875938BE310D0033D4C73CD6C95A
76CD17A5E1EA625D749649B582C063512B58EAB426EF147ADDC96314FCC53BE2
7CEEE5696F68966ACAA484F97733E7F6B9BD413D4CC15B85509750AF485DE8DC
E8D6F55E3EDCBF582182FBE2B7C87D5FF063561453FC99A92DB3D0CAA5E0F1B4
4EC9D73D7DFF931F6A90B7405414D6AE10D4FFE56A86A59FFCC90A00E691EEBC
3E6A64141C8B5DA393DDE17C782891C2297D5B212A3173EBC6BB5C98826F5589
8CADE887047A1128E0AB55B6911B7CF21F7DD3136F99DFDF0A598942FA060B06
1202DDCB2B8859C0182472B9F02BCB9532323C4D302C7930284B10206538F392
66CAFFDF5AAF91F50D9A6E35D37460CE2099273F1622C089AB3CB216A5C27D63
4E8807F6E0781FF8233AA10DF72E6E09BCB6C2DF9A990FF0F544CE8C5C086BEC
650C87AC6908D0C344FDD23379CBB77C99C5099E69C8798D2CDD59871A304B16
A39307CCE2C1B99B8FF8D5F1651E70F35D9809BA2C6B376D2F261E6F833FED14
23463869E3095E39976A7C42D48B75DF9890529FBB3D24651664E84B70E8BE4C
1913F5F6C757234D7EDD3618CD33389BB0DEDB0E38DD5210568759D8B715E4E8
722259218D7B8DBAC9A24F299EFE32DBF5035ABCB18BD682234879B244046523
9ADB5D3E324BD820BC6449A228E70E9C8B67311DC0694534AADB7CA1C907C3EA
D979BA7BFDEC43C11B2733F80AA1938F0353103DB83CCF9143F3A1A4356E7C0C
519F68E411E47A248FFDD79D1D00AA769932C9717D85D4C4E2E941026C25847C
739B6EEAD718B1C959EAD812623B5135A85BD472D60840A71D8CA1071083A38A
0F478AE6465F7F11D948FB905A29621C63A8EEF136C02E5FC6659D9B34C35393
49E3AD8C27A962DDF433A635DFBB1FA3D448B363C36F9830029D893B86412505
B6FCA5AB5BC8937AD9FF4898D9706D84EB8A78789EFEA3EB8929EF655F1D5D29
18BEB04B22E4E18997786BA72E91BA1D2759753E96A327B6C0656A94470FC8AB
FD342B6906A5399825EC884CFCA8B5A8AB0DB6CC37838A6472C601C215037E94
AC89459339FBDBF92515FD7870D55FCD937B60978AE0D5CB247284C99F5B28FF
8772D7252FAFA67396872257014631A2271F032039F412F71DBCF5EE596AD5B7
632711106DE9470F037FDD15E6113A181DCB5104577F60FD95A8A78B27ED20C2
D7A33C1DCBD8AA217A5B8C1FB60DBD3998E1FAF95B38C37DF0CB58C972E3A3DD
E8C85FD82A3607E18301B62AD95200E13DEBE6F2AA12ED5D9A010ADDBDAD28D3
6FCAADE15A574DE45CCD525EDC90B9FFF47FCC219A2556169FE98FF9B3CFDF3C
BDEDA43DD2ECA72702A4357D241AA942314ED22A7C9D7F1AACB6BCEED9171CD8
17476967E255F808AD2EDD51131DF5557EF42876F76EB35EAA4DFC8050FA56FC
42A963FDC006DD6544A13A283363FABB71AEB4A34F5C4642748F7A1C3EA0BC46
A3CBA124AB6B22F93F580D43364C2B89E30AAB7CAE12EE07B0D606F78C79385F
AF18AC8EAEEB99B34D37764CCA28A466731CEF36A5157E208835176F3154E8F5
0AB9C8DBB5F841C86AA21EA3B121B082110C6188F55E0C54691132BE1A965A3D
C333680B3067FD3FF178EF61B49981EADC4427DF95F15FD7D1720ED87B4F163A
14EF447D7E09A12CFDCAE0432930CFC34EFD3F1B5CE76BDCEBA951B61BA48FC2
2AEA6EAE2B21689EE52AF793A4937CFC9E9ACC236CE307310AA50B812B401E63
603E1FB4CEE4EB507E88088367C85F8137A04CBDF387FB03FAA5AD122CB4A90F
479AEB32B0C166A0258AB9968C77CFAA509FC09A722327A7A7082008F5D1F756
2F7991F7FEB5E602BC71CFB91E4FDCAB12759EE22D9F51DAEDF5873816653E52
15E436CFC841BFEA03F315BA14C80E80248819BCCFAA907DAB2AA1969DC1FA04
ABC51B7387109C1185AD5648C12F47AF3F56EECB028F93FC3751A9EBD1D97C1B
4A3D1720EE267B32AFC60CD11C891FD36524C9DD9001F47826E5F46D76D5CDE0
830034E3BDC2EDA5AB4B0FD9F3E1B01DFF39D1558AFA51A6FDABF03BB3E3B0FE
3217541183AC137591B5122F0BCE995D9D4EE4860BAA23C571A69EA69FBB4063
01E0DA4B2305E9BA211FE10DBF22072C5A99A72019D29CB845F00A177EAD1888
47E2888299CA4D93546A29395A5BE66101EC0A83496AF0877B24CA3CBC729416
976BF6A20BBED57C6C0FD85C86D98B6F9A9142654C6D3C0A9701C08DEFCC3C0D
11AFF3A83AB6F7D5AD640A25BF742A74FF8C3B2C04138D6BEE4F6503854D19E0
1AF0301997B8F6DF9DA616F6D521685E1BB44E8018569F67C865E244FB22B99E
4297887C58064853E0EA0612B985AA1BB8A7F709BDBA6705D80FBF0AA8B93774
D44B5FF7010C93C6FFB55D0FA449D50FD592906D7F5C5BAEAD71201EDC8950A2
11471C6735F2E4903B7627D33F2EA3132EB8461984D3224DBEB1ECAEE51ED434
8A757B04DDBFE5FF8BF5257A549A4BA9866D7626FC4F760F1916817FF8ED4A4D
2A8A6162B4DFC3D2A179041DC2ACBF106156AA2D5B790AFDEFFD04B04AB34698
6FC97C605AD578FC8E30ABD6CFBEF607C948A926FBBBADD422BA2229C8B0D4A9
DF0932F6AF67C63FB0EB6EF67BE090147C5AB8EBC973CD8D3946E50D5357E57C
D8F73641418FE27AE87A1879F88AA4117D8064EDF35EE6236FFD5FECCDBED653
F730852B641E72BC01C639A25CD6917847D86EDCADA440FE9D98F9939B7AAAB0
07CD23C7FBFDC3D020E853171B0D1612A3DFA5264D6B6437127402F5FD754ADC
B4B3957E1B8A795D720A30B7DE482DFE644DD358D5C45AFF2A3ADDB1E2963200
F24C20A0D1CA98EE015E65845B48444847FFD8923E2AD093B00AF017A82D661D
A6A7C2E6C5ACB12FB054A7F7E2988C00C40D3517532EE90B7B3D7CAC53C8293D
A32993CCB41A92BBDE0A11492679748AB15280AD4B3250A866C61B3C0EB795F7
51F791B14D83F1DF955796BD15D834C53562765A2BFFEB2D1AF844712AF0F70D
DAFDFC2E0B23C3575BA1ADFC9353EADC57AD57642E6BCAFCBF85D00F5DA5480A
EB8C933FB596832AA18D730A55B80EA224ABA4D376DCD3CB3E5E666D3DEEB203
D4F868729955E3ED89CDA89A794E6B14AA51BA7362F9193CEA8BF970E6879DB8
5A356E34502330233093AAFA54FFA5FA206671A2553EE6F22C837D4329FA8C4A
4F2BAD170042E441DF5DB3DB146BDB01C7EDF2193021184E137774FA958C0ED6
CFCFA27145CBD29BE4F328C840F54F0A5DC1919F4F11B8EB47DB9175B366A788
D2098D501916CF6A2A1F9351A8D3CFC223DBA2F5D480878EA65EAFB4F084941D
7387A2F92A69CAD3FFA9AE559D3043D71284861F1C0963DEC9250C60343947C0
D900BBF6F62FDAF5B106287F5B1708FD0685C575449D29B51B30154E15092085
F16A8421B4FA121305A1AE54DD6930796B19286794DBCDAC6B7AC4296BCDC0A4
75363BAE2998C2FD754882FD09B2CF0F2423C2904D3139F00CACD6246FA60781
FB4942E026CD4846D3276CEA9AED7E1958A2844855C94A82414C6E4127AB9A54
9A1C2676121FFE37C74CE4097CB4B021BBE2C5D94D02798238198268D701B543
ADCCF57F8DCE5A41816ECDDF97DC2C8DCF5C8BCCCC03EA09706DF418EFA673A6
41E499437DD79826FA99B797CE55BD44F536716B5BA9F96F91476AE3DD52279F
CECD3C494D44E7AD3ADC6C73336EEC461C81B8128C629EF0E86CCDC4EFA0457F
1B420AA61EDADDD60410CDF5CA46C021D5A38C9D1555076F312278CBE2276D9B
038B151CE7DB92F4CDA1BD5C661A4788A758181C6C213A2A51EF5CE64A791729
711369CEDDA424A9E19BED13D137DFE3F01F2482B32A20F2DC4906B1A90BE30B
F63FAB961C59AEE0A5E0B9DDDD332B37A96771CD533AFD271633E8058D65C94F
E07B3B4F4DA8333266282993264F7A146FC3B7DEF9722909B7A508E489571C79
B1FD7870037BA5661166F3898963472CEE9BE4D233792C8B94B63A84F9AFE1C0
32512E819FCC17EB00217E5320A689EB5EA03F149D89BE957475084E6D7DE735
2BF4EFD9CCB7D9B3874138C7E04994CC74D5443843F1A6D6B3EBD4D30DC18FD7
A0C09F19E9C0302071E598DDE8D622DB78EA121005DB4BDC978A8BE4D86E59B5
1793EFE0AC5BAD56D3CB4062A0131EE8196600DAF4DBFEC49C4BD57400E4EC76
FE3383700A594ADE0E9D59FF37C4F4E6E72E86DD1D4CEEE74CF6C7345A1D58CB
C3962BB5598C1B94CC9316FFBBD1CFA91D0E2276D5B0C8E74E5B98F82CD31D90
D3894D4E5BC8240049B266753B194C29B9313D32474AAC73B5D05AF43231C262
34FF40DF4D0ADEF5457B2E664678B70B0298DBB1EB1FD9E60D34B080589485F7
A063D99B451B7D8A7D59FAD6D8A696D4BDFB0CBF9C4686001ADF08CCB3448004
344D0FCCA1A38CAF956D3F0D3CD9A1047591CC694D68E46B0E95C35B6057FA5F
8CBB75DFB6302F00E8C57A6D4881E11AB9F1CC61D0958A4FD41C738DF99235FC
8AF7B0A7FC07C2E6FB4A94979C1D49919570F2E5F06D721403053F2058E88858
EF4DA3F70B7ADBB35E0F1641F668817E64481B4479C73ADF836B048BEE546DCA
7F12728575512EC4A5C321BFEA960B5E0BC6E3F1E0E4666ABFAB1BCA3EC75326
188E2D33AF88DE894EE7FD9B7283AF109382E0FFBA9018C10D3E357D5B5D62A9
7BCD03931315E78D198FB6DD459C4666BEBBEBD4A514626C26F052A95D65D942
ED54E36A6FBEA5EFF34A3155D41819ACC391901D01BB20744511E19018BC1FA1
4F1FE0237FA942F76F1157480F336F7347833DAE8C3DB6684096A4CBFE226E7A
E728A1B19B883139073A59FBC65D5C5FFA73F59AE22BC7A9DE94C8D7D47D6B3F
98A3BBD9EA92E3DDCA5858A40697E1A4C5B563E5F1C0083D64D07F6A2F7D4B7B
7112BFDD1E9C8ED92BA11327A7AA5795019F39153EE3E29E87FF60698634ACCB
105F9D4EAA135FC788C0DA04D73FD4CAFB4DC5964EC243E48BB35CA66AC8B5C9
284D988272690C05F2723753844DD43D86AC8B74A72BFCE9DD385505F1A5894D
33536C06BB0677694F44590C92071DC6B23A8B09AFDAAE34A446AA48D5913F43
42D0B05283E6E7B12E72F14AA63B127342E231826A96B840649848D40574931A
A278F716A93275C759792ADA821140C4AF794D8BDD162A9957B73C1494D63A67
5EC0726878D4E217400372B6C196CD2A105693C9A85807B259FCF7E16415F487
0225453753A46D5A26EDEEF68112638EA01C20D5B131A84F69448FAC91DBA725
1200CCA4C3C1E2E75C3F360F37CCD87F4959A848FF615D1DB3167D66F1848157
35353629661E08732CC382F45B2A9F922A4995E083622B36DEFFE1A6AD802B4C
6086A1C44A2A00554667CFAFF8A417D246F28CEE9050A8BF50AFFC91C9E5782C
12D2FBEE3895D7F8551DE31C96168DACFF31C8191A2A9F42EE8C9E9A2200C8EE
61182235BEC350358D62B7B015A019679B0B8E742902AAFBCF46E58A7CB4A08F
719102D33FC44E4F60F1E032C33F1123173C9382A085A2924AFA002FA83DD86D
63E9FF5169DCB16554CAF3D09AB4E6C38D8FDB121C7C72D0E46ABFFF414B6F8C
06F00A26631D7FCC4527109F177093E7427DEAB1E85CC06BC191CF2668634ADC
3C6AEEA4E811D18A6632448E0B8CCD3C4D7654BBDCD200D3EAD6C6B306EC1AC5
F13D51C894D53C87D1C2D3C5D7EFFCD4773A02C4825A46B6D70EB017FBDE3970
2B4B8B60C24B7834F188E2EDF98FA2196ECE13CB4F39641D55BAC02180697239
E38988F36222BBAE11B6FBA29AE0A974673C2862B2E95CD2460FC8F8BA2C70E7
44D0C9ECB5CDFA5812BC531670047BA88646BAA9D6F0E16636DA27AB6AA16C62
DD82E76798939F0AEF7E64F621BE09010CB6F43790AC6EFF703B9C40507AC9BD
A15602060657E6BF7928523C7173A9A853C1E216348AB87B18A4184C84556C04
76BF0478A447B0584D28F6E8A0197C16F29FAC0342BC6B0ADAC603CF560A545A
7BA4701A203715E313E311E51AB7895FD686DBF6C8D2BCA099078135FDF722D4
C99AB2881F8C680B06372211F15B3ED73705851BBD2AD9D78C603CD855A47B38
55826396F4104A49A022808893BADF853FFF00C235888D9E3D24C7DC65F407F9
9A68AD7AAE87A22BE2ABCADD76212A3759566E04ED44EA5D22124C4869A0EDA5
BF150E373526CF55A76CC97FA47FFDD7D89442675836FFD27D21F892B9AE92E8
480F5B8A2AB1B8786A2A73FDCC7B6FF4DC48DE847AA47FC8A562E91B4859978E
668D17B5DE1B8D5A413287D9E221BF6768D98EBAB7FA8DE7AEA770C4DDD15EE0
38371C57926BAD7877E98B2D0E42B424AC335873F8D910852C291F926FCC5120
1C24DDAF7FD77CB534E74F590AC18F55EAF42B6D05A122AF3E7C3A2A384C9202
9F39B1BE5CF3D7507B2210888D52FBA35B5D9288B8F54F0FB93B7AF74423F534
302960E00D95C41FA4A5AF7A016D3C773E040312AA0240DD7142F01974BD8E12
0C8087675EC96EFDE2CF5F084CE0032648C6C6CA77370BA3C979D11C72BE4807
BA88A85AC730C48FB61E647DC94470C1B855170ECF5474583F412B6175F58ECF
8A618A63AE9749741D1EEC0AFD83A8D8859E4D23B87B5F50730F87461D819547
44C403758EEA476914F8C55BBCB427529726E743D60D4F71F6CEC22A583406AA
0C6AFF44BB5598CDE503F6FDF3D90D232B567830C7EEFF5F93E3AD128DD90DCD
BD7CBBF0BF03BE50426089EC7071143F5177667064618562DABD7DB8E7F480D0
521581902848649921836D2090DF33BE62AFA47A89960F43A955045A930A3A2F
8B837FDE0271B310BDB076E1E5D2187136E1E88A970A685063F07283E49DBD9F
A16BF277FD32FA1257A059936D6F2508D429C62585777EB9E6E9DFCA889F03CE
76E5D2F039D4F536CABFA083BA6C80DFC355A362A6D9D8B97A664AB5EEFC7B82
0575D35624FAA504892ABBFE621BDBFBD6864F5F56DCBC56050C7418E90552DF
6EE1A0FD78BF91230BFE3F36B8A0F98A0CC800A501580CA901BFDDF35DF7C412
133443751C638755879CFED8324016EE38F69A904DCDEE56EA78FE086797F74F
876028A654407517CF6F42243C234413756CA68A0F125A0E7C1FC821BE342D42
D52C383193734662065DD5653C091F96BB2148C20F8F1937214062CDB5F5D367
68699442FA8956CA07565C3BD36DBE762F324E4D140B511B4CF0FF699A8B2457
69B7ED30FCFA10230AD6C9E809341BF5E55F0FA3EF2128C39E8FA4E174E180BB
CCB105D64D6003CD9DCE5D86F0C590D7FB9E51E09C85C5BCDE30D15CD9ABEE19
DFECE6C9A7CEA474FA9151DA64C5A488EFD0D6F3CA2D11FDA4C818B0A3812B71
4D9025814369FE71C39069B97A65945445C012E4A2EE26383CB45E7393AFD881
918C784BCFE203F3A7DBB81A0A202B5683587B8F726545C0FA9AB34BBDD9983E
5D441DF74B89E58514FE8D57317D3403BF73AD979877DCDA412F63573818F678
B2407ED0BEC68717E95B7597AD7CACDA2A6A4E8808BDF0AC543964A237BC0486
514F6952862F207136E1E16B417A78F6433D6923766B1A50FDEB0587BCA6D9CF
6A1B1F7AAE3B033545AFBF576377A48059E6DECA5D00BA874DF50508357152E4
9CFEA53498B4A8F79C7AA87B0624F5791984EFFCC010D53C07AE90526031B406
19B4D27AEA553C2538B7ED6634AFE0B2C249699E2125098176388458CE10D3C3
C7E0D339631C932BBBCC1D5EACB1484FBC1CA10613869795A7234CF01F9C6D90
FAE6D5EFF289A9B1391FED5B682696A02EA21A9C6FC7C1CF767FB3E937DFE92F
6D038B3E0E5E88944720EE44A47E6D5C64DA4CD358B127C129A4047457D56024
D95645ADE0D95DEA7489B9F8F5F1C22E3C015BA8C46DFEA00293FCA8CAD6BD29
E18E01318EAEBDD3869ED813FEBC6FE2F8D20EDED866D4FA9931FDA9F1FA5420
76F28B47B045B7B7F73CA69BB7514B3BE35B72E214974B2B275CDC9CAE7B507C
0A22FEDD6349E7261E696CD413485D726D5D2F3E8446EA1FFF500F37540C522E
3C9E3EE88D6F3705661FD38D8AE98E2882439F5462D9C58A883A33507560FEC3
EAE1A5A40CC18E3C64077DED2BF90FC4069F7AD81133410527B46608A6BE4182
8C3BF2FD6FFD343AC0B6D436028BF00ACD80B40A1D1BDEB7192045D658168940
6DE2CE27193C70CC0055BA8777786C48E71D0A4EC6220EE0DA7B121F1AF6535C
0E67D552DD7F7974F93EAD75FC26B4B2A2C53F8545A6DC0F6E1C7B45CDA98418
B81260A3AB95B12F5ECBC9D32FD482C74A5387629E03895C5B94611CA40F88D5
0CB5BE5F12FBDBE6481D67434810D24D626D7C54DDC4E736CCA22A08C53436AF
F4E299178F373FA5E7267E68ED11C7C5A97895C63B7B93E614D298236B216726
130180B89DC4F46FF9216F1C43F4414B7C12B56C0BBB2058B6E41092F1256C08
92105D3C833F5A6ECF861E16CD6B1ED20C0AB3E91BDDA9D98A37E2DA191CC424
189588EA033D08B6531EE79BBDB311C102F70F1D2E31B23DE201E971AF222C24
758A9D002CA04DDD891FF9B7BDF408D1293ACE84852AF383D764C80B2B951CCD
2D9F86131BDAE14851CB30670CC5682A54583836894DF70CFC6D88D94B5C171A
294A2A8C2632483279553652864814F69603B66D13B954537738B1A0864F83D3
E585AE8F88D629C49699BE537834825AE7B8A44677488AADC37E571A14100918
F605CFE56DA8B9A95E2F71E964DFE3037D55379066FC8C4F948986B1F80EFD95
0B74E614A2909FB0F3DD668BDF76A5F474B850CE6400C544CDB702E95E570B17
EFF49A79EEE4953A33DB4595E959F4D0FB1D494E32E8600B503A5AC47D1FD7B6
0137D712DDA34BD7455ABB8FCF0FD7087915C7005028E37D99E2E7A0B279B70C
F4FC2640AD8D14A49BB0D8CC557888A8181357728A7080137F0B54892446EB7F
DE7F92D9F8B4CE14C68FF4895EEC9052E9BA886A31F31DEE53AF2336D298BA4F
BF0E7615BAB550A8E0F36D01E48058D763BFCEB4A3743FB4CD4E7D4D9BEAA2F0
89BE24ABC3CAE648B69A47DA9EFAA3E9D10D4B47F75D05CE2D81DB06B129721A
9392181D6D06E838F7245B1347921D8D93659EC8BF53901AF32E8BD8E2B0B0F2
D0749B78802208CD8C7973617952C4EFD3404FB795EC4D0857AA5D6620C95021
DF41F48896F0BF0A6ADB465304C7139D333EB97012DF37335823A8675F0BCC13
496C41DD9CD116079B65CC2AD57E26D139CEFD39D11A9D53C18C3435ED03A521
49BC1B5BC8A24C667967F1459F18598E3CBAE1DD000B51AB4A815E370F1D3783
61FC8CBC09CF5BA8D6E5C1C149D38E4578A4F18AB6EC4502F736F76AEB861A35
16C023DD8E36C14F8CD7D6DAC8936854A0E9B5873E0C43A98002905B1BC51C9D
07C041D24ED01904D1B9A2C19D04EF925650F4274D4FE6721018EDDF233229D7
D60AFC8B534992629C7C2E900E5AD25EACC9AE031C4DEC6668094D1FA853632D
F3ED7AF2A913FB2CE66241C5102CAEC3992BEEF19B79FB2BFDF274D3B5576966
137E9F90AA3CBF50D220AE4486BF794EA774CAD2ECA4581BD58ADB6AB154DAE7
97D069B5BC95B2E4A03E43E92D7E2F27A7115928226604F9D997EF45C542582B
6F56F890EC5EE8DD9D075383DB6B66D104CA905F33476D5A85EC996E1E166C61
126E8F3755C10B27D938E4E2ED19D9A346970B3FAAC4DDBC9E44698A3020EC96
B8B48C55D6D0B9CDAD690F8976A67364A7B08B3C2A698E4F95DAE539B5E403A0
771421FBBD5D1837145BB0A4495F535D726FD17083673CC00C8D3FB2F9C21C11
2332EA26015383C8D43E634C5F8E12D8B8058059BBDD2767549450C6803B603B
312979604965F50691E18111A5FBF8A92781EA228C2F15AD9AB1DA7501DFAF4A
36A3BD6DFED9BC3104B7D31460E3FA77DE5FE01788E3A21E12FD05D033B7BB01
DD0B9469C910B7A7DD6987F559DB733618F0317DB8FE5438ABD84A6EA9137488
5AC170824CA29486FEA96EA11E66D7A7B7F4EA79A4FA7E74080EE6DD1D6A9F06
861A0FA12A092840A740F3C75A30C1B241A0DFA7D650B5389A6FBCBB36B4B199
6CDB1B3C1B48B24D078D6F24458D68983EB006896E6616DEAF9807C23208ED4C
0449646D7214981A0678BB2138B7FF05556CDD7FAF7FDC41459128DAF4CEC098
942A57659130CE0C8CB226F1BD3B412FF4F71DC5AA368E0EA45AE3A0C9A76C32
0DDC3357D1D5F4EF8A2692CCA84735346B765194A889582016A55A180A692C03
E4F4098C746D99066929DDEAD48EEBD766564D07D976715AB3D87BA81F0E2E8E
A0BF223324F3B5BEFBA37CBCC7A0DE20F697627A5CB22BB386849008A2C7A586
5A52C5F4D31C49B716E117FFA6428294A78367B3905C86A50983300D3372FD9E
8B12B4D67F84988114E324C12AF90CDCD2C0A7D438C61F0239328466F6809AB3
2F938FC52C0AEA6475261702FAA0ED37FED65465244591CB08CD8DA62984A5C0
5FE8E33ADD89BFC13E3B644884D32EC1130C4E43A7FCC0FFCB223701D9052B27
6853EDE445DD11FF240B19F6FB6C514D23A7A4F542378A650B079CF9D096F0A1
4DD3A276916C2B7511F98214650FC8434654301BF2589783EAA854204449A841
EE3E72DC7604785D8DFB04B19ADA8AB86DC029E9A4E734EF1C991F19BB4E4E2C
321FD8598C19CC1478881F66DC5B51FD2B4117D6C8BD31464EC731C92266A97D
C3A56D9C0BFD3FD7FE42F04D18D133EE2768FB6AEFDBE92E6943E81C47094617
BB0EF98074CE6116ACEF6302E40AD74551F95714D15C261A3AEB187BA1DC2BA0
13A2DD215704378ABAAC54D93F05357FA5E3B009A41E67FAEC8A11A6D2F73670
8280E7BC03A0FAFA64A7C5FED819BEB1AB8B08E74E8428BBBB487D799F17A287
22DDF48A5182FD2874FBE88804F4BCBB80DAEF44BD3C3C36FABC9898C2EDB5D7
E017CD595009E52CCEA351BF5650FABB9895623E69FDF56783C46659FA7731F9
0860A28D3D50BA4D87745C648DA50996583B43EBE59F7AA29B4339C799EA8173
DE51E33B4519F4CD58195898392B0BB3E553438CE543831A0FA12A092840A740
F3C75A30C1B241A0DFA7D653C74AF133C1C758731AA348AB2BD113D4C2F5C4EC
E852249D19DA50258CFA1F636B0C9C441A03AD99788F271EA60E973A68CA7A40
61A48AB6671A33AE2AEAA6DCF16914EEEC95A7DC4044F60BD2A1149862434B70
02E64EBB2B339FAA84C30BB2902C2C710F10B80FB6F4E4F6E0A2B1A1D5E9BBCF
46FA3AE7DDF8E169FA4E0EA83347DF61CE1737D52857A23FA98FAE8044179C39
BE2C981AAA4052026BCD278CA322575D75103851939F8F9C31AD6A252A11FC23
F3DEF204E895B8F66CF0745CAB4068CBE65B89F2FD33114E0F26603C0376D8D3
BCEAEC9258D51FE531B16C4AC4DE06354A28409B5F47FCCE9C3E73DCE68523B9
1E6F4A30F183A66BCD03F71278FB2BF0C8A53D229843CB0B9D921B4A6980F6B2
2FE3C7B7CF6357CCA916FADF8E3F4824B954594A1F97194B19FA8DADD216472D
A9D3F3F15E77B3FF03CA99C867D2C9933AE39EC90858E7668AA3D7DA417C906C
BA807993A9162700BC9A110177C5C0F3F1C293BBF681F43E8C4790E17923AC04
383114CE2A1A0AE53506F8B3D5EA3FC1FC92FF7B00CE0AFFD43B8A00CAB588BF
E6B370E2517839D51030B695AFE60DF5A7A32378F3AECCEB7EB1C17662616E14
D4D40978A0C25EAA4EA92318EF052D0394C18D3AABA554C33A6893E919859FF2
B55B2E2E72862B4ED404150DFF000B9C3483D0663B9318AA67E31AF476F2D5CA
BC2D1BDE187239BDBB431AA70981E77AA5E5E76F43E730D9D3D04CD4E9DEC9F4
3EBEFABEF2C792DCA151B0D8E1B14126260669AB1E859F477973507027EE3270
D95EC7BB9535B5D5D7D0DCAC2807EB52000FA982CC11B675F962E779D6FE942D
AEA7DF82C1709D96CD3D475CB31F758C0B8E42102B43FB340911E7F047483587
D80D9983E48F8F6644FF718365EE6D09B687A7BAA7F4034FF97C512C2C654E4F
1E67DB235577B68003BA14073E2702296B284F8035EAF55DC1166927CFBA23AC
769B3C4B13F7C69B5883ACA8375C72B31AB0E0721BF6B14C2F3295817E73A240
269BA7D56CAB8F59FE0F73577B835EE74BE1F553316A7E5570A721815A222BE8
11B4B8A038D3058F19119A3DC1514CA35D43C4A831D03FCB1124534E05AD6F4C
749DFBE48E1EC4DF4956D533E0A0670D60CBD73D1E1B9865CA94B64ACD2C158F
E38F1DB46C97537A4DFF3B518AF203B0A047819E87F107EA5399188AFEAC4447
57444D27BFB4270C76A425B229E5E3853B8297F5961E95C2924BB1C018F5D37C
AF0A6745E2671BB52F111E83C0424B11F880EC6BA0612FF316DB41855733B0CE
BAFBF72CBD3CE799688446E62E36C18B53B5C7E530268B4D8550213E1B0DEA5D
377D3EC454B9E8E4E4B7897387234F730A1D2BE3EB0E3B28C7D26527ED7517CE
43CB6B1FE3136A1205437470096F2168B6852B84A789872053E9930701583DDC
551CCCE5676F5FEC5AD00CF74808248E7CA630483DA13B78C328DE953F3494CB
99CB209FA97A20E05E027ACF8C267D653DD50F1BBBDA92833A987A95FC1F275B
9651A9FDE9FB408F222758ACA18D93D034D2C6FCDDCB3340F65CBEC411EEBD07
899B755DAC1126CE5CF71C5BCE2EDC1B50C64747E1C99FB6B98A20C530C9BD04
C4512CCA1F2C6CB4EC40857946FD8AF62FBE99C8E9E6F3D32F42E9021D3FB5D5
882F227F5EFEADD582C932F59D55EBEED863FEB468FC7AA2DDBE2E708D27D891
64B12BD8BB1777F99FEC2E64F07520CFA413E0F85E1E6FCC916ED7BF2FA6A323
C0FB989D53EB4A5AC25A0858B10DC043C97230DCE3BFE23BEAF3F65E5AF8BDC0
3BD3086AC12A937A30D6D7E9C8821D945DAED7FB5E33FD5121D3770B48BA24A9
B8728BE7045DF33975EC34387F5E4BC4A044FB52D0FB8A93E4D56954A168C491
4234DEE2C2587B4F63EADBC9095D7288271EFE70A060DE73CBF059D2A80F1285
44A358576FC9D03838EC6D061585F61F323D0211BFD466065D1E7CCB38BA40FA
80982D7D4CD0E107D7CF277B6B38DBD1E11BCB2E5323B4D8E08C2E56EC2B520F
0B5FFBADEAE9B8294267C7B7CF6B3815E2F744AF97D7CCF5AA14BBB33130CA3D
0FA05C14185FA040C14681BAD437F93F4093CC6E13B87084E461E23A4D6862F0
EEA2877A036168CB6D42230045E7AA3F84DC7F506506EDE0AA5E2B12D4A0B5F7
9DAA12A9565137074466CCDBEF218EB0AB5C10C35A95B63056A0ED3DDED1C876
4477F63288DB2E9C8A8FA9E7F90D27E38DA7BAE33901AF57C7DB9608701D68CD
9170013E67ABCF1213750F1805F36844DEC6497F457962C3723BF6E61E3C3E10
DE25AE1908F86671423F98E54CE3F758E2C884D6830B00E1FB1F743CA70C0DEC
9A164C369C237DD28FC4BE2843036E872B2A05F53C9BC2D4AD8C286AE8F24B4C
1AC770D3C56ACF54503F4D30E256A366A29BE5ABE7879DB7FFB127700DFE76E7
F3DEDA481022EA9EABD50EBA3FEE1B5E52CAB31F892AE9B4A108FF77025B7681
DBE1896163D0EB54324910088C76C37637331B271A011727FAB8501DA3EB452F
978504EBDD7A96133B2E41002B812F8E1AE5C8B8A9DDBA8D666155A090BB954B
A3546BB6DD46E8206C04B7C52F26E3E505776D90A2D1A68B51C0B83856E9927C
936DF2F10102CF572199F74645C0D9B4DB9DA965633F5DCD8685F30F2E7EC271
0E3F20C1190F1DD809993A92B66326933E19D7C70BB34D043A08D7C97D31A5E4
A8B6259846B2135A4C76D86C83882ED85FFB721A5FCBA3AC1C1F7390CC91AA2F
7760754D8ECEA334EE267256720D6CE4B60F7A26FEF8370A38E142AAD5349BC4
773E95182C70A6E9CDA7CA7D3C3A6403B9A7675DC69ED861AA0478A60BD64DFD
4067550B2F4DAA60ADBBE4A80594BB4BD3513E6D7C501911715F16FD79F34C2B
0C99F08A14AC86DDA7B4B3219AD8063ED4C879861B97A9FF87F80D8F8693422A
E3F790C6D0A2E6E82E6840E51B38C4579FB95337472659676EF647EC262E4C15
BA42E855E249A638240235848C254E401D4C2912B3FE793C6BC40C82F3A7EBD9
50E825A54AEF3F5D38202A50A83FD3C8CEBEC959F88C7AB50DA039B679F5830E
4BDCCF9D19173BC1AC61864D2103301903723619CC4AB1707DB2C4984C6D4FB4
310937D2661CAB42D5779CD52C76A75AE1F85ECDE5A52A19CE8626F750E5E5FD
BFBB4F19F8056D808B6C3229AB971FE2A10F8F92CC6F6F0883C1386E0668FF16
4EFBF2FAB6A71B12EB04587F2CA18F744126B953BBE11BCF65003AEA31E69B9C
F025A82867C81B23EE5C520C6D50720D65D6975CE75D020391179FD995E5020F
B2B56B488D0D61D1FFF5F66F1571346ABD5D7CBD7A792B3DB47808945E12C7C1
8A426FC6B8CCE39A462CA07208BF9F34237CFF5392A17CCED52E42690F9808BF
40C0FF302E4E863FE399923009C2A49FCA5BB62E5E51E56CA70B16425B3026DB
3CCE2F06ADCF9E627826E83BEA4E4804C07814F63BE65E84580D8132CCA0AF61
11583071A340C757238505D6C6F43BB36F021C5282E0A1CF93AD9EE5E71EBBD2
2E6DB2A5CE36A10E727FCB72146EFFFC2D92581F94F9BD984D2881BA76C9C7F2
5AEBFB7CCBED053E6098E23F82604082A21BBF80EC93F7FCFE82F4DADC600746
F71F34A457DA479E3876BC9388C67A6B10685E9921C790177F11BADED75739A2
9DDAD519705EC0C3A425F84078E97952CB9C8F162E7A48480D0F5E55A0973254
A9DEF9CE74CF98E8478DFF4DB502DBCCDBD61CA5B5E20E1CFC04C241664F8B47
476E4098ED693455F82F098F49FF48762A872FE80AEB1757E191DA795FDF71D1
0E1D5D11BD5A3460BEB5DE70958048F037C56C14FDBCE691048469BC4F671FFE
FE5493FBEA5FB1D26743416B6D20BA817AB49C670299E698CB7816B2327C6BBF
CDF43ADB4E5D6BC03CC05A8D8735EC6EC9E847FE8D54CEE9CBC3B88AF70F6AF8
BE5DD0C1451610AA956E22BCD5AB67777E28EEF2F1D4DAD7C24466E5410DD289
DF78C335D2BE90B5C581D1F856D27D19F27B189ACCFA1C6C760DBEFBF5A18E58
B8C88CBFCCB977ED5D8F37B922515858D697A44844F2C04957E3FA951B817B69
BEDF51BE484A6FA1B22079BB3116B85F281755B0743FBB60F2952D9041F7F6EE
DAD25130FF30C54E6609CBF4A5DC01AD6F3500F327B50EB05D3D2D51BDA2FB7C
6992B79CD83E40292315B0EFE711C4929A6E1D14974A6F4FB99C874E748FD10B
214773D46BBD9B361E578037E09962E46CCFEBAB841E2977977BD4D55E2B6D36
34A820A6E376B9FE4D21FE10DE7B57D14720A62D77211A860F0CFEDA2199DE30
E50EC3777E8D0AF5D8F82EBA11D53BEB168DAA474049FA840261F7A8A845A2FB
C27D932CBB65408DEEBB298E1EA6E3E3EEAF3786EF9261524389E71CF0579339
7E53B02B22244FD503D9C6AB38E1D71D781BD8282FD2969975CDB303737E0FD6
02027FA358E88242C2AB3C7666EB43C9A653D05B8E7849031406FE22B8C7870A
B7DDDB21B45C06CAA73CB577C64A17D968CF0EE334272D0C07FAB282082DED26
D5925124D8C0FB19279F86AE6C8C6B3B5D4AB4CFAC64024FE895C0E12E861EB2
84C7F9FE20F25EC9A1269BFE3B0D638B47D51787BA9027C34F29D2599CCD06FC
306E616385A7D46466AE0CCF90E8EEBEB0E65B1286946DDCE9ED7E69E9899220
4D858E8F962C98D69EDD67A699A0A07D047B72FD370FCBF53C18F76B79AB072E
704173D21327C6CCB8536AFC7CFA670159D28823702BD7D8E2920F9E3E5E1DFE
3F734D02A5817427BA6373640261808D460EA89652250A0B3C000A72675C2EDA
F5DC26A0DF69A4E7F4A4CB727813D7B587C3B238AF0733C2E16533A02D37B3E2
5B630A352FF6B240C340D6C862F1E8914F272F598D82790433D7D425DABE80B3
C9D6090F5125FD72C8A4814AC8701AF18CF85BA6DEBD820F6315512C1561A457
077F4D1016642A36AC48EEB6C522F3045502AE8689C1BB7ECB85B7773E3215CA
E2912DCE6DFFAA2CA264D150A413432B735031F8645DC0AE7BEC3CE2E26C9091
1B2DDC282D80CEEAD1432C5D39F018998F25385A909123BCA3DDFA0ADC2283C6
23DE81693159167C11837A876FBF9406F5FEECC4C7AB6DF2C527283E786A4BB1
EC2C98500772D1B72B841C1691C07BEB2428FC62EB117599270578EB83D558D0
1F09DEEB5B7798D02A79B8CE32024C378A87CFE7506B67F7A6FBF8635703C7EF
F0464469F390804B9039E21F1AFC9380F26571E3B2C277A53942A9F9A0D2322C
8B3CBFDFDDEFB7386767ED502BF957542D61CC0DC9510C95183E2D5DEF063454
8E87266F8D62E624BC2288BD1556D40E81A3759E13390EBD2B0416C372A53117
6DB59F10537A4717637CB959293017F917738CB07AA77899611C952405E89F5B
790895B3C6011330A7F88EE867F55C828A9154DDA3C57B6E596AD580B7E16817
CD828E6DB40B86A47A27C033E27BAACD3BA51F9E4B2A07ED6A2570E21CE75B3D
EFE1A57A0DCAA8613B750631B0E76083832E083EF17DE3C42A87CFEEC4A396C2
D83CE85563A9EBEC3B5A1BDE88057173C035CDE31B6CD3542AA43722748EBAD8
C81EE73B03FB45FB2642AD52C326F7D4869F5BFCDA189FE81641832D1FDEEDBF
AAE67903B8C5CC99288333EFCB59D45103580B079A8BCDD2C3C8C4A6A8D661A6
CC8A1F07F8F4CD9BDE31CE9BFF3A9D7F90080AB112BB219A800CAFD8D18CC2BC
FFF24D86071B06BF6FE1B4C2BDC611BA3114056956689E40485D8916D491301D
6F8F9E8864D2E7440A64DACC39F3778AFDC33C0B57B8121AD86C5620623B9875
2E1DF26C67859F13BE58CC190AE494135DA16F1B90356C4A25CB68C8D9F6B4B9
8CDD23C4D7A4962DD2972811C84C99905341DBCA3EC229FC601274F1A761052D
2F73A68419B86B4B0467DD85D4118CC5526966181FBED24DB217926D8C796796
19B2AD4692B8EB899476326F983D9E9774E79CAA848982F970D57C081C8B0453
928D444D655E04D783B5C9EBB4360138DDC55D898644B7D0A4F9F66D9078BABB
FE2E4AF4652A045415357139779E5D3409FF6CC8F3C38638084F8F4F7DA8B4AE
EED920DFCE211E9044E4160DDE659F85AC3AF0EAFBDFD10C9FB259C288535AA2
0A1A27220C07B44D325BD61499BE5044634AFA2CD6E459370B917DEF3624B43E
A354303A08A65DA660084358CF6ED6E537C4B1A45EDE4EDBD5D7844413D81693
D740BB68E363F5E2B3049EA1A85A470E7687FCDAFCFFAC474E70B60385756F2C
9DEF867BE208021E3AFE578357F39D0B8E83152FA4ABF53BD1A2878455E90F12
F6350F3DD4103215B677CCB38184724054F1BE8B26CA19F8626EFA18D81ECA2B
B7B8334874DF6CD56836421E35C0143E41A16F43594E8FAF92DF0A8E352B3807
F82B2D7F3D1A4876C9A106DD7C5CDC6E35CA59D535567B2F754FA6E820F9C890
89D6E93E537B37AA80AC7DD11E9512EDC0D76431B25774F7345DE39A3F1936FF
1DEF5402DA2A35A6745372290334969E9320AF8E7330A29CFEA1099AFC8E0E5B
CE6581A2C28C351126B799284434C917AC5347E19638E7C6E4B118CC665F4B86
1D3766A241400381D11850C81E31DC424E008D3648C230C8DAE6E410E21B0DCC
C122C8C1CA9703EF94ADEACF930E6741D8BCC806D16B7496B0D94B0B5DFE8435
2599BE29C54C44011BA980B57EEA86ED95F3811AD256DFFE665809102BA714CF
1D764162B02BCCA55772AF9368386E066F2C8957F769419E2DFE707DB05C0FA7
23D9E430A779CF890239F53263D2A863FD7349D572419C06513300A0710759B6
D612619ACC80B728B77A07EF96201F5BC9187B8716270883C919BE5A1AA944C5
4DB9518F931EB97DD9D881E50EB3021209B70BA56CBBC8F894B06AB69A867B1C
0322F705C02386EB481FF6B3A5D9FD92C75225742A162DC32CD94DAB82E540DD
17A11FF55FA16958DBB7C36DFDFEE119F1C762AAE5393058F65348F19C6A1CBE
FDC81A47610C122CBB1A89B7F9D676B2469DE17C5FB89307F388F48C2B78EEA5
A1F3FE674E59D84AD4F2357EA8B1525BE84082E6417EEC130A6AE23F96875DB7
161905999E65EAB6A39A337C6F4B3E72DD4BBE6CF595DE4DC4181CD1BC5812AA
5072BE7965743DF0BC090FF99803F98B01BDDA109DD7181880277CB69B8FC62F
B350D208B44019FF03A242DE01C8F3F2353809B5F2104922CC21BD9653EC3792
39D9B043D922DD870FF6E363FDE3AF50451EA399C3F20BDE9D8627BF05CCCA39
7ACAD491B80B27FE1BF52779D0E9346FC189240756FF55DC7C8AED7B6935A5F7
EA365B03F1D7892991900F35DA652C9A2EA9A6169DCD062F245143E413839CF8
C96D561957129F62A20129AE3E4BA05DEB2A78E15F4FBEA19CA7C59F9D1E551D
1B385BD6E1165B2299B9BF1DFB5F5AB6E4785483DF9519E2F8FF50EEBD159A21
47FB85FCFAC82E13616AC095CD59BC595A38B8827768D925E8BD39B766E4B2B8
5F3893C751340427809AB838B2FEBF32161D54A462A9BEB63058BE14B4C59A1A
D1EFBD0B82213FD463BC757AFF26CDD85EC94EB3E5BBF668827A5AD50AA4C0C7
06E9EABE558FBF95D2FB3B866F7F838705B63202637C92C1EFD48BC598DDDCA5
385F195C36FDC255CAA5625BE00D79F0AFED950C4480972EB2600AE638A52EB5
8A59D7A6295EF5CAC69EC21CBB0A68F265791795175CE7FFDE739F7DA9F83033
522871198AB3E954EDD88B5059BFBB42AEC6D709EAD67C3008E7F5A58C7ECD68
F3E37E5F34BA6C2F3B91CE58DCDE5998E5D85161661C364F0DB5412950EE7936
8F7D57187F0828675A52382D41DE6CD9FB5228B5214D49E3DB83DFA942EDBB45
A07A97A220217A25715C9C37AD0FEB03A1C547FCB7AEE8B46CA1410D0816272E
E70DDAE88E34ECAF5F6E49A777D15DA87D810AC3F80DCB692113CC15C94DDD29
4049748B473FD5F4AE9C35AAAC86874739CF1FEE0F4E6D22A4E99CF1D3366F83
DF429871447ABE9B829BEDB5E3DD60A678D0DC7A0BD62C24FD03BA17DDFB82ED
1B2FDCAE0CEDDAF22B9092D42746B5DCAEF4F76D37F48351EE21941655242106
9F9415A5971A3E2252D2D79A8BF2B57B8DD8AAC73F67D51771A9D741AD990BF4
A6DFA9738E5ADCE772F14D9B5CBCBBDA2F44CFF12FFFF8489BED84A9D064B91B
61206C2FAE0145AFD74846DF196E1C9BD16E1C3FB69898BF9EAEE365AE294CA4
44588EECA29B951F218923700C2A85C367AD0E39BD74C8AB9F3E20E8C276C208
AC48CFD46BA8A678488CCF01B38EC98F5DFAB6034E25458E4191B601129A69D0
8E87ECC3602F27D4D17370D21C06817A83B8CD7BA6EEA79B7034C1128484ADB7
FA4126CE2181332CF1D679F5BC882E15EA2D1720BC52584238676DE4DAD8923E
E27F4E0680D685845826BFB35CDB282AFFEFE127E96A13B6F4CF2B4CD097B0BD
1BDEB0B3465267EC51BA0E3B73895A45C136704094A97F5F335EDF4BDE5E1143
2BF54C80E629F3306A5183BC623F91A30C1F1E95581A3D76B9F387D719B00053
23B20AD59BD546952F61640BC70FDCE0651BC5889E2441C56B90093EA5AB90AF
CA2AEFD997AD21C556376D21FB706D26251A2FC11A9F5CBE9A74A953D0596E59
F9510557EAA9071AF876CC042424855F4B53071DF5A0DA5A31B8AAF9FB4F4B9B
8C509E5CD1768470D8A13609B66B1B21C0668DEA8812809B068E5C3998334F90
1C79DA37DEE290F439144D94587AC5A70318578646EE6FCDB29D798C9934744B
0C16A2C22C30EA308E6A5C8EEB5921F493C8F5B7691CD7A9D8629E4877DC526A
CBDE6CC483A11B60938F0956B6B81263025D2261A987048B8DAC71B17769AAB1
3BF631FB2DD2D567877FDDED97FD7C9E73DE4D6D4ED370EFA5B4F3153AA26341
AA5AC2DCE2E64092DCD8A43E34700A2C33A2E6277C320A48A3655FAF6278A32E
622107685B9FB47EBDCA28FBCFE249CE06568AF838EB914775DF9418C2800BF4
2F0012D9DC27CFB25821DE44AE0754616B545647F6F5DC09FB4FDA9832714D3B
748C8C9F61E41367FC2CEC2A5A015EE43B5DB3E3B467204B770A5088DB16D83C
A1303AFA742629C891F2FC0CDFB18D8A4D2260DC93D7AC1107B43AFECDA4F4CC
A46CBC2C0E86E4DB8F5C31418FFC78FB2A3A8794AD2EF7CF6103E545E449F08C
2C5000002DEA8A0843E39ED8BD5649948DC2AB15DFD1E50FF58784941B99518F
F0C15C4187B5842159C81908B75A212B0C9D71648B4550B2727E8682A7A66495
77BC07041B903BF2FE35771C7F5ABFF5C667E681DE349EB88B977D15639435C6
7FCC0D05E6118D5435576BC9871384F13CDA0B61E0126464090C441AB1D0BD75
1575D0A364947AC31318BC86FDD329CB15CCED719FD31616C53D55F0BBF9838C
47B03C8C730543071E483CB9B1E4AC5CFB2C9F6FC1E37918C4E537FF9D6CEEE5
278FF99CF84193B36278E440E86C9431C05218420DD30B791B1D7359CEDC67F9
2DD5B1BA748780983D72DEE80A0E431393C4717F0CE7E9B4AAD0EA3096206A3A
AF487403B7612F26C8A3AD9D18274987A7D46466AE0CCF90E8EEBEB0E65B1286
946DDCEA9E039185AE13AD4E96C8522735074AD649CABF39201E0AB74B2683DF
88F44B9F9CC174C1ECDD3A63E5883BFB5353BFD1375704DDBD27629BD21AF86A
B7E3D686CF1FCAFAE37B87EAE0447EDADEB00764A38DAB429277B77CA11E4C89
1292AFECF8A055EAE81C7D2B8D845D3F92F9E9A10C2FC213EAC75A50B61AB8AF
DE8A85854A512F7C3855B39B8C52DE63A06B1B761F68EE313DAC963DE598AD42
C172936F0D6F0DACAB0D382B2514321AC39763FE6BF5CFFEEFD6DE3A2FD81639
8A08E4D6C40A823273EB74ADE82231873F15E4EA92B37F9045EB711B4939EBC7
DA8C2F1C653843A05DCE23E9D6C1339D085BF92634D506440EDD5B7177BD8E9D
24F77E526E649044CFD4963484E0A24176DF46F0BD3A5958376B794F2043A295
E20B3617080558CFC8D79479C3228EB0F733C9EE13BB629036C4FD946D5C1F36
7453F55559F4090E5F392825C68CD48DDF69931B83B3329DDDD044BD3C3C36FA
BC9898C7D6C6DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9521559716866C7
406275A3206C0B981EB6DC945854759CBFF57054887C1A67A03BD63D38DAAB64
D6298026C403751CF75E0BCF31E3CBE92822256BDAE8A4C5CBB5E43DAAE26260
4365D68CFF6687283DDB7B8F55DF921B1C0912E4A2425D7EBB8F147ECA4043EC
BA90B3DE8B086D5565D6AFEB26BAFF07D3641C11EAA8144A98A21BD69CF349EB
7F2A64C158B276E8851C66234A9E6A165F30BFA407C836803CFE0F9AF5A1E173
349F287CBDAA4BBB6CDD4D98E9FC1E658E419759560A51607E66B968F8E8FCD3
1C50075C951CF17C8608D035B921C6CA50C4ED50CF8D75CEE5155BD4BA6A5972
4CA86160D586A9E9854F50C7D92BF8CBE14B9F6330FAC9972903C2C35C5D1483
348AAAA8F5B4F89FEDCA6F80E6E4D69A0DFF99D86DC88F11FD5B6011EA44D35D
45ADFCD296F82FDF5B7C98854899BDB3A82156573320172DC627587099164627
634D49F59422E6C54A416DA82241BDB9F204686895F1936FFA3A8CD6CCAC32F0
F0A3A02D479C48D67816F04AD0E3DC993DC0E92CE4E4FF707C55BB3148051B2B
6F2E8AD884FC8A2212206DBCBB8F3C63EC967AB33A8BA1A97F7FBF66B790F18E
FECAF31DC72E407853D1AA87FB74FC58F854571200B85467D359020C43A00570
AAEBD3DBF637154F719EA682797CAA35C737F3DF938004CA4E9EFFF243628AAA
4F4FFBC6421EDB9FF6829A42E3952FA29C49E2D9F886F633ADD9C7576B48EC63
B4AA06EAF34C55A9DF7A5BBD21B7BE4AF7B655ED7915395A1A52DDD8F6C69AD7
377FE0AA2AAAF1F5D4F2779D6485F283910C4656BC172C25536060C0A6254A1F
E3C44528AF0242E311055650C5904DA1674F515A954D709BDE51ED70479046A8
1E6443E38551BAD1EFC56A90E139889E730D79ACE3CBE3139D31E8EDF0473F5D
8B7DEF7C80370B00BD9935F71EF07D9740BCE7F7351840EC9E4553B37EFBFDCB
DCEDA337BC0486514F695276EA25603D243CAD66B5ABC440797FE6CD7E2F4873
2F425F2801857CB765896AE4283903049F578FDC0F92F27092E0447B36D2804B
5BE0F6C5C6EB455E04A5355BB9C6E760AED8929A4EED593836DC944F48B0364D
9758FFBC1925F2D660C815F17983702788B73548BFEA03F315BA14C80E802488
19BCCFAA907DAB25BC4E937AEBF236B4D6F4854E03909A403F6731BA04841C33
DCE0C6B2F44FF369069917F3BB200B8F1EECD7E92FD3657ADE76E9E50E17C3EA
6A106B7CE738518C29927E65329E2AAB888219F6137A5EAD65B433124BA3A883
65C8FCD024917AF07AC9EE89B5B18E710860A801D934232B3D83092CD5ABFA55
7EB42466F27A921214CF0DAF1CCED485D93D8209C94E8875065A8D2F7D8A673A
A44579140BB1CBF198EC9C64B9689AD5A4315AE0F672BEC03D71DFA6452E0BAA
0519CB64DDE6282787A7F448D789A609598D6776830D570699D66AAF19B44745
7E0C03F8D7D244E350E3CD021EF8E51C69EEE25F89C79593177F79423ED0505F
69FF85459A658EF4AA3557F832DEC885BB054EAB5317DAD5B6633F0A13B9872C
8CA009ED9A260E2924B1A63A6CCFFC30819D7EB2024DF4B5C25B167E1CB20254
6898F320B71B016A8BB6B315DE7285F1C1C049F6100204D212B6E7A84CC79780
2E2E30E3B9D85E3F0343531B82A0D5AF2D15E33E6F9A7F6776305DD4D2357029
A6AA73AC80ADA1C6E09FA9079287883469F3D7A11EFBBB3A667865D4CC8D86D9
5693BE8587049FC5317E4517E94A9D3E5CC7DBFA30295A8764AE16D1F6760743
55F7FF6C557B3686D801E54EC5ECEC68AB14A1991A1E999AF47447E6CCA2AF60
BB09D4DB7E8C0B4DB1835826E276E14DD0C69117C6D60A211DA5746B5DEE70F5
BDB495EFF99DE85EE281228C7336E07F11768D9999FAB76E6EED4FDFB7F4E8AF
8B78EEEA351038D88E436EAFCAF9102A25E5F047CC8473EC2AC8E4B2C1188504
92155ADDA8E704EC5CFDF86D3B00CA7934C29401816A26CDF8AD1DFB826B01DB
939659AF92E9606470DA3586B3D75FB2D63518E33F23901F5971630E34D4E66C
4DBC45BC684C4B3F5D7A40A46B153E3361484490A765AA7981370215730B5FC8
98BFA5527E97A3F832853CB465BB8B66C50948800458912B40D174FD5848CD2B
C751170B446F9FC06F4B6EA145D5DF33A672A33FA4EB480072AA303D33D54789
95B53381864FE52119BAE1F9E731B65CE2E464DC4A73AE8610F898B72141842E
ACD9168B620439F55FCA7313B67CE7FA22FCBA8E055A1D93F6CFAF2AA7EA2DF4
19AF8DD2D9B46E1D2A1A994FE998985E08F174464F63F952998C3ED88626487E
7F89A7C2DC604FE2331D47B4DE87E586BF27CA432127DE804C125D97F7149F4C
3F33DCAC5FED08DC5180E149C3FE500071536523BE6CE38B2BDED7B82D188B4B
FCAB68B307BAD182590898564C10C3ECB18967E8E6D5FF1F89EDF134C6DCECB2
AF4C92191A5671FCC39EBF8E25003BB2B2CB9369704CE85F5ED2FA84096D5D15
D99388D4FB594E0FCC622BB066A369CC2474D56EA9D08FC11C3CCE2DCFC39617
FE918475FBD0EC66FC2DC0504D4083FF36D5DB577ED40D52EAC80287BD427B0C
CC77178733ABA9267B104DE7D912C5BFCAE5E84C5F5B24AE8BC102CF9AB4835F
AB0C9F2051C82B75D8E0E2385270883C2ABD7A94559A898DC36BEF9C32BF4B4A
49F755B02FEDB978C2649AAB4042B77A195624968FA19415D8AA427317FFE395
E68FC891329882A2639575674B2A47C068A551A73F8DF24B224695DE81FDA340
A865FDD788EFEA7B5CC9463CE5C32B054A731210DF35A32EB4B6139565378537
7402F8B449C92FE90B70F8A88974097A0F3E30F08BF0AC228154EC7DBB3A5884
0236BA90D553D86CF2DBDD1DB213854CB51175B088CCFBF6EEB46D7BC3B3B23F
7658A7FF124E3C90EC49059AF265FCCC9ACB88D1A17EB8CD0B29D318260FBC31
4986223F9EC4DB5B0EF2EF5D51A53DB5657C79A4D8CB345C907AD35EB430EF00
E0BC823E35060219D48D74707A3FE0220354426488C60CE67E17D4201B9A4B49
71ADB498B74F8F86EE5D21DBD348829AB5ABF69F826ECCFBC849C74259C8FFEC
4ADC96CAE705A504499BCF9017D11C9AA761F3C6F69BD096ED63260D344E9B96
3D846A3BEB6C1CBA7BBAD21342AAC9D43575CD8E5870230E9DA69ABC80788F2F
72CEE5F5594A08D0D3B801F1D8C20804D0BD5A355BD413124FA95DC9A1779CE7
CACCAEDBA16A992E6B88C29CFFFC95F561164E2A75CBEE2A278AA17E0E796859
95E2DC852C945EF2B3DDAA76870828E5A3401A97F5DF6CE47CF745E42FF10E03
717D7DDAC8CCAA0089594BFD7A69C3DE3397E5EB5BC7E9C3F2D4D2BCB45C100F
E26B4F5DCE0CBEDC1AEBDE5CBA3E2BD761C0A535ECBEF75CED8626AFA20246D4
1EF5122FB0C75888011D844407E0410E9CCAE5F3D4B3F3A60CF27C1433A5B21C
85C42294C5C5DA468B5307F0F7445B684CF114B5C2CD2E63CFFDFF40565FC7B5
FAAA5923E42F25C141658E71AA13686D93E9BB9491D966755448E2721759C1BE
A3DE43B426C5E175B059005BF2911E6E7452359E2893B59E81369BBB557FAEF2
B8883F578DA3F85FBA3FAD1E46371B4494A48CC3535311FE6DB43D758AB19752
66138B7C516819F07C1F01EE32CDCE873488E3D6B28B3B0E1CFA30BAF3D8E649
F28EA66D111E69B8F859D93625C5D2D7209315F9E358DC4BEB66160A8FA636D0
71073217387C6B3A6977ECE644A6D6F5BF332EA058BB392E27761E72DA24E4C1
08C309E90A8C6DAB6DFC91859741440E8423E5DFCD5FF7BF21EE316AEDA07CC4
A99B507A406981DFAAA68E2CEEE203C7902489D4F4C05604181E0D351A251A39
68A2DFB14060DB0FBDD745BF4212232DDAFB2043F674EA73C9F043EB73E6A051
1F180FBB06FF6D58AC7236A130C5BA9CE99DD3348FCBB6E668F768CB1D62D076
187DCE2F864FC96C7293A4D8737C7E4FB8CB3BA46236EAD6AD931C177A57DD55
81AD8AB3B48C4FFD3D1125E347477BE3DB9D0655983409A0F3CC4A21EA72E36D
F71ACED3AB079FAD8A7FB903D50A4EED2A969E6BC5E6D0D48114A31D7773B74C
3FEB1BDAA3EB9F97BEAE8D2BEC3AEEE142E628F7D0CAF26937B4FA3A237101EB
114A73E558F93B6243FF6AD2C9659F602269475DE9B02E6A67C0D76F9D30BF27
F857FFFC90C7BF80F1363A04FABAF6CEA426A134BAB5FFC7E434276016C4F47C
F594F1B8FC5583755F539025094EAAF71723788DEACF418182D05BFC7367CAA1
3E235F1B8C2881C0B52D16CB8A3B5D19876C81A9C1499F6E71642D04AB88C99B
254649D2EECBCC9267F0178072DAE9C7FCA9F7EA5A376A808EB33CB9E6053B44
C947E706C508835CB5ACF60BA71FF3419336AA668ADFAEA6476263DDCBEB28AC
7A2843FDED360191CEC8393643948CA2E878BEA4BC99CED5B296F1916C4EFAAC
60117A332E793EC734534B91EEC5DDE1D8BF68483C3D200F054DE7F40568FC53
8A0EA2E76E1F62790DA67887AAFF9A46C10DF547D3529C109CCE1864549E5819
8535EB0F1E8B252D3920883C966C6C44E7FFC2E83ADA764F9F2E8A829AF4F1C1
B762DD12E13CF238935252C84E876A9F5F3DFE0F29A95466088DF48B38EBE33B
B1B746FF756824148D0ACADA4E7EAE558069849FD51D8ED3E3000195574DA0D6
440478134FACBCE4B9961FC5AF117044D6153B75671CCD5E63C77F43B6311668
5ADCC03B7796134AB9EA75316BF648C3D465E12CD3611BDD489D925CA71FD80F
1AE8C44FE31CEE80C0D8954150DB3E2C7FAB25C8EFA884D64921DCE789C2EC33
2B85145112D36848923D471D29209A16487327DC3CAC470BC33A673DDC442CE8
7B5EDFE87F760D7200C559944587EAF9A8B5216B3949FBAA0BB145CE7E1F6D60
55DCBF374AB4D6560B31C169FC1CFC42CE221D0499E9B05E06CC365C5E9822E8
C959AEB9CA97C357ABD25D6B8DCB78E81FB5B8D5C70216FD697B9FD2367E45AA
87B3E7D151AF48008CB0A1F824EA5291883AA61465DFA97CD1B0B290B6AC144B
55EBBDE49239FBDBF92515FD7870D55FCD937B60978AE0D5CA7BE834835C7C0E
2FBEB1656E6DE0718D62481CA06AFA9A87EE9A15E7C355D0EB24E751C1E6709A
E201C72F1A136DC5ABBE84D7A5B8293A52908D4E4216283297E4F7E209BA7BD6
A9F971DFCC0433D3116D7E782BDE1135923EACC940D3EDD5D675EE14CA60D33D
1C57855BBEF5FB67E9A49C7009564214078E4A64A95F3973DFEFFFA717E26CD2
AF9356F39EC3901F4654DA943F55F75330C1B315744DE97DEBE396116230FE73
5694C8333BFBE1B32C1B3A1B2F1E4A5E4F1019C1679C5AACA4F9EEB15E139EC0
A3F25624CCB6531AEC9E3572FC29CC7319733165F9AF44FFCAF261538F608C93
ADF044C39BD2A560B752B5EE81F1CBD753C5E11137C66FC482C8879A7B6FA299
8DFCF954203496AAD69A05A3349349C965D9025A5318E953A0391163D68C0C3A
76CBB82A5CA959440D18A5F18DE5091D354C0AF52388BE94F3F9B3AEE160AC87
9F572DBFF8CE9E0A0A732B877EA2DED67FB4F2EF079502B21F3EC9EB9F13C875
B1140B38655D8B6160F13E66A8A7F080829BA359F7F38A6D94CF44BB104C1D3F
A29B837D378BCF35DB43628938193BA055F69A41355195B9D19C79616350BB00
29744C713DC7E42B93EF95F5CEFF173F2489F4F89E7B06D64F37B5478FC939A6
4DF410E3356C17E8E7AF67C80855E052CE1A0A8B2B5B970CC74AE8A08E28A380
4934FFA3EF4A169C5B53E9465971C6B191B8D3ED752968F923AECB58B210136C
3C9D20196C16595542D8F32E962D41213E6B67ABB67C47DF9EB1227994570379
1E58CA7AD364445E2105A81707F189389E6B85C4396797E362836A8B56466E90
7A599A37ECA08C8BFC9A9956FDFC914BA11498104469D55D1A15910769678FC5
D929DEC57025F82CEEAFFFF4821AA48F6841E04B3165928EC4DCDDAB4867FD2B
F6B03F72B0DFD4533CED52E5245BFE8EDDA7C1280A05B1EFF98A9EB779D89DC5
65746F129EEAC3CDF33EC8821B596A5A6C1AA0E3D26C56EBDADA436649A0E14A
B04AB9A9258A1C5B350676B2C4890EF4B3B29354C0EA28694A11E80A1D85400F
9AC9F012CCB5C8C16086B89FE4BB84790116D20EC5C59BE29E0BCA4C249FEC88
6F131B9AEA5C49420D4976695D2851ADFE75F0E8AAEAF174FD8B2D5819DE965C
D18FABECF6253EFE1E6EDCE9C0A6577A87A497B07FFE6D22505EC7C1DEB88CA5
BE13F85373A87336566EFA288A1ABA4FEAB9BF1DBA5795E3F8D12A72CCDF535C
B75D9B390B0FB0E5C3F4CB0D2C1D1430C83390D5CF7B92FA88A8C8499A8917CA
B23F00BC124FD93096DBA5269834053093DBCC03FC0A020F3776EA0CB0F2C607
9BBB7BC19467E00CBA6F032336821AF7646E0A52CB597B80FE1C82074518D746
6BB2B91FDE11773B643C72C9F9715C081EA69D0A80893F9E8DD2A497DAAD4E74
6A1BE6DD2D2D619ED89D0332F0361965FE3C1344FE9313F8E499E7AB30502335
03A1C00251340C63AACBCE6517892074F03B3B826FCD9C6014C94B76298FB838
70FA8C4560A696AE042E1535EE2369E0CEA7959BF6367E7A2BC0E824554C7467
9B82E2EF5D5DD2AD31056B0BEEABD541A77B156D3F8FE57566C3E82D2C742E21
7E70800B4E21F9250277FD3A010200BE9E6C6E52D31CC2BD60128C1A40129C5C
9780A827C088593CAFC16EDD596CD2B58B1801D55698E3D6EC40F767E3F1EF34
56B54B111D8E392507FEE4EE2FFE036428F948E31B89CEA077A3E60003A177DF
548AC3EC924EE0B1B7BA2CBC8AEFD6E6F7DD940F08764D4BB1DF336498EA3EC0
381569627D041DDA5AFC570EA226C1BCD9AF9A306BB0991B0BD52F948319B5E5
D57F38A4554FAEA417E42B0E114AEB19661BC4E38691AF5F618D26C99578CC69
4D1B45DFD46B1B61227A3E5AF039EE65F2ADFE1F47E8AF108A8930B0E4FE9575
02EB6B7800A6537F05A0CED7C26E24B0387AF836F9560C78E764931A81D0E7A3
2E0F8B4707F418D9E4472546C6B31FB1E32B3BD19438E1559BE5FAFF38BF52AC
B7E108DA15EF9A06499BB71CA544A7C9A00FB4EC5BED2B2BEF198E85BA6F0370
0F2DF63A2FAB620B20AEDE0AAA134670EEF956C1C3257839E68C58126E20760D
19A4FFEDD5D77DB19A067EED5ED99A90E8B4F5E918F4DF47FCE099710505E414
A4D8D8ADC9144FFA574A1F09CAB8AC59BB76C8EC67F713282706612B8393961A
007E136E3A66A849E286C83B5454E4796088663F185009220EE426C8B67D64A7
C93D236BF99EF5955A4230ACB6600B6920C704143D7F1C15DD137905AC5913AF
03740B7E6A21536E6076020379CB994D8CB0FF499D231E118E8C6578A48D06DC
36FBE06CB97F5728DC2A30960687F2DCF0ABD8F3F6AF900EAC1004F2E70DD28B
42CAFA4ACEAD0F448267CE3EF7469128245CFF6A4563C9DF6353634DD662B8F7
D76425FF3BED2602A78D833D15306663FBD0276CE238C557A910324EAB0A2B4F
6E6ADADEC15C0F3F9C6FF12845DA0F3738ED888362084D78BD68B99FC5B23597
32476F30B501E3F169059E8125D409D692B930D1C3BF1E58707B19F9522FE9DF
444C7F5B6545903F5A94420A55CA1C51BE57C668FEDD0521CCAA0092856956D1
DA8E954CD0B3B956D3999F650D3E56BAA7699E5221A9B4297B75E73D446B7581
075EC4E4B47E0F558823CBB0EBDB9F63702110BBCDB19B20E40D8191A7260617
0AFD36B49FCDBFEFD8229FAA3A34FF38DF8793E688AE7644DF4DCD6AE2EAC8E1
50AE437C8A2D5DAD262A770FEC17BCE140FB69ED018C741FE91F59C98039AC18
AB00295968AA2DDEF6AFDA3AFCBEBA3F700CD4AA9BAC10D1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans10-Regular
%!PS-AdobeFont-1.0: LMSans10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Regular known{/LMSans10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Regular)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMSans10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-420 -309 1431 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFBD8A43517ED5F05168EBF9D3AFE
25EC2992AF87F286EB5CBCB7AB5454926B000DE86BC7DC7722EA9CC5AF351D71
F88C22A045179501515ECAEDA3F7CF9A23FF4ED29532BCC5A2D9C4566653DC0B
F99B58B303B412848BFDFCDC0BB4CB9FDF30F98236F5A2863FD3E28016CB2182
2E10F5EC6419BBDF2A9031E1EA217B147A06BABF1F87C9585634C5265AD31FFB
EB313C8110270894F41E54896FAE4A5E1A9B04BB8EE53CB5F143D8A3B77AC1B9
96AEFAEB5EA99D855A53026FDEE6A856D3616D7EA42379EC96B931867D9E55CE
3ECD8877C379F6C2FB63E92F146942350BF980AF3D7DE17DC4C2E4B304AFEFB6
F4A34CB06164596B7DF119147C59AA2A1A8D448EB219B2682388F94393CF4D74
532926ED5F2B9D281EF3324258F963D1A460D08DBF08127EE66D40C3C74B98AA
22B9AD6BB84113F84B085EFD4982BFBC507D1215DF109AC39E0B12230FD6DF02
C4B69CAB0B3375C9924071A89A799AFAAC3EE2010B8FC82E42BCBDF021C9DF72
D2D02FBD2CD3E161AF409AFC0828954F2BF56A15E1ABC0815ADB9C244B0AED7F
4B9A54CFA2A286FB4D9DE215B8B5879444B3E683FCAA95D0F1520A716BF2325E
E76716BB5C5DB5600A7CAD11F019AD5B3965B61494D228A3473256E4B8B22A6E
08F055AA199E8E9FB2B6F04B01BC31664D95FE7CAE16648E0344934054BCB06E
44A33F278B8A2215F77018BE752B8FBD6518461CCFAF61F07032398367B284D0
B0AAEF9509F632534C7084BEA8B52EFAF676C38D4A720D4078C0B3B525B7178D
9F85BD44B13272DA283BEA7AC239A3E1A0FEAFD3E9F7AEC9CE3296A054919E74
51FDCDA8344A2E134E285D682648203E81A5343EB6EB96FB42F1034835DD0440
3968C3E86CB7B20B53F9CF8FCB188D635FE58370AEB11453FE69A0DB8341039F
EA654B8FD7323E5536E130FA10100643C234CBDFB8E1CAF1E0C1D9073C3299A0
24F2E4D71EA82005EA03B106986AF98B4557B8DAF0F445E3A884196DB28B1A53
18E8685614ED45AEB1877C4476546BB89CCE98E672DAAE41559CD605D3A0B336
908546BA19F7904806B40AE9F9B354C260A49D0F9A5A63AA4C14879041AC1935
1612FB0B1E70D87D202BB69739202BD31EDAA120CE54ED0DE7EAAAE94F94D991
D70B5EAAC7A6BE89AE12FC2E5B8795122379B1581BBC77A369F72FA35FCF1889
1D5C096DD00D9B2454293E83D46B10EAB91C83A0C09316FB0A6FF881EF3CF6F0
74AB70369ABE28B7078F57A4D6313458E50D0EF41E9F39098B65E43FD1227A26
F6FF812CE452F35A377FF6243E9B38814F9CFE771F4A5F8ADA32416689DE8852
D903268B55D5F7EC0111D574BA4192FAE8EB478B7AE71A3F43E960F8B52A4B88
828D97DCFE9C170E21B59E05661E646D8173A5BE71EBC504A63CCD244B0A8865
2F5A1EC5546FD4DEAA2A82A209E241743C65D91E8B28382FDCEEAA89A3E0A6CD
429A2A543A65852D1A5B12F15CA11F3FF558FB0F071597ED37918F90A32C4175
B6BFB279024EAE1B04D721A6C54683966B3EDE9EDF028C0019ECC8CAA5E07458
583101D0DF5B7963E6EC917BC6FE271EE6C23FBF532ADEE1AE68E21535FA1B41
FCC74614129FECD357C3BE8A00D25EF38327EBE4A4D71078881731C0445AFD7E
A2004ED5C54658E35E1A0E9807D360DC5F76FE4F4EEF7CE1B4DDBA614FD05F7E
2D2E39A8E797DC888B65AA9747C1AF79C1DBFA2B4E18761EE75D3F611D602F5B
7D433861B13CC921709810ED004944D4B18526D4B876AB2F473672BFFE79BB6D
99AD5AC62145C7A4FE583CD8078DA0D6C0E48F1D065844515CC08B55C960DAC9
BE031F7626389BD3E392CFB2EEDE173452C0642747A58F73F774021371EDC57D
CD18653DE577BF1807023434FCDE1C8E7526FB5F8CDB189CCAC92D86370D5D39
28D33F7DB0985F0A3C2E9D379189360FED33DD98194C891292AFECF8A055EAE8
1C7D2B8D845D3F92FC7759245BD5AA1A57DC0E956ADC19E19CA5DF2F8CD96237
E6FC9CE04E7AEA2C7E4A824F8054FE402799EA3A54190E9D909671965AC8849B
3B885B7DAA70ADDEBFC239980A38968FF9B815E5DC93846CCC8A07CED537B2F1
57E170E61E6B7F4B710CF03E37DD2CF0B50DBB782F63D89425977C174DA23731
89135E0ABEBDFF1BCF088B4875981B3590EB6254FEE152B8F789FA9C0919ADB7
99ACF711607ADA252DE7CDF57750DE134BB96083B0267E52474998E3E6319EBA
B3D1D4F44B2743AC7A395E0A83ED0A777D023E226271C826E5FF8740DEECE7E5
FC166ECC5C25B81723F35B6E2C376C4A455A085D4DEDA1E64E8F09431633C3E5
A1C1BACFFCC93367F1C389CD51E7B2BCEC765248C2F863BB5A3540DC67E7B0B3
618E10ECF17EE37A6267ADCB0646D4C2533C0356C7D6AB6BE4CCF1C2A978C9A8
DAA2BC544560980EFA1C84D5348740B8A4885ABE1FC79E8197DBAAA15C2BFDC4
46E8217DC2E35350718D28AA6D2D94B04F46C2A763DAFF6642ADC1ADB069D7BE
B4251CA8A1DBC399EB5D0F829D893986A2F003EB1A3218EB83BBD59F36683025
86D730EAD6B05AD28D44DFCDC6C77027AD5C2E9F99072EC12419BE377CC7ADEC
7DA555678E261DD2E5776BC8AD0B6155E5208D976A9561F7A2A4AAA27D75E801
6345270887C0AC4B0630AAD1FC0B5E43AC491292E94DB36DCA74E4BB24CA63C8
8C0A635E4B8E7C4743B043ABD659BC2580A685B2B8A33EC0C118155DF304A3D4
CDAC6B7AC4296BCDC0A475363BAE2998C2FD754CC7FA7A0F008D1751CE85D367
7E2992991F8911FC31AA21685EA394047116ED7629C74E8171EE39B9968333C6
94674855FA15F3DF491937181FF24CD77631FE7FFD260042AFB4E19A95C7D9B7
1C7D637420B70C1D851B93E01E80D140B1D3E84DC0A52286CE9CF86129007D4B
BE72C55874B10A1413621330BBFBD9CB1C59F5B7EBD718248AA3FA53B85D3EE6
DF698FAC50F4174F1592B0997E15984F42D4B724DDEB44FBFE435F9CDB045368
2BB3519205D57BAC8E8D1035C703855412B353BF98D2CCD6A88B0A67C909E66B
76985E7B9D061CB5F20B5D4A4856E5013EBDE652B37E911AE0E16B1750131E90
A5EED0AA43FB91DF06F288DEAB608FF4395B19AFD46F6695153F1A30638D2222
8B1095657A53E3B470A5800B4FEDC4A99823CAFF87E567B96570D836AC8F1ABF
62A78E43E123A0777BD6C4C11441997E00FB8A600F088414D8992ECDA0ACC39A
B210921D08ED2C97B53738B4B2ED56EBE617BEF17B9DF4F312C20A33C0E343BB
16449961F30B34D1933177E5EADA8AE094B48AE11662FFD3D82CDC8C6B8E693C
A78282A08BBA1FFC28AA0B2660C443D24320003930CD829A0EC1E9F9DF9E9129
E83B988B18A9BC4C44810607BAF5735486A45A6FAA91966B4331FEC05449AD7D
0EFCD4C7304FFA804319305B7CBFB2AEE28CE031D22460DCB25927B9001E6ADA
AB86BA6B2B4E28F3C65566EEA6A408FCCCC97F38EC859BB4944602BE875C0E8D
325837EE7475CE269618C727B596C3C119E92E26231D0086D6A0CA26D77F403C
06D65B7394BF1FC7D06D3682DF6B17216756AC75CB0A6B8FD43C58490E5807FB
5937EFF572CA73E4E558E2B016B13DD10CA06A919E2E8308B3CE320C7448E0C5
0541DFB3E5E98186970AAA6D68B6F7CC89EAAF585B97EE0A1885CA97B6B40521
8546E5322FECD2F1FF85CF470F1B3B617E061104A978FEBF5783565884B33832
E598350A470C355ED1D3A0ADDFF4C3ECD7CC083D70252227836371FF838F6F78
8F3539558236857EFCE58DA619324AFA8E7B0E01A2D369E9DD9EDE9AC14E4FD0
9695BBDBD7994FD6CA31284BA7C4DA696046756D986278D56C22EE0220E42A6B
C4B0B91385CDC9BD557E8A0BD7A9A7D9B6856E23E0B550CABBCA69BBD062515E
16F653C7F38A209281BFEB0FE849E292D6FA3E7B6584779D8BB0797C30E807AC
C6151DACB35708D019A7B9AF5B124290AAEE8EAE36D1249689B95DCCC0576057
EE2EB1058D670E11FB243E4876AD9015F71AC4F78C20D80F5BE8A86EE175A3D3
261F152EBA489EC9E5BB44ADFB7558DD95364412907A0811E8EC4075D24EB068
2E7602CC252BAF0E3503300CB5AB595D7C58123CE01E1590A3015450F9883520
451636E19BC9CEA795AF21EF3258E5238D15FD86F9823D235D1907954B8F5A30
F6AC497821DA8DD730A54885A1164A287A8C8C869CE3BAB8C4891D68A761D9AB
5E1A47585A4736B1045640800B0984898282CB81A3B8188093FF5CC9FE8D9AD1
6D04DE108727FD7C001FC63527F9CC772D4890F05058B3311810C6867550C0BD
F62364BE5F80E23A8F5206C817E75FD12153EF75A00DC599523AFB8D80C54177
E7D853363B246759EC16209E840889804C28E32FB3BFF145BDDA844AFE41C670
9E487288F926C658B30905B56CCEDE37F37167FBCFA2CC9AF629638CBA1EC08E
9F58EBD80322680FC4456E2E0FAC9D31CA1B8B7879B21FDC78BAB3C944BCDCD6
A65B67F3692C8A007FF162F64ED65962C52C7A22BF7AF3BC490D2046235D8EDA
64581718ADF5FBD7277E57E9919BD1055B0C3865852D1A5B12F15CA11F3FF558
FB0F071597ED37968F89385864B2CB30DF6E62F4C135D31756C2EBD239A0989C
705C3684DEFF82699C0F42B3D41AADEF9B66291911495B0944DAB553727A204C
65A18A0AFA2C09BA5901A21BC5A3C4E6BE9637FC8BD3E94D6257BE1B7BFB1472
55171592ECF80CDD365650AEAA5E1D52D8F88DD49EE66A18A785B966F2F87215
1505BA71296A18E04AA75B99F091D4876A83184F0F93C9A09C65A698455D1EAD
5C22014A05C3E613E093228678586D1590F4C85CCF00A967ED60FC7E9B9BF26D
89F808B05C2E483B9171450E4CF28EEA6615C296181A2ACD808BC68EC9476D35
40344C344C2B60468F2EF9010C645A00CCC95B68C83FCADF3F1D0940B1D86DF4
B2EC81023B5B9E354CFE201E2EF6220BCBB479309AE973BB998BBBFE4C486AD8
9EAB0D0C229C0DD9C17F15D490A70F55BE1A6C135C1123CB216D77DC5FBD69FF
F5A9A7B1874BC65B1F468763282BC437C5ADA4086BBB9BDEA30FE67FB424B337
3F37DC4B4FBB23CF81A92C6EF1F4931DE0B7C7E22A39CE53FABB454EAF6C0497
97CEA95428844AD4E450427A92DBFB6061F8B1DC1CFB1C157CA626EC056A68B6
6C652833CDCF08803C36CFF6741A5C45AE186A2F9E899153F7F2F9E5AB5817EB
28F9A81BCEF06D768E9AA488079366B9E331D0A01FCE02B60BCE7A4975433D1A
CFD965F3C47D22B2B8E48DD5E4ECEB25B18BCBACFAF313AC51BA6360C4F0BC34
6CF0AAC6E0FDC9A90A49DF2C1C539755080AA332B33481422D0D3FE03EE61C77
4D39E1F2A3D374AB25B33CD03825FF80B0C4C682AF762302005B0400CB5F7CB4
982A85E65A0951E0B20F41B614C43F5ACD9126970121B0F16C9293AEA08B8FC2
5115C2B59B1671AE16E0B35E28093CB8EAC2E6EE446E7F17182D266F978C8222
761BB99939E778C4B37430AF88A3F85132DA00251F5A4E3AD99E47E4439FB5F3
27842B7C07EDDFCC655BC55C28705A1140BF6D9AC356F55822EEFE030D080291
D452ACEDC5D0E804D136D99B130E3BF1663339F4CE8710E4F3D621652DD2C7E3
356119D1E4BD658E9EB5C64396D14E541FDA2EE73E38B3362BDE4FC9E600BD41
E30B56D88F2DB4AAA1CF706F141A0A108ED471DEAEC54ADE2497021A2B138845
2E5D5F195A0D61A2E5CFC76D816168B879E23DDA5BEFAE5601A9125A3B90CE13
1D3B48612958B389F643AB70F05A3150435FFCF92A7779C6EF4E98BF1D5888DA
C354013964E7B15772BF5D304E3DAE023DAF73D816CBDDA634BAD23DA4DC7FC3
B4C147A3CA6B939B4B19E81AB22056D6564B0C2F3B595C9F8B8A3106AC80DB85
CE6635AD8EC793DA7E638388619EBAB9C62CB51FA723C5F22B0532A91A1CB942
1DE1DD7BC5D109B52B7093D785F43D7EF1E43812D566927F29AB24C087E0F89E
AC202FC8AFBFFEB7B9107833EB41C864CA53EDD6880C3D75B079C63B983F451A
4DCF54441D2E2D5B38F8D4FF1997C6524E9964D7214CE3CF8764FDEFC9ED5DF5
588991BE92E4F23EB14AC341B307C9106E1820F9F1844DD2EC4C5C58AEE11D81
27C5663D02A3008D9542F00B3342404EE1EDA12E74FFACCEC903E9ABCB6ADFA4
EB07AC36443DC19A5900C03C00B458426157AE838C755ADA472EC3CD85FFE717
1CF4F92D539D3293DBF97C4E7FC581F54759C550CAE58B26ADF5E7524C729305
DA2D0F38669F0C1927595AB7CB3397338DE5C961B3AA70DA22E24F5D5F7DF0EE
61C18E2D90D46BBD8F7B95A7BACEF0F59D7A86D619FE072F92AAEC6CE3913A5A
406A455C4AE0BC827DEAB840570975FA224A7914720E92784C5E7013ECA08614
30BE54C47A22685D87B84ECF255178D2D2C4B7F7857E7F55762825505BF7D845
97813143C60D3D1A515D52CB8732B9E06BBA3735D4459905072804AFA49FD272
3E90E176A3473CD094863189FA8B4FFCBCD6D275F69EAEF9AA8C50D9AABEED05
25C116ACE245596D4CC442AB836DAC4807A66F6F1227D0D8FF71335393E9F72B
BFCB7462632EB4D32435A384E0F489D72EF60183282F5E586BA0F374357D84BE
CFA8DB75819D33B4F40A08BBEBADC84A7E00A389D5DB40B69F81A0737A4EA1D0
B1F0BBDE4C21E3DC108365BEE27362B2B9547B7F1803732D18A9B4687989E55B
AAA158678817EEA76FDCD8248221B5D57C11305FF53A443EA9334659FB1B8C19
15E83D18817B3CAD46646300ABC90A568A8D9E0D6C1CB168927E4925532684A4
29F690536B79F694C129336C40DC786D901579C497C3EC6D98BCE6B0497E4A4F
0F2C9DEDFC2C3D1C14EC30CBF83E5729F1C074D4F1665F35710D25F710E45117
68F708A00D003043473B837D9FF5D17B997EFF71C0B00B951A7570A341DBF602
CEDB351FC747926594AD9E1914F07F659282255057A4BD4A3191E6B9AFFA3E99
50914CB0781D5442DC61E235A20EA2DFA0726454C7D49477C1BD064D8CE9D646
DCB9085FCF3AB2178B4192782402D4F78C39F044ED6AF03CA44330F361BA4F29
1D8D47BF8B6976162610749242714C69C6FC03D28415BE077393D77C96B6024A
57B5AE20CA48D1DEB4C668AE63B11D15A49B6E46D8EC621225A259A61AFB0124
260E0A4B165539944EDBECC4B4B8D44609656A9B4BF36A724D7F414849B63D41
9F4B45BB03148722C1B3C1764AD9D987DEA45368072750CAD0C9ABC3F49233E4
97183869EF2B04A9864319494CA4A0C65C626C8EB38F573208788DF39F63343A
DEA9D821A658006E6AD135F28AB132EC69E9A4A7A08C2F5AE0174990833C226F
12A20DB04821702D0F93FBF513D7B85603C8A0F37E522ADF2D327932D9B3AF9D
FAD4E9492EEED55C4991067229F13CE376FDD5BBC9D27F6D857C35FD568C4B21
07E8BC3CD6A1DD200D31F6BA872ACBEBA94F1FE5920A18A7EB469BF2FE0868AD
5FEDAB9A24D99EB12F66F5579AD1B2607C2C1AF8F72103F1A7415F526A2CF3C1
6B800785F169D8E9C1E5FB3EBE07CB1ED5EA53FE5E6D9A09EB31ACEBA9F8E0AF
2AF7C74DB79A2B45A47D4119D363B0AB3AE612FC23069DF8D162A2B400EDE05D
F412F5D3AF80887F93DB3F8EA2A7E25B58685556C172074527E260514D6618D0
58D7B7A624A24E9ADD421346F6422F76D7CED18DDF69931B83B3329DDDD044BD
3C3C36FABC9898C3995CE530994176F942821D2B314893F2B9317FCF4A5AC193
09E617F2CA0C7D35F28EE7422F7CA31B3A514AE5641A7DE56207EB2E7480E120
7329949BFAA4259A32EF3F1D6911750F761F9907A438DDF4506C6ADBAE868F89
301460A0C3D4B521916C7DC880DFA1EE1E270FC43E31513D45928169754EFD6D
AA3219E5AF8DFD8B263DB06519EF5B4DF76423A7DB7ABF711BB0C7C703843BB4
FDBCAC9F30D92CBBEDE059D026A5A2D9B65246D93E36A724C65B40C79A86D885
8830DD50D4A0FF28CBF3E55CCD8018D117CFA1598DEFC33624D698D3FA83EDC6
E2540414C7DC4CAAD2542B807009054090770432D63B1C903E565807815E3EBB
14C6AD0EA3E77DEADCB28F65FD2288E0DE96412F82723A5B16FAEA0A235897E5
7D9FA6F817BA69AEF2259E1A12F791CF64CF7BD79623962FB0309E68ED1789EF
28815477997EEA26D31D194DA347C0CBC91E57A63F800271FBCCD9DFAAB5E93F
903A8FEC0119ED1E6E83C30EA9BCF8ABEE772BF8AB008463B09B4CD634C5E6F5
BAB41A286B113076AA924BE26082FC12F01A62B1C78D857A01BAA2C5C2C79D85
78DF1E5081EFB6EBBD8ECE892063E0D6B5706557B831934ABE6D113D7FCC36B4
D65CA1EF84B8FEEA425E21913CBA31E0267C2BD4636F724AFED7E0558C96A7E0
F31A48B1DD6F27D321F6F925E2E8FC4B58E6CD01B59C73A14DBFB287B7017F6A
E0F5CDFA61BF88C32EE1E82A65845A59CC7C1B147826CDFA9B35807713E38983
34BD99CFBE66C4FDBDD9B9180627976C0EA7D9EA5958819F5CE03BEF6B59B669
723240EC31E9F9EF398C700948FADE7A6E4B2335E903D3CCD648A76B4A70232F
0EF82F448559F8CB85DD9909A74AD69082D52D62C959A39542360C638A47B363
1DB34AB2DDB7CFD30739F5638F9917A41081B83612B3EB27C2D8530C61A98C7D
F0449F81590719B9A9284E841009D3C81A0BCE888D2F9A6B78E6AC615258E663
C9D255FBECA07BE5CF6DF749B1803E3C1EF42D935EFB4AEBC656854ADB4B9808
2A4E7C290926DB52258A8EEDC66700FB549A92821750897D004C5FA7A412AD92
4829C2BF2C24F464D9A27DF84D86071B06BF6FE1B4C2BDC611BA31140569566F
65860211D121430D11E87AA6C12083B29AAEA996FA91FE82C131611B0EE9A983
FADCC302B6E3FDE8F35C619FE7B82602E25624AE69AEF32464B022ACFB895544
3960EFA5C3E0FE565DDBD45AE467A782725D8B3E30CF0794B6F7FE3D52148AD0
F1C8B8B3873F10DD19B813E15DA410D38649A1B1B360921675AEF8F27C12484C
CE6E4530541C1FEF198165415498597436449EE0F9445B4C8063B612B52CD823
2E2BB8D40EE21FEC76772B068BE063365D8C1887BB13D0DC1902B31D1DC2CF9C
9DF2B07BBE645A556C0086C730D91093F42EB0554BE826A2F95A986F8A63D052
24C9DBA79A84DC57C2EBDA8E422A9550A2EB2BFC8BABC1AE4CB0FD382E26BE0A
83169B6C371950D7EA612922EA97B59C1D004F8ABF17246D4C8C41D27CD2CF47
040B5255F62BD2B6A93C68B79E9026102990E064176B21C5E43FFE8183B78BB6
C934338EF87C2614D35715C3E996E6DFC40960E118A3C99F54BAD880A38BF73C
252636CE6A7D12A16E34AD90D4332D31C2662EA19C6577035F9EF833A4B1B51E
56065ABFEF1036EEAB8E04F3244F52F4D7C0250D658C633D68B6FAFE895787CE
65A90AFCEA9F50CF9A75519684785B73039B66EA4D2CAFA5ADC40451308337E1
B50D361D971B735BF61EC499EBFC84988AFFC667D0BE39969DAFC31182DA4A93
9000AB06DEA5AC315C170F158632C17F42128EAE3004F4689475892ED9B8F060
B969D4438A98A52B02183737B9E9E6D3D3EA99366BAA2EB284777A24DD129026
E160A6453D3FAEA6ECE52E4B3584DDBD03B345F3ABD2897BC9C6E095B807D458
D51B76C73173263805C120912C4A40F9E2F872A02C4087386CCDA558F5050025
A45A1049C9625FC6050E6B829B614BCA4AB1BEE9F392284E2BD1043E43EE8134
5E182C07AA0A48FA9399449616273B7D5CFC97271C11CF090CF5F36B3DA0FF93
246A390879AA6AA248B850A3DF9DDA78F22714FB9DE80D3833DEEC7848D7C0BF
826C4825CF63C13B40CE21656E37A0FCB6836AAAC07DAFC63145B05E3EFAC5D3
E3EB004A689C295DB72601D19A5487884D04B679187879EE3F15F166F1E2367E
46F3F3E4E67EFB8C82885D9D7F74EC35DCFDB9D794CDEF1A995E730BF1D7F063
A8419830FC907CDEC4ABDB741828D147C6450EBF5E7AC5FA295BA0A76FF7FF80
4898146B135BCC304C5A1C35ED8D6BB55D3F5FCA77ECB3172F5432AE022F1580
43BEB6A6820566EAD71325D69BF3460E97C92CC31DC7139C3C3E760D058379C5
014882A7FB5165AFF0E95E988114B4AC5E6DCAAE568B7595A72DABE9FE776A7F
1428C5CC1E86F6821160698242C7566FBFF8DA17AA315E2E1C635618BBFEE940
CE89127BD552B9E753381828EFCB01B35A95D0E929461A4A0166B3AE0673BB53
1BB92A1356887584B94B00DABCEC84A5888BA907890E2ED2B94AC84E717DC761
2D6EC842A956F9884A40019536053E2BD0287A3C313E1F43F07D3DDDDE40C2AB
B4115710C6FB48E552AFB2C2BC452857FBFD3954795643DEA2FCEAFCB4B635CC
9D88D8EF06C084C8DEA328EB687FFD23BC99D34FCB2E6586DE317EE3BC34234A
EDFFB2CFB9113CC5A830B5C5D5ED73F2F7D159C45B12286875546A3537EC6DED
AF60D1723DF115C7FCDC57DBB593278232FAECB356174BFDE732B68F61B19CB6
C0D61EA8F1D7AE9BDD7E614BFFE78D628646C32C1D95C0DAD9F3530651DF4BB7
1BDB3DB5D7275AC8492ECF2B562A20068380A59B6F6E4940DFA3D1002523E04B
E24E0A032DBE31CBA82CBC29FEDEE39359C351BA8960636ADF062E957855C4E8
28D61D7937837DF89B62C6E21AB81DFA802A39C5FD642AD61CD0776567E48DD8
D9094FDBA1613FA279A4DA14E2A8D7197B0F7D204DE6A601E8C160B0436B0D03
235AF50043582A0BB588897DA22D5C20F8A2C7CDAFD6BEC1CCD81D28BEDE22CD
263C60160BEC9FA8BAB9A55EF96A710C206B78D6B9EB6AC39B6BD772E8E2779E
6A5588EDF2D3BC8D252111E8DB45FF21B84D20BF831051B61AE37BD4586C793B
4E7904D23627E2FA765DA5E53D4B81EC83D03F502E7DBF202BA558B4EB271C57
922DAE1F23415C912EF1F70CC3895F4598A5BB79E23DDA590FF50155377D02C0
0E0F07C97277B173AD9F901D26B25E87B1A441900C9DFCC0F7FF114C014E1DA8
00226FF9AE5D98FFB02D8E94207DD4475611B45D1F1026A613D0D2FBCF4D729D
7E131335C212B30BA91220BFB289D605B6A8319FAC5C83038807C1CF9869ABAC
639B076F9522A9188CEC6E67F64B36C58C36A88F60969A764BC3650E777F2254
B2B54A972B3583047D43D202EC047CC23B82BF62646A00758DF5D608B586C124
751DB340CCEC2DDC9D395448D09F8AE5C4472A15B636F7BCECEA17F062BE3DF6
FE6F19A849D53640C5E597BE394D55A8FAFF09FF9AFF3CE6F97C2B2459661177
AF96749D92671386A21A1746A71DD2DFD10FAB2CD911298790A1A918750549B2
0CCB32D2B7C11EF06056690527A4EBD1F1355C3BD6CFCF9E20C9F30363291678
A7D920F128855CDD17E51BDD71449A9B7E90D35410E9FC9BF1625A2C942739DE
B8C2E5E9E7530208D2A856AF05D418450827DDE99E776709346F4855121FEEDC
70965D0185F5E174F0758420612059AA4DC1FB491ACDD3A0CE09DF3D2AA01AFC
9DDFC009015756101446BA8DF32E30062BC9CD9533DB03DDFF8F03465B6DC1B2
450D42BD399CD6885317C80CB800A292BECE4041CEBA92D692FDB946D81E88F2
A0BFD5C81EC5A93CCFD1FF296038CBA5719C17A44F9B5F4E39D600BC97E27C97
0DB371D59A05EE148F4BF935435AAD1748882D199B9B7DF58324AE6E3B639DDE
323A6EEAFEA964B4A6DA929B90EEFB3B1EF3AACA3FCEE17C7835239CD823B382
FDD02424F0BB509687B0C6958967CF82C547CE1F1BA09D861C5D5F0BC58BC526
CBED223A031BB54AC9602270528785F331E02AA401E30A909608E8C4C56CA2EF
0B672289353980885FE5EF054D5AE538348F53736896BD7508ADAA2EF193AD1E
8F143823BA37E501B80227A9008E0DD8F572D884436E862A02B218564179C9C0
23B7F92E948EF4BA6C72E63D1DCD11964CA636168CD464420EA747724E5E7D7F
020BDE094D7C51D1278A614DBAD1D8A12F43EC67BAB7373D6BAB4F201EB91D7C
99C1349786D17C13D70004F43BC14DC87F654239C8074700361D4B61C441932D
CEE3AC33B952FDC3C3B9D477F6D1981B59B4F70B33D7B638D4FD147E22731F43
647559A90A7B4F21F4026AADC7808CCC49BDEABC4DD658E02AC0769E0426C313
F48E11B936CA8122B2B8DF640A796F4BE98DC43EB2D354D39C27111B7A9FCCEE
111F30567D294DBAF36C8A89B0D6A120A582344B4E77724339F27031CB75D9A8
D026BF41741F384965825276E2B0FE907671EF8B6F2C8648D63D975FBB6DB545
6BE27ECA9C560DEDAA4418F741BE6E4FA13DEAC6C4F0FCB8C870433333766A88
FE23E05C921096AA97DC56CB17517DF95D8D5E51D994BACE39AC902E2000C12B
3D31DE5E0367B7006F757508FCB5D653DAD14A83E2315D23CBC84FAEC848311A
E8163E5C84BF9A609509DAEFE1C3C16145C2EC24E3221E75291BF9E827F48759
855891196215534604DC2653B9108A90C99438F4581F17B6AD83AFF5DC5A2FD9
3BED414FD9C32FA545510AEC7D7CEFCAAC59A93214150E094DC78A584CF1F59E
6E13E74C5CFBB828DA384BA1943518C5D0FBE0776EA17C52C3D0452031549764
58922AED09E56CC6D3BF92770A027E6F9C6592605A206046CDABD9D54EA413DE
4E7EFBA58BDCD0B2E9F6600943B0A5587553DA49D92EF4318E28998E07D1D372
48BB4F3D06424B5EDC5A9B21DBDC65B6C8DA146FACEE8E49B98AC5CBE49D8456
87BB12CD0913F48FC834675E0F271FB9A33DB9F2D4862713623BF1092EA9A097
ADB7C0ECDD63B978644B8117193C4861035074D7D66B05CAFBFC59BCDA8D7AF0
6EF6B060A0EC53E187893C462730C14CAF93E7AE5638CD88A43C54F3095D6F11
5BD772CC4C3ED8EABFF2230567998B58154582EA334C8BB3B65AFFBD62E1EBC6
3C182EFEB487A03399B23134DA7AC5BD0F503D3ABE63C3D4530E353E5270D5FB
1C45224799C0B710586D3E3DDF28A5864D566F5C53255C9BC3EC91BA2BFA6730
6C1B77709912482BB9F187F1279FF1C6109ED956CFFEDB3AE7F3478503EE68E6
0D873979980A6D4BD4128A5158B9B36B65F5F83E66C2C8397D23A1DAFFE71586
198A4597046B0703EB144DED5218D1FFA5F4099812BCA61A501D21F6A8A812C1
CC027C7FEA0A1B3AF89372E08DFDD9F79AC2200622A13BA8321863578E15C7B5
9E6BDE2866332FCA9EC2E13B4460236900BA62BEC0438675C93BFB1714F93EEB
462770CE65BADB6959B750A71144AF1DCC06D9452602C6756C587166AE35A578
F0E3442BF983B90CDB16C5317E493B43F8D11EC87D3070964D4C686B65B808CF
CC21F32777A4165FCE5AAED1C763C7F5CE594CD93A26BD00C7DEB59D63753FAB
6F4BF4D7B35D01E3A198153B3549111370EB71799DADD1A6BE6D49998860482B
626C628499DF73338950F885151F0383F5188E09A9E1B8C023F7E27955B42E11
9AF4464083CD0B55B8BCCACC8D0360FFEE1824EC7F9E54E92E75E48291ABB565
C1F8644CD5D9F01A26BB879BD6062EF555AE24118F105F6770EEF2A57E3DEC53
3791CF0EAE32CD4DDBAEE2F40653E139692FAF964B9CA0BA5B54BC20ED3F9090
5703ECD2964718CE9B2A4EED730C4363D4761D025AD3FBF0D53A5374BFEF17D0
27F432B3E0AEC8A58B690AD1613D52526FCE3942BFDE611E4CFF66EC4AA486E1
88596008303B55B96499A11672380CD95B44F2A9B05C38909548AF14EAE3ACD0
9B51507B3D3CC39B7994AA043E4E44E7AD3ADC6C73336EEC461C81B8128C629E
F0E86EA18E1315BBE974AEA2DC5B35092957CD9F412B6520E48EC59AA2507B49
00AF3112637E5B60AE1CECE81C816F2426D24C595818B41216FCE5B3E61FC4ED
B48D99497A134DB1219CED437D0A2DA2EDED2A0B6E30A17EE78F5D095C49F828
D3CF9ABC2827A00AEC209962BD3406653A98653F419EAFBB18DF86BE789911C3
3E05D53C5F042E512B2E4AF08B012316E752486FD5CA9E865D7C3B977284E5F8
4B725038AAC6952E417835F42C463C6F1E62512F86E3D9709E693D04ABE2A2ED
A73E7835CD2CC6032BEC0A209FEA7339FA1C3DBA60758C37907319AA5E3423F9
BC866B6FBB910B766B0D3F90E93ACD646C1B9E0113A1C09295667F372F2176DB
8BB9CC0E8A5A052F4D53D6124E3F3267EDBDAE35B3385F8B4958813842795F46
3A942A211DDF7F5179A1F26394EE81797F629FA6B66BFC686A71E401C3D7EFA3
F6906B3D8C355AC254508F6207BA17A89280FE34639833E29C1EE7A88A2A8F73
013AD9CCB7B21C8C516D79AF9D3324976DFB257839F80773833BE29590B7EBBA
A4E3CAAAFF37BF3CF3B287B7836368903A8BDE9A3F340F55B5D301BA87EED52A
6916DE024CAF6669085A3618E4F19060455971B05B84B2E8A8A3BE438BB17572
42BE47C2EF1682A05ACB1435C456501A6BB2E325B32A178A1E5DB965018AAB7C
7884EB7CB4542043A31C6F8B4D4D32F2F7C002945F2928A218DA7B66FC13D706
C4D7F6CB65990B7D718F6A16F933DDDC891E9C6987D0EF50FC3859C0CCD704BF
425C64379E8F07D1B4F53F6F860FDB2BA4B97A09D1EEA744BCB83950B3B55DE4
5D887C483E103C1EF48ECA5CBEAEF0E30C9C97E095CC82B1865ED0E8FB1BC460
59CBF4CB7E81A0E37F669BEB740F13AADB74F675BC0693A324D5BD4C1ADC0DAE
9A91044DD214031FE8339581A9798BC43DB300B5113FB87655EC865C3BEAD9DE
F9F2F8521C2910464AB9A96FB08FD0F3114A13C2A8CBBE519A8F57C66E29E1CC
E364DA954F895436AD8E34AB6B32B5003F5D18F039A152A5C611A52AE12A4658
8DF13131F9DB8437558804DA9BEAA7E70B4C0C5CB3807EFABFDCF9F836D142BA
9DC9FBC9D6E6646AABBAA96BF229A004245E590EE6A9EDE3CEA40FD502ACBB13
9DABD34575DD1D97765E4F69C06E0E7854CB47132679FBABF1DF31D16F8FA295
CEEBD5539B635B544499D40AA6D343664B19774783F390D93E1A3971EC0CC9D3
D768CCAA5872307AB505D02D5C2644779E66C691DCCE64B3218933452A24FB1A
8C30FD6512D2EDCC7996CA18CEC5780844BAF1DE96AFFAA9A7FA81BC79FDEB57
0EC16360B75E6D18B57ED29D3BA29C7E6C7A2B0D86B7025004216CD9C9B0D14E
85D92DFE733657BA7C2104003CE178CCD75A3B1E3AC1950186E0DB76B4D664B3
9CB56007BF7CC083749CEB41151AC74059F3693861AC442CC827F809441FDCFF
973600F469746BE07335FA4632A25690B759A4BF191894977F894820E9BC22AD
9CF62C6CC4B4DC0B6EF3F945B1D97853B113E3D9AFCC98AA7117C2D597A3684F
43A22990EE76A4C6D50727B83A75006A44513AAB8A076F4A6739934FC130D357
20A37E511A043B25D4477B713B015A306F1EEFB6694C1311F0F4FF29D43DE342
018E67F6B116ECD19D0A6D59F2EB2C994C0DB80E2A3617825070AAADF3FC7112
1DF965136E5D846F2E9EC0646B0DD0094704C02E2FB6C5A1FDFDDA92FFFCF7B2
D6744C0F0A489FCA954A0C135B844618DD087768EC44A893A7EECB6D95C35BB8
7DA2B4A6F86A443A7BCFF3C4EADC91E9061F9EB6F8C21A2581078CF91CA4EF83
2E7D6DF3E9E03BCCEAD202AABA714EEFEEEB173B2F166FDA22E38A447F7408BD
9DC974B521AAF7B7EBD718248AA3FA53B85D3EE6DF698FAC50F415ECABF34840
1F4EAEA57B8955BA7DC58262E52A30CC96D2271A985F7377BEAA49275B5E62BC
871BCFAE9AB64225827FB951E69F5F24D03D05ED34391BF881DDFE353EDA9F08
8274216CBAB096E8804492D23773D92B41C75BAF27BAA2AD4F426E594CB35E31
2710D48AD36C39363EDA6BB45BAA486A85DBC2F45566226D9EA08B48360A2F4F
181909ABFC4713C309364EC9F6EA00BCA686611609FAA32E9099E2E8FD5A0CE5
50FF5EA6D00E3564015D09906F94563D4CCE02F844A9C839DFD377F7F4332FBA
5C0D3077FBBABD436AD86BDB2B16400416A7048A811626E0CA3AD54070C80AF8
2DC8CCC76C007B90466167D1AB710ABBE19B2C7C3BD37B2B6300A083E7D1A125
07FB48161F0D293A0032D6CF19AD21811FD0A4E11C873E88DFFDF2E3E5E7B769
96E1D85CB9B62BDE07EE8346E30F68FB69331E39FE966AC1214E4DA30F2D2AC5
15EEAC8E075520156C2CFFD8EA20EA384D74D11F9273358E7F80EE28813D66FA
AD8EF6D6DD77674A3480CBFA62794496BF3FE420F08D2A07B4F53B9FAD619964
4165A2747A198D86A78F708DC404283546D7814BA53FE7FA161FF626461E96BA
77319C3433A852EB0B3E5A1B0528FA9F8BCF9EB55B4E443CE79BEBA97AE481AD
4AB1DC86D8BDB89DADA06B87EE6B063A416ACB9550790198029F2205E51C059D
CE4E6EF6E89AD62D53F8A4BAC182999D231A2F0B3E70AAC7E2D3226CB034D1F2
61A00C76FAA4EB347390DD0833B3283B75010E5542A389EA2F787A4693E25492
1B8C3FA4F9F7EEE92BA769DC7E4C5AB3F50FE19F3A3904ED7C5543D23196B59C
4A11C5BEEEABF1FCA0E3E26DB60D88639B27CCDD74EADDD86CF9DF579B3D7234
9C643723C189EC1FB27501361CDAFC3655A9221EECD425FF9CDE81DB6A122A70
DED859911B0A0804598D0E3C90E3AE0FA61274A5062BB1CDB5AC5FEED5FB69E2
AACCC8CBB70698E0BC5560F2A9F926A5855D4401FB1F62CD6C9CA9EC7948776D
0EB6C3A88D10A1DEF8E194E095090958F9C7079255FE5C958B33971B67D73610
817762EFA48C13C3C2AE1C9E87321EFBBE2BFBE55769AAD700ED6BD5A013FC3C
7CD3F340209A802E7A1D33B7842B4B07436844D9F59948C99E8772503511D86A
08E1612EF010DCD9299ACEA7D4AA01770D98660F8D9620B7508B898B740631E3
60AA6DBA1E54991EC7922725600CA64C693341F7D4011AAE2D2BB797DBC6191F
8081CA1B6042715B72B4368D643CB7D82BA474B175215A540A6422D802CE1EE6
302C0AC1C7CA421B81B6DDFEA56902F018B08F868E7D5604DED821AE4C939B52
67804B0409836B6968F3F1C3B79341CD06E983A7CE9009A72B6EC01E7C007289
A702EE7999C2A97A199035EAB7BD49EEFBEB68157F979DC0DF7EE8E51C4BF6C7
0BC794C6BBE8A2AF2597F453C076341D757B09A3E3EC6954EC35AF45D1636BD9
3E154262B37BD16AF15612ED9AC48BF60CFF85EB4DDDFCBA1A6971678EA3492A
1641851FF8280D2C1BDD3B7599C24795854136B0ED501CEA8E19CBBF7C91D74B
FC107FB82A56592F27FC27F1D49D5FF4BBC0E1623180793E351159C5FAB5960A
2E3E913CC7EF0A07843E37CFC4DFCE94A4355AA673AA61555EE91D01EFAB45F6
927C79A86111E0D53472C70FC6A1EFB0C052CD7679FFFF591DD50D28C0A71C14
99CEF50F2E8C9742C8432AAAB19E4B6CCA656C805A230721E51750128367A0AA
72945C9494ABA8C58F6CA8228F29E7E73BC9CA5E20B1B2C5ACB701BB9F706F97
54F6798BA7B8225E8763679D012D9FB775AB1FA128C91C36EEE43CB41592BD13
837B9EC9735991A7EE6A4F6A047A230D44CE6210E275C4AAC7931329F71A25ED
5DE92278F31B2E573FD86696D98800443F32C94E2FE3839477F4ABB1565BF009
732AFFDD2FF708C1A3F3FA5CBEC411EEBD07899B755DAC1126CE5CF71C5BCE24
EA5CD771D0452943086457A0A9E830C0658485CA66A65554C5AEFF1640292FCB
CD73A9F93A2AD55F57D78667B38E110795251CEBE01D7F81D61317763D0C226C
1DF759FBA35B5D9288B8F54F0FB93B7AF74423F534302F11F0F9E782EAE32417
8B35316D55536783294509A4B1C135211F81404A39FDB273B64ED685BB2F05E6
532BB97E36C76B0EB28FD20AF1751A73E37D5200F5A884569DFAECD2F7F6618C
375D1EC39D0B866481D723779B37801F9AF7ACD4DC86B73EBA2F8F54CDC503FE
67ADDA409A239E153D16C17CD2F83B971005CA4FBAC0E247CC0DDDF00B36554C
29EDD3DE5931CC93B4859A21AFADEEDBAEAB31D735233093AAFA54FFA50A3C77
5B46790D67CC0BC63B05BD4B9621A6A1E57DFCE7C5DFEAEDFD98057DDC351E46
4C6B20242E8CD67888F92E655BA87F5EB2D259FCC4A764B4913744BB8C222DBC
80B3A27C2B2E9819048E9AFF58CA2C6701C4D3E39979022FEFF095DA482A48EA
00E71C0A4414DA781D49720DC88187A0F82B0BEE953525372CF172D46B6B9441
2E7CF8B2C54489E6D6A8959D3F244D8AE9FFF3F592BB136F41F11AFA8CC986D7
951B792DFF270E096FDD8292CA3859740F191992BADF5C684F561B4413C38DA7
401609733F47D9990B238122A8AF3AEE16B83E7A2DDB24B704DA1014F052E527
C49A2C9C840C2B0A3844C5C96C3FBDFD4730D55851D0844A43E24A5C47C34D83
5DB493AECF6389494276FDA492539AF25757A47A53B42F29771497E9F5AF68E2
540408A71377ED4273E07B8DF4BA5D60BD978A4104ED1ED365E7464A6E912124
84F66764A0D815C7E354B73B808F50AA314EA21AE73286559F73B1DFBC1D26B5
445FF5374BFD8E2D97B32CDAFA0C2270679A62DD349CB6F6A20E796E7203FE97
E71B0E19D074858D2BB30FEDEF6C34FAC4077DCA11296D37D0B3F10D8795B37F
4231A18A53FFE7F6E40840193197DD6640CAA6F371095A260DE5DC01B8DEA95E
C206AEAF56159B724B67EB2937B57178972ACEE54C5F8EA613685F38BD1613D4
5D37DBE273EBD4D52570D68DAC80F6AF3A9121D8EF4BCFCC80EC71F78908BDA2
269DE03FE1F01FCCC7F5399762D1BC994E94B6179B1A7FBAD1D309EA3B41E58B
2A7BBEF0F174BA9AD649486C799E667065BA09725BE6418C64C62DF43E87AD00
D2E826F97162E51BF95F2A67090FAF972407EBE347570AD63AF6A82E984B2496
11BEAEE180A4A48200CA7C3761CB4143C5E8B2EC957EA523BD60F37EE2857AFE
C47E25004E55C593424A1C0FC24255111255AFE2F18C1272626A0CE41B25CE1D
16865F3C7ACFF6ED4EA6DFDA17340E96A8E6CDB2F0D6755D8F7F5A6F1A68BB97
4C12EE5E31D9C5563A0A5557C1E0913B055F591F8F2E8A74B365795F7276E374
1C8EFD42A1792CE5A2B6C325C39CD88E4B559CC695F7D2F96BB74F5E3F01C4FD
8DDC8DEB238A2554A0963350F1E3F16FDEAE6A34ECDDB9C87ADD12BBA280B558
73F38C194C67DE0043104AF5E61366D0E9E9307B6301BEDBA4107593EDBBEFF3
B140B7CF51BD51B099045C8CBEEDD6C586F5C0FC8BCC3D355A4F3C7BB8FF0113
F134EC89F518E225C5ECBBBFCB7D5E1BDCF7DF04DF478C8AA46788DD87665BF1
43F03485E11FFE1F67FB6D16AB556EFAE54A5D3FD3AB69E247AC2F1758689851
A9537A6DAF49D0A85D7764EBB31166A29307F6343DCA5AE980983A41DF300A7B
3E985855FE521816004F7653175F8C470FD1FEED1FCD70B4A6855E2109A878CE
4621251A2CB584650B079CF9D096F0A14DD3A276916C2B7511F9848EC764A5EB
0BB4F2C8AE029BD1172B430088B5786E7D6C82680B06372211F15B3ED7370585
1BBD2AD9D78C6781F2932122CC04FEC35A0023F82192384592AD70FFB73ACEF1
2D16BCB3BE5B4EB51671AE9357176D5AC145011B77175FF02C58724CDB27DBC1
BEF92517B2A7265C3E602A8308B3CE320C7448E0C50541DFB3E5E98186970705
425583BE8D6250D70C0DDA781474A6E41A25F0C95B7B1B6DA4D7D31A9F6BE6F1
46D4A9DC78F419FAB7C9E2F027B9183336B45E338CBD396A3D7C0CCFFE26F87E
3AD1D4239B902891AAD7B57F2597B0570F6ACE63F4CD6CCF332771B58DFBBF60
7B969FE66E1FC555E83C6C86C010E5250BF9754AA7C5A07A5FA1B81349CF00E4
546ECF6CA4AA10D95E252D6475E36DB2A4461B3384EB9847E836B14D85F4AD8F
8A00E390D5F674E19ED86F205FA763D8FF942D8B488177A8C8F976CF1665CE82
2B4A6E09BCF9EFA9070614291B2B0E1276E86866650B00DCAF38B80F8C4872C5
A1A252445F61A49B5AC2746B7D099884D8021E9C8349EAE8AD6EB72B6B3497E2
4D8740D062C120BA087F61117F95536BA202392A840C03215E11765AACE17613
FB790982426BC1D4BE99E145B2D2EDDFAAE8997018DB164FF9257055F91B3581
4D90ACB1E3A4D69168E55656BC6FB799B95D5889EF9BAB214F051179E2EF5B40
210461A17DF138F374C1B265FD4D65092AFC970854436B8D5B512083C90B476B
73608413B83693B2E331EDF447D57414E52451C9E15AF8B79C03B5A165007236
EF014B547DB1113DFD7CFB19D059D34F9571BB8721A1B143F5DDC930ECE952D3
17A217BB46D660A5971B8B0488FF7B789D5597FE88BC0DEC2F16E6D8257DAD5B
E7A0300D34614549F7AD03D9D1C3CE7A4BE86E4A67B1D8D0BF702F517829D4A4
450EC385936F5D85031896D58E534234ED7E3C96AC75FC0B744A6574A0709BB1
DBA2AA29249BAED5FACEA56CBE6C2B3E31CA0860493707D07DC62F7707A6A3ED
98A7DB137EEF6F9B969FECD3B149C00CA28E9D7F6C6FB36D145C1FF6833D0F19
14865E009C6F55EDFD5801AF83E86C7CE9A38EB349AD42715D6B2D9764F28113
06D168A9E62FD42FBBA19FD5E9DD82F35C7BC4FE5A46D635A608592B774EC212
035244710BF5710BF0ADEFA17B56E2DCE6910787BAE7B4E55A023CACF650F8D1
21B14F3B8501FA7619F5EF57C5EB4AE4534C72B64FC10BA7B7F89D9D507BB697
F2675E801C13A3EA2142D8189FAAD93C0D3E5B44F34397C16353A36D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 13221573 13259948 1000 600 600
(media/cache/mscLiterature-figure6.dvi)
@start /Fa 134[45 52 120[{ enclmmathit ReEncodeFont }2
90.9091 /LMMathItalic10-Regular rf /Fb 224[37 31[{}1
74.7198 /MSAM10 rf /Fc 139[30 30 2[43 2[64 21 41 1[21
43 38 1[34 1[34 1[38 10[58 12[28 73[{ enclmec ReEncodeFont }14
74.7198 /LMRoman9-Regular rf /Fd 225[45 30[{}1 90.9091
/MSAM10 rf /Fe 134[42 4[33 35 31 2[45 47 72 22 5[28 40
47 2[44 13[51 14[66 58 67[{ enclmec ReEncodeFont }15
90.9091 /LMSans10-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 14 1
TeXDict begin 14 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (Literature Survey: Finance in the Frequency Domain)/Subject
(Lorem ipsum dolor sit amet)/Creator (LaTeX with hyperref)/Author (E. B. Legrand)/Keywords
(thesis, msc, subject) /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 1 0 0
TeXcolorrgb 67 -8 a
SDict begin H.S end
 67 -8 a 67 -8 a
SDict begin H.R end
 67 -8 a 67 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.14) cvn /DEST pdfmark end
 67
-8 a Black 1 TeXcolorgray 1237 6416 5098 748 v Black
1 0 0 0 TeXcolorcmyk 1237 6416 5098 316 v Black 0 TeXcolorgray
1237 5673 5098 9 v Black 1 TeXcolorgray 1237 6304 V Black
1902 6059 a @beginspecial 8 @llx 25 @lly 155 @urx 68
@ury 1470 @rwi @setspecial
%%BeginDocument: STYLESTUFF/TU_LOGO.eps
%%Title: TU_d_line.eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: Marc Vleugels
%%CreationDate: 02-05-2008
%%BoundingBox: 8 25 155 68
%%HiResBoundingBox: 8 25 155.6373 68.5352
%%CropBox: 8 25 155.6373 68.5352
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: TU_d_line_M2#rgb.eps 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2008-05-01T09:44:39Z</xap:CreateDate>
  <xap:ModifyDate>2008-05-02T13:49:22Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>120</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAeAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;VNbiB5ngWRWmiCtLEGBZQ9eJZeo5cTTFVTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq0SFBJNANyT0AxV5P51/5yd/KfytNJafpB9Zv4qh7bS1WdVYdm&#xA;mZkh69aOSPDFWDaR/wA5A/mt+Z2oSaR+WvluDSoFot1r2oObhLZW6OaKkSv4JSQnw8FXtH5e+RV8&#xA;paXPHcajPrOtajL9a1jWLo1kuJ+IXZakRxoo4og6DFWVYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq0SAKnYDqcVfFv5zfnN5x/M7zXJ5I8jrPJoRla2it7&#xA;Ovq6gymjySsD/cbVUGi8fib/ACVXjHm7RLTQtYfR4bpby6sVEWpXETBoDdgkypC1BySOoj5ftMpI&#xA;+EjFX1/5O/O78k/JX5aaNY6BP9avjbwhNDtInN7PfSKBIJiVCh2k+0zGn8tRxGKveY2do1Z14OQC&#xA;yVrQ03FR1piq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FWPfmI95H+X/maSxr9dTSb5rWnX1RbOUpT/KpirBfyC/KjRPK/5a2c8K8Ne8w2CXGo6olPXQXU&#xA;YdIon/ZWIMNhsWHLFXgH5hf847ab+WnkzVvMHmLWo9TvpmWy8v2UKNEHmlfeWUsxJMcId+I2qNyc&#xA;VTL/AJxS/JW61fWoPPmtwFNG01+ejxSAj6zdIaCUV/3XC24Pd6fynFX2RirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqX+YdbtdB0DU9cvEkktNKtJ724SEA&#xA;yNHbxtK4QMVUsVXapHzxV4c3/Oaf5VMpVtJ1xlYUZTb2ZBB7H/SsVU7P/nMr8o7O0gs7XRtbhtba&#xA;NYYIVt7QKkcahVUf6X0AFMVee67+cf5E+aPNMfmHzjB5o1/6sT+j9InisItPt0LcgqwxXCs/Qci7&#xA;nl+1UUGKvo/yv+aXlbVvy4i85aZZ3VtoUf7iGzaKGOZFjmFsFWNJGjChulH6fdl2nwHLMQHMuNrN&#xA;VHT4zkldR7vM07Rvzd8t6vqltpttbXiT3T+nG0iRBATvuVlY/hmdm7Jy44GRMaHv/U6vTe0ODNkE&#xA;Iidy7wP1s4zVu9Yd5j/NLy/5f1aXS7y3u5LiIKzNCkbJR1DChaRD0Phmx0/ZmTLDjiY18f1Ol1nb&#xA;uHT5DjkJEjur9ab+VPNeneZtOkv7COaKGKZoGWdVVuSqrkgIzilHHfMfVaWWCXDKrq9nM0GvhqoG&#xA;cAQAa3+Hme9hP5of85C+S/y41+30PXLLUrm7ubRL1HsooHjEbySRAEyzwty5Qnt4b5jOcxAf85qf&#xA;lWSAdL1wA9zb2lB911irO/In5+flh52u0sNI1T0dUk/u9PvENvM/snKsbn2RicVeiYq7FXYqg9Z1&#xA;S30nSL7VblXe30+3lupkjALlIUMjBQSorRdqkYqxP8rPzd8t/mVp99faFbXltFp8qwTLfJFGxZ15&#xA;Ar6UswpTxIxVEfmZ+aflX8utFj1TX5JGNw5jsrO3UPPO6irBASqgKPtMxAHzIxViH5T/APOSPl/8&#xA;xvMsmgWWkXdhcpbvdLLM8boUjZVIPE1B+MdsVev4q7FUi8yeav0LdafZw6Veave6k0q29tYm1VgI&#xA;E5uzNdz2sYFD/NXFVun+ePLd3p4vZ7tdMAuGspbfUStrLHdJ9qBlkIHOhBHEkMCCCQa4qhb/APMf&#xA;y1Y6kmnXMjR3L3M1swYxKEW3hE8tw5Z1pEAQtftFtgpxVPtJ1bTtX0221PTbhbqwvI1ltrhPssjC&#xA;oO9CPcHcdDiqLxV2KuxV2KuxV2KuxVLfMmiW+veXdU0O5keK31W0nsZpY6c1S5iaJmWoIqA21Rir&#xA;wf8A6El8g/8AV91X77b/AKpYq+PL2BYLyeBSSsUjopPUhWIxV9YeWP8AnDryPq/lrSdVn1rU45tQ&#xA;sre6ljQ2/FWmiWRgtYiaAttir0jUPIWm+Q/yUu/LWnXE11aWrq6TXHH1CZrxJDXgFXYt4ZsOyv8A&#xA;GI/H7i6ft/8AxOf+b/ugwD8vP+U20f8A5iB+o50naH9xL3PE9j/41j/rPpTOLfTnz5+b3/Kd3v8A&#xA;xjg/5NLnXdk/3A+P3vnXtD/jcvcPuZ9+Rv8AyiV3/wAx8n/JmHNT23/fD+r+kvQ+y/8Ai8v65+6L&#xA;wL/nK+KKb89/KsMyLJFJp9gkkbgMrK2oXIKsDsQRmnekfS5/Kb8rCKf4N0P/ALhtp/1TxV4D/wA5&#xA;If8AOPGg6LoMvnjyVB+jH01kfU9OgLemYy4UTwCpMbRsQWVfh477U3Vesf8AOOf5j3nnr8t7e81K&#xA;T1dY02VtP1GU9ZXjVWjlI8XjdeR7tXFWS+ePzU8g+RkjPmbV4rKaccoLUK807jpyEUSu/GopyIp7&#xA;4qx7yt/zkf8AlD5k1CPTrPWvq17OwSCG9iktw7E0AWRx6dT2BapxVlv5hf8AKAeZv+2Vff8AUM+K&#xA;vBv+cK7mC18mea7m4f04ILuOWVzUhUSAsx28AMVYN/zlP+YnkfzrrPlVtA1VNRs7Jbhb5o1lQRiV&#xA;4v8Afip1VD08MVfRvlf80vyVuLS8by5qNkttodm11dfV7aSIW9pHRWanpL8IqNlxV4L5o/Pa3vP+&#xA;cg9KvLbzTO35e2k1s7LG06Wu0A9UvCFVnpJX7Sn2xV9Q+T/PflPzjYzX3lrUU1K0t5fQmlRZECyc&#xA;Q3GkiofssMVUPNGk6/Preh6to8NrcPpZuvWt7u4ktgwuIggKvHBc9CN6rirA9f8Ayr83Xl5PrYFj&#xA;eatqv179IWRnMNtC13FaW8XCR7adpY0gsEWX92jOdxTpirI9K/Li6tZIRcNbTpCl1F6jc3cia1t4&#xA;EP7wMTRoGJq3fqd8VZB5E0zUtK8m6NpepQQ219YWkVrcR20hliLQr6fNXKRE8+PP7O1ab9cVT7FX&#xA;Yq7FXYq7FXYq7FXYq7FX5bat/wAdW8/4zyf8TOKv0p/L3/lAPLP/AGyrH/qGTFUD+bH/ACgGq/8A&#xA;PD/qJjzYdlf4xH4/cXT9v/4nP/N/3QeM/l5/ym2j/wDMQP1HOk7Q/uJe54nsf/Gsf9Z9KZxb6c+f&#xA;Pze/5Tu9/wCMcH/Jpc67sn+4Hx+9869of8bl7h9zPvyN/wCUSu/+Y+T/AJMw5qe2/wC+H9X9Jeh9&#xA;l/8AF5f1z90Xgv8AzlT/AOT98o/8wOnf91G4zTvSPr/FWMfmgts35a+a1uqfV/0Pf+rX+X6s++Kv&#xA;A/8AnCq8W08t+c7qdmFrbSW0zeACRTM5Fdq0UYqwn8oNS8g+dfzI8w+d/wA1NSsoyrpJp+najKqw&#xA;yPMz8QEc/HHbRxqgU7bivTFWXf8AORFt+QWs+RrjUvKt9okPmfT3ie2j0x4IpLiNpFjlieOKgeiN&#xA;zBpUcdjSuKs6/K3zdf8Amf8A5xl1C61GUz31jpmpafPOxqzi3gcRlj15ekyVJ69e+KsY/wCcKIIZ&#xA;/J/mmCZBJDLeRJLGwqrK0BDAjwIxViX/ADlZ5K8o+XfMfk6DQtItNMhvPX+tR2sSxrJxlhA5hQK0&#xA;DHFX07p35X/l1pkV5Fp/lzT7WPUIGtb5IrdFE0DkFo5KD4lNOmKvlnzV5N8qW/8Azljp3lyDSbWL&#xA;QZJrNZNMWJRbsHtQzAx047tucVfXHl3yn5a8tWstroGmW2l20z+rLDaxrErPQLyIUDegAxVJfOGo&#xA;W2m+bfKV5fXC2lg017bPcSsEhEstsWiR3NFBb02416nbrirBl8z+aUtvM1/5a1K2Swi/TOsW000P&#xA;1qO4+pTRKqxuHT90/GRCyk9ivuqjrvz75g0mFntLeHhr1xd6fosaR/DHrL3NIPVK7skqSvI5PaI+&#xA;OKpFL+cPnaKTU0BtxcQxatwtpRbObf8ARrtHFI8UMxuBVkAkEqqpL/AQKVVV/N35i+Y9K8y6voF1&#xA;rFle2sdndRQ2a28EkjvHpL3TC6jEyTwlpAxUrE8RjopYMa4qm8PmzXtFk13UrnWo7yw0nUrGbUdK&#xA;MSB7bSLmyg9SWMKeapC0/qVpQ+k/djiqe3nmzzDb/l9Y65dPFp13q11bhrmeP93p9nf3QETTISAX&#xA;igkRGLHj6m7fDXFUl0C81jzF+YGmtc6vHf6Zob6qLWWGFPQu5LcWafWAVbj6kY1B7diNg0b8acji&#xA;r1fFXYq7FXYq7FX5bat/x1bz/jPJ/wATOKv0p/L3/lAPLP8A2yrH/qGTFV3nrSJ9X8palp9uC08k&#xA;YeJB1Z4nWVVH+sUpmXocox5oyPL9ezr+1dOc2mnCPMj7t/0PnTSNSuNI1e1v4l/fWcqyem21Sh3U&#xA;/PpnY5cYyQMTyIfNtPmlhyRmOcS9wh/OTyU9kJ5Jpop6VNoYnZ6+AYD0/wDhs5c9kZxKgBXff4L3&#xA;cfaPSmNkkHurf9X2vGPNfmCTzBr91qrx+kJyBHFWvFEUKoJ8aDfOk0uDwsYh3PE6/VnUZpZCKt7f&#xA;+VGi3GleT4BcIY5ryRrtoz1AcBUr80QHOY7VzDJmNchs912BppYtMOLYyPF+PgHzf/zlY6J+fXlN&#xA;3YKi2GnlmJoABqNzUk5rndPqs+bfKoFTrNiAOp+sw/8ANWKvnv8A5ya/P7y3L5ZuvJXlS+j1O+1O&#xA;kWp3tqwkghgDBmjWRaq7yU4njUBa13pirNv+cf8A8rb/AMtfk9Ppuop9W1nzEs9zdI4IaETxCKGN&#xA;x1qqAMw7EkYq8M/5xh8l/l7r/mHzD5X88aVHca3bhH0+C4klicGBnS7jAjdKspKGnWgPgcVewfmb&#xA;+XH/ADjr+Xnlhtf1jyok0XqxwQWsE0/rSySHogeZR8Kgsd+gxVOvKj+ULj8gNa1Hylosug6LqOn6&#xA;ncQ2M5LSFhDJE0hq8uz+lt8XTFWD/wDOEP8Ayi3mX/mOh/5M4qlX/OZn/KU+Rf8Ao4/5PQYq+qsV&#xA;fJPnR0T/AJzQ0oswUG408VJpu1ooA+knFX1tirFPzOv9Z0zyZquracljPHplnc3t5aajDJPHNHbQ&#xA;tN6ahJI+JJTq1fliqE0/zvptlcNo+vSwtc28psp9QtLSaHTI5PSEy2plkaVVf0qEjlx6L9rbFUJN&#xA;+bXl5jYtZWV46SXaJJbvp9ytw8VxYXd3bzWsXANJ6v1QioGw5cuOKq9p+Z35eXV1bPaiST9LtZwt&#xA;erZTelyv9rSO4m9Oil2+AK52bY0xVbL+Yfli8lin022Ml5eTWkFpd3Vq8SXlnNfwWc8ltMyr6qJ9&#xA;ZBG/dWoVNSqpal53/LnWNMv4b6OcWV/a0WX6tNGdStPWS3C2jqoadHluEjCr9r1BT4Wriqb2f5he&#xA;UdQuLrTZHkt5LZLgXkF7byQBRbQwTXEbeqoB4RXkbEdwSRUA4qn2kyWFxplldWMPo2ksCSWsZj9I&#xA;pFIoZV9MgFNqVWm2KozFXYq7FXYq7FXzfdf84UeV7i5lnPmS+UyuzlRDDQFjXFX0FoWlR6Romn6T&#xA;HIZY9PtobVJWADMsEYjDEDueOKo7FWH+Z/yu8ta9O92Veyvn3ee3oA58XQgqT7ihzY6btPLiFfVH&#xA;zdNruwsGoPF9Mu8fpDFT+QicqjXCF8Da1NPn6v8ADM/+Xf6H2/sdT/oUH+qf7H/jzIfLv5Q+WdJn&#xA;S5uC+pXKEFPXoIlI7iMdf9kTmHqO1suQUPSPL9bsdH7PYMJ4pXOXny+X67Zzmrd88i/N3/nHTRfz&#xA;K8yW2u32r3Ony21mlisMEcbqVjlll5EtvWsxH0YqwhP+cIvKYdS/mS/KVHICKEEjvQ70+7FWf+QP&#xA;+cavyw8mXsWpW9rNquqwEPBeak6ymJx+1HGixxKQdwSpYeOKvVcVeN/mX/zjN5Z83a+3mXSdSuPL&#xA;PmKRhJNeWi843lH+7TGGiZZPFkcV6nffFUgs/wDnEiG+1WC988edNT81RW5HC3lDxVUU+BpJJrpw&#xA;ppvwKn3GKvbb7y3p8/la58t2yCy0+ayk0+JIVAEMTxGEcF6fCp2xVin5Pfk9pv5ZabqFjY6hNqCa&#xA;hMk7vOiIVKJxoOOKoX82fyQ0r8x9S0a+vdTnsH0b1PSSFEcP6jox5culPTxV6Xirxv8AOH/nG3R/&#xA;zD1+LzDb6xNoespHHDLMkQuI5BESUfhzhZXANKh+w2xVlf5TflzqfkTRbyw1HzFceZLm7ufrBvbp&#xA;XRlHprGIwHluDQBP5sVZN5n0OLX/AC3q2hTStDFq1ncWMkyAFkW5iaIsoO1QHrirFLz8n9Du/M1x&#xA;rEkq/V7u4a7urP6ramVpnhELAXZjNwse3qcVavPvTbFUw0TyNqFlcWM2o+YLvVv0bLE9lHPHDGiJ&#xA;DZz2lKRqvJ5BdF5HPUgbAYqo6L+WVjpVpcW0d7LItxc2F0WZVBDafcrcou3ZytDiqhZflVBb/oqK&#xA;bVri4stASGDQ7Zo419CCC7t7pUdlAaVuNlHEGNKLXYsa4qluqflPeRaDDb2OoTajNoVrHb+VrOVo&#xA;rUW4gure5iLTrFN6kkf1OJUZ4ytF+JfiZsVSyP8AK7zTrGkOPMrqdR1TzENTv3jlQtFpxsI7Ce3d&#xA;o44kf14IPSZEWgDg1YpXFXr4AAoNgOgxVvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -76.5352 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 76.5352 li
162.638 76.5352 li
162.638 0 li
clp
[1 0 0 1 0 0 ] concat
38.3853 44.5191 mo
40.8775 44.5191 42.231 42.8643 42.231 40.5425 cv
42.231 28.7007 li
47.5318 28.7007 li
47.5318 40.8072 li
47.4791 46.1363 43.2105 48.2291 38.3853 48.2291 cv
33.5601 48.2291 29.2916 46.1363 29.2388 40.8072 cv
29.2388 28.7007 li
34.5396 28.7007 li
34.5396 40.5425 li
34.5396 42.8643 35.8931 44.5191 38.3853 44.5191 cv
false sop
/0 
[/DeviceCMYK] add_csa
0.764706 0.0470589 0.00392157 0 cmyk
f
82.9195 41.6587 mo
82.9195 40.4117 li
82.9195 36.7281 80.8331 34.1285 77.0591 34.1285 cv
72.8453 34.1285 70.8824 37.3902 70.8824 41.2867 cv
70.8824 45.2105 72.5806 48.232 76.8482 48.232 cv
80.0298 48.232 82.3619 46.7222 82.7603 43.6998 cv
80.1099 43.6998 li
79.8169 45.6343 78.8374 46.4029 76.8755 46.4029 cv
74.3023 46.4029 73.4488 44.1143 73.4488 41.6587 cv
82.9195 41.6587 li
cp
73.5054 39.9087 mo
73.5235 37.8331 74.7798 35.9585 76.8755 35.9585 cv
79.313 35.9585 80.2662 37.629 80.2662 39.9087 cv
73.5054 39.9087 li
0.858824 0.850981 0.788236 1 cmyk
f
88.4932 28.7007 mo
85.9732 28.7007 li
85.9732 47.8355 li
88.4932 47.8355 li
88.4932 28.7007 li
f
15.5054 47.8345 mo
20.8062 47.8345 li
20.8062 32.4136 li
26.7447 32.4136 li
26.7447 28.7017 li
9.5669 28.7017 li
9.5669 32.4136 li
15.5054 32.4136 li
15.5054 47.8345 li
f
28.2388 19.3843 mo
26.9458 19.7901 25.6119 19.4654 25.6158 17.7359 cv
25.6177 15.1001 31.8082 12.8902 32.6666 10.5865 cv
32.8794 10.0123 32.8921 9.53956 32.6177 9.5542 cv
32.4205 9.56592 32.5748 9.85206 32.1412 10.2867 cv
29.5767 12.8521 25.2798 12.8482 21.983 14.3248 cv
19.8208 15.2955 13.4849 18.2769 14.9439 24.9273 cv
15.0132 25.2427 15.2017 26.3013 15.3951 26.3013 cv
15.6197 26.3013 15.6177 25.6724 15.6119 24.9087 cv
15.563 20.9488 20.2525 19.8443 21.7779 17.2574 cv
21.9605 16.9478 22.2759 16.5142 22.3511 16.7154 cv
22.3873 16.813 22.3638 16.9566 22.3023 17.232 cv
21.8248 19.358 19.6011 20.7222 20.231 22.2418 cv
21.0474 24.2144 23.4048 22.7437 24.1285 21.4761 cv
24.3228 21.1265 24.4312 20.9039 24.5611 20.9488 cv
24.6587 20.983 24.6548 21.3834 24.5943 21.7437 cv
24.2076 24.0318 23.6812 25.3169 22.0064 26.6187 cv
21.4712 27.0357 20.6285 27.1226 20.7388 27.4429 cv
20.7671 27.5259 21.1304 27.5171 21.4195 27.4878 cv
25.8785 27.2027 29.608 21.9449 30.5962 18.5103 cv
30.6998 18.2691 30.731 18.0416 30.6216 17.9566 cv
30.4869 17.8531 30.2916 18.0914 30.0923 18.2681 cv
29.5826 18.7154 28.8834 19.1822 28.2388 19.3843 cv
f
116.254 33.2491 mo
117.648 33.2491 118.218 32.4322 118.218 31.1822 cv
118.218 29.7178 117.359 29.0718 115.951 29.1133 cv
115.25 29.1133 li
115.25 33.2491 li
116.254 33.2491 li
cp
116.143 28.7007 mo
117.772 28.7007 118.699 29.5391 118.699 31.1822 cv
118.699 32.8238 117.772 33.6617 116.143 33.6617 cv
114.803 33.6617 li
114.803 28.7007 li
116.143 28.7007 li
f
121.949 31.6558 mo
121.901 30.9888 121.543 30.4878 120.829 30.4878 cv
120.155 30.4878 119.798 31.0508 119.743 31.6558 cv
121.949 31.6558 li
cp
119.73 32.0337 mo
119.743 32.7686 120.08 33.3873 120.925 33.3873 cv
121.413 33.3873 121.818 33.0372 121.921 32.5621 cv
122.354 32.5621 li
122.141 33.3873 121.626 33.7647 120.794 33.7647 cv
119.764 33.7647 119.283 32.8785 119.283 31.9371 cv
119.283 31.003 119.798 30.1099 120.822 30.1099 cv
121.976 30.1099 122.395 30.9551 122.395 32.0337 cv
119.73 32.0337 li
f
123.549 33.6607 mo
123.137 33.6607 li
123.137 28.6998 li
123.549 28.6998 li
123.549 33.6607 li
f
124.867 33.6607 mo
124.867 30.5899 li
124.172 30.5899 li
124.172 30.212 li
124.867 30.212 li
124.867 29.4766 li
124.867 28.8853 125.106 28.6172 125.698 28.6172 cv
125.829 28.6172 125.966 28.6661 126.089 28.6929 cv
126.089 29.0225 li
126.007 29.0093 125.918 28.9957 125.835 28.9957 cv
125.272 28.9957 125.259 29.2779 125.279 29.7715 cv
125.279 30.212 li
126.063 30.212 li
126.063 30.5899 li
125.279 30.5899 li
125.279 33.6607 li
124.867 33.6607 li
f
127.033 30.5899 mo
126.346 30.5899 li
126.346 30.212 li
127.033 30.212 li
127.033 29.4766 li
127.445 29.2979 li
127.445 30.212 li
128.229 30.212 li
128.229 30.5899 li
127.445 30.5899 li
127.445 32.899 li
127.438 33.2139 127.603 33.3863 127.919 33.3863 cv
128.043 33.3863 128.167 33.3794 128.277 33.3448 cv
128.277 33.7022 li
128.146 33.7369 127.995 33.7637 127.858 33.7637 cv
126.985 33.7637 127.033 33.2071 127.033 32.7398 cv
127.033 30.5899 li
f
115.25 35.7872 mo
115.25 38.9957 li
115.285 39.8965 115.8 40.439 116.617 40.439 cv
117.435 40.439 117.95 39.8965 117.984 38.9957 cv
117.984 35.7872 li
118.431 35.7872 li
118.431 39.0025 li
118.417 40.0674 117.819 40.8511 116.617 40.8511 cv
115.414 40.8511 114.817 40.0674 114.803 39.0025 cv
114.803 35.7872 li
115.25 35.7872 li
f
119.723 40.7481 mo
119.31 40.7481 li
119.31 38.0748 li
119.31 37.8077 119.289 37.5328 119.276 37.2994 cv
119.701 37.2994 li
119.723 37.8077 li
119.736 37.8213 li
119.977 37.3951 120.369 37.1963 120.815 37.1963 cv
121.941 37.1963 122.031 38.1924 122.031 38.5909 cv
122.031 40.7481 li
121.618 40.7481 li
121.618 38.522 li
121.618 37.9239 121.275 37.5738 120.711 37.5738 cv
120.031 37.5738 119.723 38.1441 119.723 38.7618 cv
119.723 40.7481 li
f
123.371 37.2994 mo
123.371 40.7481 li
122.958 40.7481 li
122.958 37.2994 li
123.371 37.2994 li
cp
123.405 36.3023 mo
122.923 36.3023 li
122.923 35.7872 li
123.405 35.7872 li
123.405 36.3023 li
f
124.477 37.2994 mo
125.665 40.1783 li
126.813 37.2994 li
127.267 37.2994 li
125.898 40.7481 li
125.432 40.7481 li
124.023 37.2994 li
124.477 37.2994 li
f
130.2 38.7418 mo
130.152 38.0748 129.794 37.5738 129.08 37.5738 cv
128.406 37.5738 128.049 38.1373 127.994 38.7418 cv
130.2 38.7418 li
cp
127.981 39.1197 mo
127.994 39.855 128.332 40.4732 129.177 40.4732 cv
129.664 40.4732 130.07 40.1231 130.172 39.6485 cv
130.604 39.6485 li
130.393 40.4732 129.877 40.8511 129.046 40.8511 cv
128.016 40.8511 127.534 39.9644 127.534 39.0235 cv
127.534 38.0889 128.049 37.1963 129.072 37.1963 cv
130.228 37.1963 130.646 38.0416 130.646 39.1197 cv
127.981 39.1197 li
f
131.835 40.7481 mo
131.423 40.7481 li
131.423 38.0748 li
131.43 37.8077 131.402 37.5328 131.388 37.2994 cv
131.814 37.2994 li
131.835 37.8077 li
131.849 37.8077 li
131.973 37.4566 132.282 37.2095 132.626 37.1963 cv
132.763 37.189 132.9 37.1963 133.038 37.2027 cv
133.038 37.6011 li
132.955 37.5943 132.866 37.5738 132.783 37.5738 cv
132.171 37.5738 131.849 38.0132 131.835 38.6729 cv
131.835 40.7481 li
f
134.721 37.1963 mo
135.374 37.1963 135.922 37.4219 135.979 38.1509 cv
135.532 38.1509 li
135.49 37.7178 135.105 37.5738 134.68 37.5738 cv
134.294 37.5738 133.903 37.7247 133.903 38.1304 cv
133.903 38.6392 134.569 38.5909 135.503 38.9205 cv
135.861 39.044 136.088 39.3536 136.088 39.7247 cv
136.088 40.501 135.366 40.8511 134.638 40.8511 cv
134.04 40.8511 133.353 40.5694 133.339 39.8067 cv
133.786 39.8067 li
133.82 40.3223 134.274 40.4732 134.741 40.4732 cv
135.181 40.4732 135.641 40.2676 135.641 39.7857 cv
135.641 39.2916 135.099 39.209 134.549 39.085 cv
134.006 38.9542 133.456 38.7969 133.456 38.1578 cv
133.456 37.4434 134.115 37.1963 134.721 37.1963 cv
f
137.298 37.2994 mo
137.298 40.7481 li
136.886 40.7481 li
136.886 37.2994 li
137.298 37.2994 li
cp
137.333 36.3023 mo
136.851 36.3023 li
136.851 35.7872 li
137.333 35.7872 li
137.333 36.3023 li
f
138.705 37.6768 mo
138.017 37.6768 li
138.017 37.2994 li
138.705 37.2994 li
138.705 36.5635 li
139.117 36.3848 li
139.117 37.2994 li
139.9 37.2994 li
139.9 37.6768 li
139.117 37.6768 li
139.117 39.9859 li
139.11 40.3008 139.274 40.4732 139.59 40.4732 cv
139.715 40.4732 139.839 40.4664 139.948 40.4322 cv
139.948 40.7891 li
139.817 40.8238 139.667 40.8511 139.529 40.8511 cv
138.656 40.8511 138.705 40.294 138.705 39.8272 cv
138.705 37.6768 li
f
140.903 37.2994 mo
142.064 40.1846 li
143.218 37.2994 li
143.665 37.2994 li
141.761 42.0669 li
141.308 42.0669 li
141.83 40.7481 li
140.401 37.2994 li
140.903 37.2994 li
f
147.546 37.5738 mo
146.714 37.5738 146.385 38.3848 146.385 39.0235 cv
146.385 39.6626 146.714 40.4732 147.546 40.4732 cv
148.377 40.4732 148.707 39.6626 148.707 39.0235 cv
148.707 38.3848 148.377 37.5738 147.546 37.5738 cv
cp
149.153 39.0235 mo
149.153 39.9302 148.645 40.8511 147.546 40.8511 cv
146.446 40.8511 145.938 39.9302 145.938 39.0235 cv
145.938 38.1163 146.446 37.1963 147.546 37.1963 cv
148.645 37.1963 149.153 38.1163 149.153 39.0235 cv
f
150.115 40.7481 mo
150.115 37.6768 li
149.421 37.6768 li
149.421 37.2994 li
150.115 37.2994 li
150.115 36.5635 li
150.115 35.9727 150.355 35.7042 150.946 35.7042 cv
151.077 35.7042 151.215 35.7535 151.337 35.7803 cv
151.337 36.1099 li
151.256 36.0967 151.167 36.0831 151.084 36.0831 cv
150.521 36.0831 150.507 36.3648 150.527 36.8584 cv
150.527 37.2994 li
151.311 37.2994 li
151.311 37.6768 li
150.527 37.6768 li
150.527 40.7481 li
150.115 40.7481 li
f
116.405 43.2862 mo
114.803 43.2862 li
114.803 42.8736 li
118.431 42.8736 li
118.431 43.2862 li
116.857 43.2862 li
116.857 47.8345 li
116.405 47.8345 li
116.405 43.2862 li
f
120.61 45.8287 mo
120.563 45.1617 120.205 44.6607 119.491 44.6607 cv
118.817 44.6607 118.459 45.2242 118.404 45.8287 cv
120.61 45.8287 li
cp
118.391 46.2066 mo
118.404 46.9419 118.742 47.5601 119.586 47.5601 cv
120.074 47.5601 120.48 47.21 120.583 46.7354 cv
121.015 46.7354 li
120.803 47.5601 120.288 47.9376 119.456 47.9376 cv
118.426 47.9376 117.944 47.0513 117.944 46.1104 cv
117.944 45.1758 118.459 44.2828 119.484 44.2828 cv
120.637 44.2828 121.057 45.128 121.057 46.2066 cv
118.391 46.2066 li
f
124.073 45.4439 mo
124.038 44.9146 123.702 44.6607 123.131 44.6607 cv
122.499 44.6607 122.107 45.3204 122.107 46.1041 cv
122.107 46.8936 122.499 47.5601 123.131 47.5601 cv
123.667 47.5601 124.038 47.23 124.073 46.7564 cv
124.519 46.7564 li
124.409 47.5464 123.956 47.9376 123.172 47.9376 cv
122.142 47.9376 121.661 47.0513 121.661 46.1104 cv
121.661 45.1758 122.176 44.2828 123.2 44.2828 cv
123.908 44.2828 124.485 44.709 124.519 45.4439 cv
124.073 45.4439 li
f
125.612 44.9083 mo
125.626 44.9083 li
125.866 44.482 126.258 44.2828 126.704 44.2828 cv
127.831 44.2828 127.92 45.2789 127.92 45.6778 cv
127.92 47.8345 li
127.507 47.8345 li
127.507 45.6084 li
127.507 45.0108 127.165 44.6607 126.601 44.6607 cv
125.92 44.6607 125.612 45.231 125.612 45.8487 cv
125.612 47.8345 li
125.2 47.8345 li
125.2 42.8736 li
125.612 42.8736 li
125.612 44.9083 li
f
129.15 47.8345 mo
128.738 47.8345 li
128.738 45.1617 li
128.738 44.8946 128.717 44.6192 128.703 44.3863 cv
129.129 44.3863 li
129.15 44.8946 li
129.164 44.9083 li
129.404 44.482 129.796 44.2828 130.242 44.2828 cv
131.369 44.2828 131.458 45.2789 131.458 45.6778 cv
131.458 47.8345 li
131.046 47.8345 li
131.046 45.6084 li
131.046 45.0108 130.703 44.6607 130.14 44.6607 cv
129.459 44.6607 129.15 45.231 129.15 45.8487 cv
129.15 47.8345 li
f
133.828 44.6607 mo
132.997 44.6607 132.667 45.4712 132.667 46.1104 cv
132.667 46.7496 132.997 47.5601 133.828 47.5601 cv
134.66 47.5601 134.989 46.7496 134.989 46.1104 cv
134.989 45.4712 134.66 44.6607 133.828 44.6607 cv
cp
135.436 46.1104 mo
135.436 47.0166 134.928 47.9376 133.828 47.9376 cv
132.729 47.9376 132.221 47.0166 132.221 46.1104 cv
132.221 45.2032 132.729 44.2828 133.828 44.2828 cv
134.928 44.2828 135.436 45.2032 135.436 46.1104 cv
f
136.554 47.8345 mo
136.142 47.8345 li
136.142 42.8736 li
136.554 42.8736 li
136.554 47.8345 li
f
138.884 44.6607 mo
138.052 44.6607 137.722 45.4712 137.722 46.1104 cv
137.722 46.7496 138.052 47.5601 138.884 47.5601 cv
139.715 47.5601 140.044 46.7496 140.044 46.1104 cv
140.044 45.4712 139.715 44.6607 138.884 44.6607 cv
cp
140.491 46.1104 mo
140.491 47.0166 139.983 47.9376 138.884 47.9376 cv
137.784 47.9376 137.276 47.0166 137.276 46.1104 cv
137.276 45.2032 137.784 44.2828 138.884 44.2828 cv
139.983 44.2828 140.491 45.2032 140.491 46.1104 cv
f
142.605 44.6607 mo
141.856 44.6607 141.54 45.4166 141.54 46.0489 cv
141.54 46.6802 141.863 47.4439 142.618 47.4439 cv
143.408 47.4439 143.711 46.7081 143.711 46.0342 cv
143.711 45.375 143.347 44.6607 142.605 44.6607 cv
cp
143.731 44.3863 mo
144.158 44.3863 li
144.144 44.6192 144.124 44.8946 144.124 45.1617 cv
144.124 47.23 li
144.124 47.9175 144.158 48.6387 143.395 48.9961 cv
143.12 49.127 142.935 49.1539 142.611 49.1539 cv
141.987 49.1539 141.245 48.9415 141.245 48.2261 cv
141.691 48.2261 li
141.74 48.6387 142.227 48.7759 142.667 48.7759 cv
143.203 48.7759 143.698 48.398 143.711 47.8218 cv
143.711 47.1753 li
143.698 47.1753 li
143.498 47.5811 143.024 47.8218 142.578 47.8218 cv
141.54 47.8218 141.094 47.0313 141.094 46.0826 cv
141.094 45.148 141.513 44.2828 142.563 44.2828 cv
143.065 44.2828 143.423 44.5235 143.698 44.921 cv
143.711 44.8946 li
143.731 44.3863 li
f
145.174 44.3863 mo
146.335 47.2715 li
147.49 44.3863 li
147.936 44.3863 li
146.033 49.1539 li
145.58 49.1539 li
146.102 47.8345 li
144.672 44.3863 li
145.174 44.3863 li
f
96.3882 47.8345 mo
96.3882 36.2837 li
99.4605 36.2837 li
99.4605 34.5318 li
96.3882 34.5318 li
96.3882 32.3834 li
96.3882 30.8453 97.1285 30.5816 98.5621 30.5816 cv
98.9839 30.5816 99.4097 30.6363 99.8335 30.6597 cv
99.8335 28.5689 li
99.2437 28.4351 98.6421 28.3033 98.0308 28.3033 cv
95.646 28.3033 93.8687 29.4986 93.8687 32.0455 cv
93.8687 34.5318 li
91.273 34.5318 li
91.273 36.2837 li
93.8687 36.2837 li
93.8687 47.8345 li
96.3882 47.8345 li
f
100.908 34.5318 mo
100.908 36.2837 li
103.188 36.2837 li
103.188 44.7613 li
103.188 46.5313 103.213 48.2315 106.954 48.2315 cv
107.536 48.2315 108.083 48.1768 108.677 48.0738 cv
108.677 46.1392 li
108.267 46.2378 107.749 46.2979 107.35 46.2979 cv
106.449 46.2979 105.708 45.8448 105.708 44.8941 cv
105.708 36.2837 li
108.782 36.2837 li
108.782 34.5318 li
105.708 34.5318 li
105.708 30.9009 li
103.188 31.6958 li
103.188 34.5337 li
100.908 34.5318 li
f
55.4874 30.9786 mo
59.4068 30.9786 li
63.8296 30.9786 65.6646 34.3155 65.6646 38.2691 cv
65.6646 42.2227 63.8296 45.5567 59.4068 45.5567 cv
55.4874 45.5567 li
55.4874 30.9786 li
cp
52.8326 47.8345 mo
59.4058 47.8345 li
67.5894 47.8345 68.4483 40.9083 68.4483 38.2691 cv
68.4483 35.6299 67.5894 28.7007 59.4058 28.7007 cv
52.8326 28.7007 li
52.8326 47.8345 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 11.0
%%AI8_CreatorVersion: 11.0.0
%%For: (Marc Vleugels) (Studio 3005)
%%Title: (TU_d_line_M2#rgb.eps)
%%CreationDate: 02-05-2008 15:49
%AI9_DataStream
%Gb!U'pNem4c7jQ^J9rDmFNF)@)Ej'*V"[3+&/&.pHggY,nQl$Slm\M16Qkj,c["*JIRu@;>F&hX9:f6:di#TpNHRJ6q+icg7H:Bd
%jV9Mm7:NNS`^R#uH*/E';&5geOAJ>F+>%Z*b-4l]%naN1V:P*J43^O(T8[C^.CZ'"jZ5LQ8+16<B'8(!9XA""Nl9A$nnXrHX;*e0
%<d>6V'-+m-=7YX!+5VS#nTP=(Cfd(CC97Ulf;aTXGhg=El7;]/Z8NO"MD-4baCJ*7O'+jNm=Zg%)Yq4e^T+.3rm@"OMd!gA+8!^.
%7]63t8k6Im[CXWRTLS&ob&Tf_`FtbX7.Q6T@(ZRT+mg"._2GUV<(ps4[,Vl]_8utF&is[6\&hYI=/5KXA@.St'>HRZ'I[hH]tn:?
%It.fn`$[B9f:oQ'-NmFMkjs^@Zdua+2[4BPksM$8E71`:RKeT?;J;AY0HC#2_ge3P+)PssmaZ(T=QWA"Lf?o7FbMWCSISlCnisOR
%4i1@2f"UG)&<u4f,U[g?\4&9(-M/^iF)mN.,rI/#A/I0RM:U<=\q(^lK`.8?W3C.c=NRmUUY]Z3j,sNZj#"?eqn5JL?=I;&NW):W
%PL,]sFn:*?0?ehuW3n'YjP/4$VhJXdeqmsGl.a!"btafnZ[O8t@(9X3U.YE64mbN#7N6?'S<>8RCT0=I8,L!FY^>%%kX8J"e]rLn
%>/ERPmB\_Kneo^ELAfH^<N";NNB/!qO(^3AYW#roNuS8U#5<%[oW,^4j^thrn!1MWNJ_*;50p?NK&.M.+=pHpB(nUj[!n$_o<L\R
%l%c,,Ok%"g)l#puVtJn\2Yo#;@g6EB5)pjqTpiB4[;U1Ts0N@g2Z@7h7sC9"I=TOPQBjf-m=3ZTSM!9!$W:kDUUT>k2lKs!m\A14
%!`^k.NBtfqkYA1:dQ`'R=mdKddus,1fKJU#LrW#(S;CV"kn=bfK7B=4q)=AhSU\,j+44V0jUk$]*]=8LX3o2@EiTu3LhpBU5`F==
%-=$0o@S/g6M=/Ld\;5Yj:^%_ZJukX':jA)P+A6r#`<iGW')B?mpd5^jkZp6d=^q$k+8Fk%Iea&l^S=^!,l7;[7B6F%]82PWWfbP(
%).jQ<MF9B(:\[Ln"=1571R9GcEYIM@NQe*g*XSaj&A`h6""dLsV2R:-g%-Hs:k\7=WdA>G)Z43DH&b(_q[0t2Ige#Qj8oO-DW#90
%fN`\uNl56_c+efIn?5:bWDW*^6iXk^.@u.N,_)mH</n?%:6u(H]H1AS:TN0'#''R=%4npp4;N;:J,ZWlF(dDWURR#mVW74)T<@^+
%1YqA^r@hp8#3@<W5!8uFmh#7q\^r7E2pnkps#2(jIiX=E9e'u4D(;0;B!k]U)f8hrb;9?uen_o/#DhRJH*lP$9<qnoTnlq4IsGHi
%:W\GJ^,$hTQ)/[([5.(Z3j#N7`XL/0s6_Y0F7:deH'%r*\EO#9pA\>ELND)R_iDLm!gl'RlR=!u3*O!SLpP8(pQ:?(KpN[GS]Z/Y
%3duPF:-47=rtjj1@fMd"0S(eMDr*#gM<(1Rs5W#:f/-mMfr4iK6N*%'>]tk88r^crr[[0m7/<I[-sGT>c&5c9q-V&)s7e(VZ*WEg
%bGOeO^M/)H)YMGH(?p>3_O/DkVtKLJFmqD7<`[`E^M@!Wo%mN_G6VFj(2Fuo)He%E_<>L.e+rI#R<J`4,t\qpdf7@1m-GG2N0%ZR
%%u)ndZqDM3I+4$\ON;ON=Dl`Gja&L^l?%ee([I5#9"eECf)&N#H<'jg+I]Jl#3GSKZS=.%ZQb$DZ3J[Njkeq/;smY\'g+p@o$O%C
%d#DmFn(#YXNc"Z2EJ?#8Jem-@YRq`,P!NJlgNS_Lp,6ut/j:BLb3aYe%-q*m#DR"nU]&44fLj=4],p@*]<r\BC^ljZhF<ujS>FoC
%dFiKc*=ee[jo1q(C]"]W(q%[t%.n)N4"%H8kEn1fa82:<'Q$+9nt61CY7]Z*AE3,:R.;7_Y)`$\A%Osse>eL:M])#Pg%g*`BcObc
%.0pk&U5\!ig(KQ7AtZe&Gh&U;[G+6^YUqdQI2Ah^mXH0d<_SBnb>m:;8KUFN_a2>;T"4h?Zba08LP9c0[#=sb<Z(n\]U,,LG/_)E
%N`Ua?bso;\*Pbthf<RX)FhZ,6cNc;01`K_.8IX>N#PLM*a>W1?Y.<j[s/Pb'(`;Z;PMI[605Jgbnc0H1fVt+)\6+1MgeUUJD1Ql<
%hI2F]aZdGU\/C<A5(^2AFF)J@eVd7Go<^<@jKZsYS$jHqlrAE2"H<Pp/U1'tEkC-F=N%"Oj(W$:[VmrBi>?LN@Cn:l#q/Um82\ng
%@UK+12rV!&4hX48::E8(e"Aq.LJ#T9(L7K3(IpFJ["7BEPd*`=A[Jg'$^#R\/O?[(AXpgF[-Y>-Wj7+Aa+!_fq(>tIdAmb:5d!-%
%0k0"qoWqf)okL9!C\#!cbCbq:J9D#-!ufjiKlWj4C'MFrm91MeahL;hp>3SJBM:)[n_1`mc/;>\g4MeCptd)I0l0a)G'b;O947R8
%)/[q+o>r[FI*#Z4I4&4[hKQa+nWBL<F6MaLgH>nkHI1o2DVG:-hW<jF)M<F9<S^c4B[1!+U:#\tLpdep]k`[GM95BrmYt[nCtE0W
%+icG,Jn<\MIrr\iggasUhh4\ABTj"g^^4(X+/kJC5LNmUPK$t#pH`<9oL+PK#SL/0d:eQo@b@oGVl!tX3:qu5X%KRa(k@H]RWs9C
%#i"u%Q+"4@KtoV&B#WEqR_Mt"c-":7ia3k`)3g+2S=WPgeQ;NTlV=X$p)3$n4eYE(3i_T1BUX$)rPiNJ_cF#@h9SjbIgioe61$_H
%#,\_dl*/i6=;KONB"X+@C[02_B/!d6@7si"q=>Wrjqr.?>J)m!X`E$q14rbo=d8gUV%??_UH.1GpMPXm7l@C!qMffJ*4`];?@qrc
%,6Ss"oEdjd?Q1:A8[Eo%CW8im7W`5MQ'J]j@-(faHegMU"0VB`<m\"#3KFXj+_thEoA(X7HU^T*$$;>#27@U[Qk8r<9l1W=8O?6P
%Q;Y$V08H*ons+jSUe7sg7Q27S"7ugmUK+d-%@3@5bS\`B(Yg/j_>W'Z4$rGD`>qe@3?jM/LSsN6pOPn]nf%UoEjJ4T.,4@MZ6DZ'
%O-DOA7r9>bN7/NK7rbd(@*FZ"JW\UNf<D_jn:\&Xs1?Y^RG%Q\-g/iMJ5'DFS_m<-*Ric1g"?BJBTt/U7aG='Z6N%QZmh`UNnKV`
%77T[Y,6KgC>Pl*S("EG4MhZ,$g_8uo)P5ToTj`^M:tWTLh$>61ffiACS'.I$")X@C+@F]c10h%LL+n0#lsW;hLM)6Lm>`3QLc3s4
%Z@TU?0/=6mj_qN@S,GVSIY\;0T=,uY@cW'gN:VRJ_S5GZ%MdL#g`1i"Q6p>u:=NI7W&5[0pXmKFI\l^uZ)o9Y+meF(>rU<D-7(M%
%?Y?T]I.V/<6]@-GMkBK=8aIDH>.\^lUrT/>)STu/*_7GX1Xa:hGBGaO3Za'2@B9V?0t&fFp/-FcDCboF0Wgi^bJ?Mi%MgDN?st5h
%(+/$K@1j%c*#q)TB:FHP?Or]Em,D;'_2j"U!p15&bWD74"ZQ&L\S7)d+dlDN1@M`m'/2']`4SS8cWKVs_fIIq&bki0EA'Ngp[XMe
%0CRh*?;!h`jD.s]qR:`P#9g0^ij^p0N'*-pq+2EkG;8Z%cK*f?4Bc"\Tc'8jKTZ(%(mtb@A1V=3bJd_20'4M?@W!ABjsK(sDA"Sa
%**fT9$!EC=,<:e`-fea^bJhWV5pkN!cGdbtfogDtn^u,SE\TKZ(NV,DO"c#4SY=`ZoS="3hbgJELcURVg]k2mRGoch^b0:t"aV-M
%ZcFK1=U5r5l-&GPTdJrqh^[49`7B-tpgU8<H8hHX5,ruE<mQJAl6l2/,41r7mAdW>=5Bl&@r:f"emZ>b;0XT$QO@m#O.6Td^3B1_
%aU-4CSA)K_>c!V>B3fdZ=q?bJG5SJh+e?Go>Q+3Un9QD:I]rL*GBSI>l/UOr6Edk&DXTN&^>:Ya-g0ad7[nnag>d+Ygd6.NcXdWY
%Sk3#L]0"i9e/&qIfCqH6,!dIe$\?G'M!VdP2nGnWWFNWVWuZ$6-46:Kkp@%dpRWG9gdC'"Wj%]DWVGGYgKgf01X2B*V7+.bSdK7+
%B:Hm@Q1RuBUV"[d-kAal0"]g`DfC;kT$MeU?</iSLQ<W1lFD/=Aa>uAoa/`YcCdDr]U[Hce(e[6.b@KgA*(GJQO:"cb"I2s0.o\&
%9L"r'CoslUg/l.KI_VhOf@JLb]eaC"4F+?KF.n!TT)*R]+Vo3/I<U0Y8a6]^';4?EQItP>qr7"o_?^"L]#n$>mW/RjDk0iQf'@2G
%+*u7;V)+-mIjOJ.1Bu[uT;9*FieHopch5LJi1Pts[5g_]NPo)>ih5bRQd,2-s$9F:WsdP8B$kPDrkaSVnJa:t_dO(!cdh`KhctN$
%/ah3!.VC,XKD(%<ad'9dp=u.pTNm'&gEqR4Y&qui=]j1^54j@kn"7,,<T`(\VXoLZ13V5.\SqubUQApY(HTM8!\4Z%7n)[\J'b=s
%Fml:R*9!PphDLk='k?fB3>-sQiu=Ri9ePiPK9hgi?)oG\WV]CF.)2'scT;A[mQKI??ap;o]l+=KI$Ln9ohF=0?fG.bJV0tl+.(1M
%K5T#;pA2o(54Fs.>YF@?ahOE5qocVGI))EGkN[)b[dP+K7PS'1H$t%?jdrN`Wb$J77i@on%E]EGcSGTS.LRt6PP9mopR/((s2l';
%=',BRmP!uZ'l0Gn^4YjGCH&C^aXECh#>=Tt`$ZQ^s7BT9&9rZ3^RX$Aj.P.u5n@:+o$:L+K0d&XHdLd2kqhZu3p_9B`AL^s:*^nY
%#F->c>d8FSq@@m35LbSb(!RdV&n?YZCXrss#<bi[F>j7*I9bqfMa'T/6''!O8?>oAm*5@Op$/c$(c^a@M/r8)1h_o]iEgVQ:m_VH
%Cb`YC<IJ0-nf@AbAZ$V0kfl`e[2UqNX?LhIhokf@[?t=99kh;Bn":11="f,WIa)471\RKWA*gEq$MReS>PB63oXaR`N1Fk]%f5a:
%pDQ#),hAs^XjdI8qK0Tfjbl/!5mu<Br8$</cu79;mkhad%/MT.(3<*EK6;So0@E/0o7MIh<(ck=@[=ntG<LSMmB$5ujR5u#W3YY+
%'I]:6gi"%IId:dP6";!to2Lt_R="q[.3:+Or9<6*%_CiRWMf:*[^]=h6+?Y\bY@#Cr[U8>h-8!>\4#:rF^<iKK8PT/m'0Kef%,&P
%dmkB7m2@eoK41%tr6G8W!=YG0?%^E/RBo\!d,]Jh2:JbS:B$^m\p%F23lqbQbL^B^kZ$L$K==aEI4bq3F$d22:7cg)%[Z=rC9-\#
%<!'+=G?:rXShcJD#OHEX#^H6\`9"JSo(8p%(3nKjMCDCF:VGcd!@0m2]\&F"Su9,.oiMNHRcR<,DRH.8H1%bSG[XFmkP6WPRJe00
%]`#@V?/@-V"[,S!=/hAuf2J/JO"toBpQP)rH[Ce=%Hg^NWE2t<E&ZBi47oM!Rn8Z20Zm*Q^)-FSaPAK6l(FrPgoZac#!FPX%h%[/
%8MT]*0CJZ(@4gF)-^B&XqUc("WcKiF>GCG_9sLT1pStmk!H5aHpr(mk*:U>J_Wu-W8\if!OHt9+l(ns`r/s9.T0E[->3YOSha/RG
%Bm#]Us#OHnU6tl,^=q9^4SZZCoLj8KX%0)KWNa%IEo;>6SkC'!G3MpunlZY?#0j\ql0+%NSrKpZbf9%.`%m=IPEY@2EctC6c9EU?
%.c%8[meEr6YkZ2Sp*p61Ei%::ebKb&keYPEm[MO72NM`s$albQgtqnhPnour)T$FiV:=X83=?nch,C$4FpfCVikb?.I=*]UXW0tV
%E#-s?gM:N.YU8]DF9^a[]Tu3\(JaN?c_m6MAODi_&,9`3-22DE'/r^IC+<W$#-4@s+.=DA]+kmj+5;>uX`fcag<D;(mEca^C^Fu]
%W#hecVpXn5\OcH<Hb=h6g$U<U>jbrcp@oDL/lebpf,'n?X)tth*Q\r8)Xb=7,7*3P?eXdGRD5(`ndh"XO3P\iq^Q"m_d!,A?!(hX
%GV%\H\R&S!?-qbgjdjh;Y-sWTr8sWjet]3r(KuOZa-#Mj,kiIDMo<E#h@W)I`t`^ae4)(k3Uj4*>/H1*\Oar"b0OL02dbcA@?B7$
%Ge7B8V-rq]CFe]538/5q,m'2r*b3PI/r)]qf>$15$\@)<l8a<)H[JJgF=6gg86YR'f6j)/?m3)>i3?^U6"K0Er@n6m:EdmHgWl3Z
%p7OkpB(]`fC7@&J?r4(fk<]SL='p!l<W67_O'X>7?eQVbT@mQ6PZ%AQDKPq4DL<8+WPe%L\Ld'r7f>=!X;"\Fn*UJ*PiCFJC%Z$i
%!QNm6FsNCP<"HRNj5Zbjq7NNilMGd.@<mnqjEOu08r9MPFL2gL%Fb'/WuBXYk*H+db;Gg],C.nF$"8:kVD11sm:pA2AH1qo>ith*
%;a$JW\DFHBJB>9,ruJ2=A;@+heFmd(JW`Pab+'-O)=Y3iJVI9aOaed6_J/,Y(^3Dl2j]1kj"\TXA\JM3Be6AGV@ea>s5:tH_ZOtu
%G>7-r5EXSOdITf0]XW@ILE+<uguq=FA'lh!6Qh/"Pos<L0dfY(Dn\@MLLI+(*L-#538F\gFNL[B-7gce*>`@s)OL%REX%S!ZPm)N
%r-E3rUqPh88fcZukp*OTE%^V^s&h\k/=V%a.4'u!#`b_VC#ruU\$XZDWlsN%jO9*uNu-"HDf(S%Q,*fGfTuGE2+J\49W+N9r2f!h
%oH00k[q'6.b@/V_aO1H4S0O0QqsFmGRJYq*mp-',+s_SpG+f6+'ghm&N.ft/>MM%<U_9P?GABgXl?fa'b<KRo1mYbCH7=rqB_)I-
%q'FAMTDSM\"LH3L[8LIJ\%B6-oi_5UY5YnZkZk6kcWZ;Dn4\l[=?1Qt(VKT!F7i=Ns4+lFcb%edlb6nXenQX#IU!"R9\d7j3gg;n
%p.MN,CUq#EjC,jR2S*5&A>&"Kr$.?pgVP+1Z6YAB.??Od%@mKqf,d4,&dq1/2RqVNN!N&j>]'^C9ZT?[8#%NAU05-t@.l8H`#TVM
%A,"P)_7R0=?i1d'Qgcc9>Sq<Y74`jp=]\(RqnYEZ%l;77<m=MtaN<M-`(*:_k>1kmql[9>j!P_7KJq+,#Yu.b-f3[fa[hGr-[s!/
%gb=*^[iOWAX#nKmNbMdAlhmi;-gCbnGA<,MO2anCZr.DXjd<UF,OGg_HX(19&F?LG<YdN@*-c^E[,j3Sa-U2G%BR;$o_:Td_GVKi
%B=(bPf2hXZgY&FV_mgN.Fn+ahC"MHnERsI(%X&qC\Loi20I@6K6BS2Y9CX';rj)6%l\2ZL7u/Sj/BM"3Y1EWeSU)59[e5&-PV4p$
%.6Wh)8SOd0q@GFc.Do;mA6hODHQ_E?2Y$Q8;PH;iX9`%<5Xd)3mU!aiQfOd[GXY_!n=$V5^(D:W?=O*"!_[QaB9rk`a^Me$(VZrB
%\bhumS"Gg3n-a]fh#/dYVc]VhCf>-OkBSo'p6+SdZ_5rd,2@XPrMcHhEOE"(bsWuUqoFTCKJ$RR8fu5@G@^BEVireQV+<.";TY2Z
%8PilTC*/ppYhL8#LOB5#n)>gDn3e+Qbc2_"7UkWJKcODkDE`L%SEgp\g;PBpkh\pLn-^V6*io/$rBkZApEue/JCb)S"QOWnhWr,D
%Z,h3\D#]l#=Nu%LhTYM4ZE<>hB>R;?YD/#V;J\\Y13,6m""G+Xr+T^R"`e:,G9]6E5CI[ehfL+%f(V*H["CV:l0H\LLc,\C9l#-^
%/O"c:EZbC^IL3hF5.3tr*b]nVMgBU2M=gf($#^i<#ba[RKK>-j%\YVTDaodO6+#O(d.[7pA^Vh:$P>cG'gc[VKa=B+UtCnT2!S0%
%jGntG6*s5C<C_LB(tN9h\/mqMOq8Q.0>U0s6*s5#:.Kd!8,UN\OcS6.aBAN43,7F!DN."OEURY(,=dQPR.h/sHgGl#"(P9iUA*[(
%p%j9\j87(V--p(r,@%*/(=pfa*g]76Wf9P,?'c\9Ef=53(i$2HO-]o":S?@clAR,LkLIKLEQ^)K%:n5mNVeAf/5"K-Jr.uNN^=;R
%Vk:3iAK78\*h3%u=?.pI`sTi9d%'22nI@[dHKbW<kU</Qg:38"8%!TG\fUQ!-Vt<c3HfU,j(#,@XD+s^hRXQiVZV\6GAebNr^F,P
%NQ$r&RsjjfA=Lis(%R)8Q:HA.?cXUbheLdq*#ZGHE>_h@VrPPTZ'f<5ZbQ5@GV&47#BY=G%Q'Z;@UCugLrPK&T`^`;T'NnCnCY5Q
%Va,_50jG)01*bWs"%4L'1$G]X"GTAL6pOiVK,Q&_fCD[5_UQ!>8X&V?LkNs#!&ZcrH=J-E=hi0'5NW=mg-btWL\<89P:+H05n$ES
%o-G>Cp1.^8I(JS?o!mTEM]ku&CK$-*P;`oN-cA%9\G;9.j@o2=s*K0_1Og4%D/G:@XZ-fNa32_C+udQ6nq9O[n8V`qMJMpj0o]J/
%1)$*9EG&7piU2GR.GaOThe5a"gCrS<c@8+bGc"UHLncqnSTEg1;>_`n2?KG:ag,fG2fbL"fCAJ(b>:XIpf.Z^h]e69iJ`"tA+[m>
%_rD^)aj;(V5&7sEN&kgKC:QIA^DE]3DaUJb8[:Cn<W&[sp?J"8r1,oD@k+kpX"Qr^`&8r@bN8Qo"[<DYVkR[hoBBn.[EP.A4-;Rl
%hU4?.j/+Vj#RSdpZs&L._J_Ve55n3_m)NVmI'+pKnh%t:o]1)<8hDDl2MbOs`-h-dZ@M!.jK;XY=sbW0T(>=9J69+$TL57SALiB(
%kZU280?KWaB^b@S$(>,hS0Lh1pKr8'f)*Q(cgf@-nLAac6Imf$C'mc7c4pNijbX5jc6oU5QZFA%P)NJ+ad'fs^$hTVC/q&6+0rT*
%NJdSGpHq@I,,#,4Gi8)G<)WHq(l9SMmQQ8/`UKk&cM6&jXM]p=qG4'6iUL?qqpAh@Vg\r7;@Uei=sF:,A'X2m*.:Ej,"7@8/e[d#
%iu,s#j7iP$\2\tO[:R;:E0T?^rdD-$9"->@:0MNF:M^upY[JplK'phIoleYFpR=,'=)unp6!m=!'WuUPGu?V-\CsmMae`@TL\u;s
%?sFkE8Q<"Kbi\FVTRHl^aX,HuIUR-]1;6M!17qnAl'5IoCP`:Vlb>%5.bWNB/ogSf67UiR!c.b82tr\RWY__%T$=)b2ng(/YOd*B
%7:mgrlgqBQ[9CBuq[5@WV(h;&(HYo(44*jg/]kt4+aRDN(@('+g4:4oE,/m.j9cdd/6'6^N-f+8\T!7`e&sF.mOp\-LRZKdIdc-.
%),r,e*T4%o:ZDh.IB/<d'.^M?p,mJ+F*D"8n+p)VH@-=3r4/-)?0g5?0S)+8pL.gDqt#M&(Pl<A`id>Q_8TOKP_Icak0<dJjN<M*
%qI&sh\RZ!"p%n?VL!dt1N&'Up"m((.dVa`5h;K!!*7cN.@Ne@=Bjl,WU"]?3@C13d:h->5fQq?hHb=:\/F9$G20s39qAj'4$bORQ
%;X3E)C.N>0m/t&J?1*=La30PcUssS#Y[G6^[h\)2lC32A_qo?'2.UiDB8l-hi+P+:GGioCpF:^J2!Sc60c)I7+'9Z,W\\an=[oq8
%3p"VlCIT"(>N$:#P^\CZ"1bM&`\-<rVJ4@[%Dh7^:#L5lmk_3V:QHQ`COB-$JAXfr83A7IUFUCT:Y0@qqWD(;>n-6/MJmd_cMLcj
%9[PUUJt.Sk>ks[foc:%fAM%`?11B>Wq3I]\kaQ,Oc*p(RL*NASBKJm6f;P_<;"Z4]#\`Al3s%]%KAG>`M>!)CQ_392EBn)`rol+I
%9PI1+mi^DbB]oH@I=*Zo$h@oaNXb47-Vl9$UtClL@!H.<FidS6IedR.n[QNC81Z;i1HKg-]3NWqkiC/Zj!0GVU2))rj,.k3LZDNF
%geh]>jaq:B#3M##PE@#L;'M\E;P;'3G;34PaGo'p+&(<k[kh$CRD`NeT<WYoTjl50B51Kn:5BL,^I[=mesiW#FL7:-(#8aB4kcH\
%/<b0m@<sl^A6#`!*eS@rECEC8pDD2aFRB4gfmqecjdhiY$0,RaKl^PlKitU;X,:m$lf)Q_::Di!D?BBi>*#[b%V<,(&5eRW<NeMC
%iF^MQjflJO"Jd#?cGW,Q-Ro!(A\j,9k6afF8QV=IPk=%mXU'X)h0h=L&_7I>GKf;sV6;(rTrMP(l`s63Im+_9c$?W$K"SP>or;GA
%8<R[tJW6r4"?fNH4HDJ*"H!Z*g`\AC@S=&%fP&[maAa$]FrX7>GYrMWaGA?!5&qc<b^n]NlIlek$<JRb`amg.+r,"a48nK\]5A+q
%j@4A=1?29GpJu=J81`tnS&:?>gc1jDs11L$Q^,5(mgMLGi$)=m'b.l9K7uT%OW.qt=MieAqd\p#<q;r-Dig1McFQ%.EO1/,)MjnZ
%($APsiN37Q^P0\LTg:'T?\ai#d*RLb<O<b6EY,-Wm$7+<V=`RCr66!!5sX!$)0,7YBEF2)Tgct@N*g_iUAg\mYWZ/[INc(*7s`.n
%jEsLbH$.6=mDOMIq;]HIPcWN&_T/5u%Xt#`H0!]6^TN"eMFf>)U"IaHFPb!X8naC>pZq*<G9q?-#]6kPl_@gAd(HiY+AuXK1IIsQ
%_<1Sk-HNV)I37G>go%3MM`lL+P0e45:Z9WH]#T7@hsZG9_rXZ_@Nk]_j(YY_n6,_Nq8t7OL:bKL\7&QuKr`:RKIK!SqC2VoRW(Ba
%@K_:G:E!`Ybq7u>1gr*cQ2Eq)@,9kr>_V)rYsR&Z3QOP-!nEPibO+#nJ`k*V<B;aP3G]FJ4IdB!T3#94q;i=rhV0j#9XHoG*AH8c
%^f[0kMg?R0)(E>'c:%2ciaq">6f5N*7Mdpe:;2DamY2pnhHi/<\!>h4Xai4T^8+96j,`_S6]J2q,%!eFW[GA%MCqS^<VRL=W_;#2
%fIE@EWPV^MM+m("_8+jZX"Y@bH8/t,6YYdh_1'i>XC*CZWhBQZl*qTKh*K^)=n2lSWR[JH-\l3pYbCX"CR;jnd^'4!JN?guHZ"f?
%eZDPKf=)MB-_'@YOlc:+3.E5PY^"i8oo-J?@,1[g6J$:=d4a+X3V,1SCsmsrnT#;aB$8H7;k@?&V>enMpF.f$=9$#3bJ]sERSkIm
%b)@bJY0M:SrX0JJhh:OL_IaA[N\e3]$HXX>k$C#F]KFJr$(5pg]J6jd.X6EDO%bFjB6#pFWV#&;*KPnQb7Va\)6&p?_O`X[ok3f^
%Y?HDO$!,5OTGgi_LWSi".b0H=f#9WIo(4_J[<ubjj[a4a9,U;IoLQA0qCXWN>KqT8oWR[\,Ki4h[7lIE/[[]@KS1$mHd4<n(bHB+
%epBHcbjsE1eM<;IW9)Ep_nT3p6^Lu"Xo>BINW2qUjl?b-?GD0jL^6pUl17a[YEos/o$_'+]@lLuB_NB"2`@2_^C.7>_pj+Kp*-c`
%.mHOj/Gk,e7XF%p45MoqBdDk06<8Mqh>8Gg>g7N!mtCqu6p*0gkP*ec^o1Urmj;EWl]g!9ptPr^7`9sKk@:\G!'(7:$$?PNporb)
%J$ui4!JX3[rA*NP!b8e0kEgXC?%MJ$^RsH@`mNBQ]_@8.4XP2,WS5KA2FGFY_lG@n12t,+dm@5d:=XB?XhD>GZMV;pg(\'M,<e`%
%IQW(X\VJ&HASQ:J.HYt140O)TWo!!QXXj+#Wa26r2UD,1r1RlWB<&(MW7cWug=;3[D"\sNG($66r*4^DU$C$HRFR(m?(\+)4MKKt
%W7k7m)i=O8LT4XPW<R_900WA&67roJP7L[*OMfWKK+Cto5#^jI8"SOlWn3e!b-Wp8jr^UHIAV>=Y@E@c:po34Z"O*1C=dG6F*#MU
%5?.#hR`]46`MWQ0Fbhj_P&WGX%omtjBJ<.\E/;pYcM5]^?[Sg+Q+kT4ar,Z,g7Bo'd*/_Kf5l0L-JrjD%orMg>L*48ec,B1Tg)Ks
%^1<WpcjlUb3SB1f6f_HHrLrM\ouLQ+<#q-Pj=I:m5%5"-khoP!ku4*hbN*#sB87n\rr(FdXRb]hmV',CnWDqd^W7Ao7<s'4ip<Wm
%ed\,,1?O&b0]gt2:IV04cONgB4n7p:hX^#QnIm6N@>aXB&B3?%<G<,3B8>-Q,HB1(Gg!4g?`#6tp1a\*EOKfB`M?RcN\/O'&n\`G
%lk%.h,AXBtf7f56cAo-"rN87E5[gtsNVfGl3#cu[L:.lpFa8.dibX)`Atnk_&B3>;=dO(LR@Rko6Bl+Y\1YNIcONgB4i8q$O!r:s
%hV7Y&o'?p`A53ee>FljeP\qH&(Zj<nMR,ZNf1p:'RU:%mqI3BhB87n\*lhb6b-OGH,;O[m[Q2)7`S$hTi>LKhAf#)U:U)V2\.(m3
%M-Y&/Kl5He:/RT'U,[KnF`!N:ljtQKeg?&'cONgB4_\L+.&/i5387s7LV$P'B3LOk_TpZ:`^^kidsjG@1-m@)W,H>GQC[m%=?4*e
%4bGe"T1o,r'RfJ[ZdFMqr;4&K^Rac6:(Nk6\8Q#@.3#b]?3@p54\gQ^qf[.mgDe/_;31Tt[dRLmU["d*PWE<gNGa,,HSu!0HYhcp
%Z[YD/:K27;S:@n3'XhIuFC*k+.`TA;%Sp:`mT1i"qhjn]I$H-K`HYLB9ij'pgid`1G89/QXlc"P@XMElrG66"%',H=N;m2&3.;%H
%HW3#kMXa5R<hEY=Q$N1`S&'PN0g>.LP*o=/:QTKT7E,$)?ceh4@bgA>s%UK-e<T\_Xg=Ct@XM/Ckj0e=_rQhQ?SQH>0iBh,G89.J
%=+;P3j,mHRrB"<(\>(\@cRQr4W_3\)0g>:XMO@G&1H`,BG89-]G\dR!j7I]X=#9kg]sD0qqJXr?W>N*]9E,@ffi3nl@nM5N1%($_
%r'eT7X30Rc.`Oi%(/n7m:\oe#hc5X4eL&MS@XS%,k/1/WLXn+W<K)9Lbbm;B'a+8#`Ai=/D9TJ9B2C<(M0V<X3;\U'd!'Y-<AFI\
%s5b%3j##='.+W$10oiY(B$L,.<K'`Q:#Xu/N;I8Cc+7A3G!%\J0\,:TrDCPDcYZj8:bg8F=G9Yr^T/4GdkA&2(oK=Vrq>ckYSH35
%\4c3*(#sjh6d;uI*5>u@jTTfN.`U:Obk[`cEIT%![9?%fCt=RF?,_'8(I2S:0og<0CW?CW@Q_m/?DjtDs,Gm-]OH8IhOdZa\:*DR
%C[^^A`^>(3;c\iIQmMR?MK'8)*rh)o.4`CcqL[\0/&o8D@0OHJ.`S%RpA@q0GW:b&g59n=(YSe^@XRh8VR*9>-T*,<c1hFS1L\7I
%i81)'`V;',Ams)$7)er^e`##.``g_[m-gslm<4WEhc5H84)9*@W&f>(>\6hRm[D<@<JMLpTJ&.<;Ym`bE4_PT4MF%\%_%RqdF#_.
%%_$5ka&^be;'#(+=[2fKE;%N8n#F:m1@7X!n#F:m6&j%`5H,.%CVuS;?tWddDX##SLc^BA>oc,g9A_P,%_$5k6e!@\\iP5MHK;<\
%iSj(@VQC@&er0JqFa/]q(s\d8S3;5t]BX@I[+QgM0sg.a]/KRg);QI:_aA'Y:K8G'cKP7sl>V5+C"ChnFr'=u3X^R`^TS,+anq7A
%Y@RW4FncZK#np9n]6r[(WXcM)M>EKe;]S%:`BmX]gJM2;I"1;/iHB)5Cq_8\/cladHfC5jLYMfG+N7qh*H(=PZMK&M*H(=Pn'*Gj
%Wt)US_^"SfHHr`Ugtm0Ic,e,0_ekG'q.f`LWl&](iVh'Cm&ItjY,iK,+&n$MrV>9E332=`]0AO+@TM%<r\i!%X2BFn/sB@lO'@t(
%</7gGnorXCj/Qp-;]Y;M;Z!N[E1<)C<LbkD%X6Y]Io@@OoD:.dUW]$q?^%sr4siR)Yko)Uk]>\Vq;)Zia:3/M#.qdW%YAsj^HW+U
%%jpr9rJdcYPVA\-;a4=:TK^AbnFAJX=!%.%Er&Zb>`Qd20=4M9Nagrm=r<-VqG-J^eaL-K5R6/2eN"*g5;PG*8j6)U5\e/Sr!&p,
%R-@Q,'!U+$U!b/lV&jU*KuNALS@O`Xlb5:W6&8b#-M#VW7I#4H^s`6Dr6=mNUV=V#Fsf4Do?Cg4?j[d*$SH<<\=I+/-sUH)oK7r?
%h2nj,7mBZ2lS+jr'lpm<ojs2N1t<DDK8_F,AUVX<T'$=:mR&k/)]<jdaE.A[R(DjWWI$f#$P,r*$#nA<AA0fT`CJs0K@-Z,Ok?HK
%jO9=fi:\N,g+i>eN;CQ@*e2ZM15Ls<$mNGg=3)6F*e3OeQt#'.>]MUJ3gsok..fIA0,fY)8Ubq#Q!?SZl&/mXMTmJD'PjU0>PNF"
%8-P5AQ@J<L6HMH1*0H[]?9Fqb![)S:ca_<6OOEfp&<jShB7aU%]AVlcf'nEp8ITf"E?(]Z2%kdjp9+3F0u<?<:.((WR#Mk6b1JlN
%]5d[KV9e0p<Pq]ck.(n8'#qBKlg#Tfo3FR.9('@s'`20-r^9bdSm.\S854N-KDQ&CiThih1Kf.L1J4b]G=7PPfMKUqiQ<s4IS%cC
%6jF+;K/B`(NeK+4\=BK[,;QtuUXTY@V;9P2Q``O'Ff3*HLP.+pp//Ff&X'C@n"-I?"0M)*FmG_bkrc[pSO?"\n>0EcC46"/:O)8"
%H^s$:#b/lS-BHcmC+I,%7T>^tK$1[Wgn(a!/<2Zt1;e*j4m&%d`)0'!e>&YWA:-,[A!l^QNpP/s#c:,S&p0Fo`O7SEA?]r6k^SBe
%$MCod@W.6`n(nR^S*H2*2<%ArnQ-3*:Qs)^]N(a,*NEis<$=.=Eh24PHr@?ncK^7>W`u+(2V$/-Qol(+o8P,`k:"At/f#W9_*p8c
%giO@TYu/#&>aNm;`$A5!bJkNLmt%+h&8(r+b]aC<+fp!k.6_eXI])dEciNk5VC0\b1,6EPSTcfkWdAiif`^2&c9LE>CM^Lu2C@36
%P8#=E>.:4:j1d!*mRuseA';*no2mVE>%*L?j1ZCioGHj[iCRq!Mo8FH%n<P[Vk9s=ZEl$?T+>^CN3+LOW9%Cn'4*8Ort^@X]fgp]
%q=^.ifgipKo:F-#InM[u/[K);^Y4';[6@VCLPh2?0:bn4Q<=S2ldisWg#Iq^lMY&;P\M*%f12fO9!L(HJ:;5NlU+Q9CAH.Ub@@>Z
%8@AB\P:6%70=.n,OB`YB/ouHM3a;jcH^G1L-IM_4Q*:;T0R=fpr*Bf(D],GC3[fUU92GJn(]O?KmtQ!5m1Nn2+^lj%*IAl,QmUja
%YYdWkL,\m2Q>@b0AfDW\F3MW"b!jCQj:E+[guGP!R-;04j"kYZ0\e%Wk]`pskcj&pfW_*L?cId7hts+bME^%NBCBIHl>0q[k$l)[
%^J/KSeeG)e+(8KFOfJf=(@_=U3'Y;@ObjRb8u%P^mN)F*YSfI0k#>Q[^C*mWFZK?T@i4ZWgit_n=#h)G(S+Mcdo;B4gZr,4`Mis$
%(H4VJ(KU!O/,OtNDS*,YW:H05&,VoY_HV#i]Y;#,[2^WmmXE>k9suc:eb1iV0fYT\\>s.L\`:o'=EkUqg;a%?l)!0*GEks2*=[a@
%Qr-t31s@8k5.>l%U&R+XQM;$t_p_'+anp'el_D!t05Th7KjJ[faR!4thlk8Cg8[!=SE(#uCRrZ?3?`ZnZG+j_Amg)$eGAk.k;&Ag
%m>>.7c_n:ioCE!l^G3CZMJD:9.m?-r\<F=LK"KfAQ=9G>?hZ>2p"+PU]30$$E]6GdLV)dl/TS=ImlBh3m/*/s*[L0`f>Dj&HX"+<
%EGsSbX1dA(I(@j)5:aErBBcWZ9F`-@$f0#s67hC`\T4fo8a;;uf'49[q0/+c\Wc>Q9Meg5bI,d8c,8*"@_9*P=;%F]e)e'^Uc*^F
%</Iec'hZZ]kM%it.6Em1g3heq!qNDbS^$p]p8t4#SmRqsUQlRAE.?0pDq*BF^OEP?SF!e,@EZ:%7pNR.oh^%de!9O-9>$U3Q"7Fo
%YIrsioIbamp$M-kd[/+0MEn'cmd4QH49UMl[ji#4_!UN0Kr`r0\%dG-lh.[?C4CN6e)c7:muRBUr%cY=^<I*G]$`$>UM?@TdG!Vi
%-Ec1EqX]EYpft#m]GWeHS6R<Y0,o-"bDj,/qP*q;$r)$oB,i!=AG>1G'$JijY?j$0>'e6E^C57JrnE$,F(V]LejjLk0n$d5?)4[,
%^KuFhT+YrnR?nZc4'!RS^T5;Y_q[VQG*cF3%eJB:rJNc!1g?MHD%="8;OdXM<^C*f0'."MiX7;9H[!5MF8(n_;!-W.BAj)DZ+W4*
%\(hGdI?=?amW\3`Mf&CZ-dt-2PsJlW1i2"uPiM=Yp2g1@+gk=?l^>!;q:+!ch8ahZ,;q*S*#p"LMlQcMQXY/A&3]4BGUK;+JmII#
%;ouY:#1Br?$>!)`)Q0bD]@EfqC?t(&VKR>L+H@3b$MUTTS1M.U+$6*km&0KE,B%C:%!/o2PLLiDs..HEZ;^NYaF6<RL6:+hmAbF>
%`)I[8"$L^+l8DPU5tbG&Mt[tMlp3<>\?`VLaF/KLjXY+fQggo_PWM',0(\VDppKpqGYqR'k$km=YFiH6HanmMP)X;Ge*%2OJ@1>Y
%ZGiI%`I(*WPqse+2t]kN]c>@0MDs.W\Ct7[?feF,F,/#Pf>:/CNR*$k+4$V#2[OY5Fb%p90&8]nqlruD6t2SQi`E>QG-[pHkATbu
%d`8i+SP6@n>tn\^go]]K%ke(!F;-qhjA0[#_VE/REjej%jKZ;rVi^k%hC6*"Y<F_TfSd(t]XuBh2R_Y.=Ltm6EGDepE8=dLduC_>
%^&.o*^Fbm.EAa"DbI2sRDKaI1:9b<Xh8SsR9<B$hM-I47rRC92\ih+kWNs&676&,"FGp);XMEg0Q?.c''$/;9:XL0I5s&1>#Wf-f
%Bt!Q.Cr1:4LWh#tK,_W!lCs8hUEk,E8:G!7;:<TJh-S.2%n2_"nbgC,ALGr#2$_gge'Vt1rG$?&7SfAZ?4Q<d[B$4LD<?1Fgor-4
%;L&!kjpVq+jBJU#AZggSG*6Q'<k8Jk'Sam"pmNml,<t*A*Z"<2:Wh8Y"02:>Z[$#p@khsr5J*ne'jdIm*U;JMSbjaikds.WN/q?*
%4X@RnIN_q_T$tY%F5\qD[FEIAokeG*^0JmPhsYV5`BI>omh`+L_UCfUQ9NK(mW6F(F#TZqFmb(Tm*84Nj"1mBmYf\r_Fnb9*gh$I
%2##D^m8CnRDI"l+l4<&:>9C`qDW9]S<4C2g;mQQ0SD@^gALP4YDg,:*Kt#TC%SR<,beW^f%K-2&HK/G,/7d(54\.$P!RP_&&c+\-
%j0lb$:X;,Ka8*tb4hgKYeeBu=aPC3?i8/_>KY^\-j@]AglR5]B/aW0)980jEq_[/L2nU>9p12U<n\p^Ya\Foj"c6&)p+tmpB@iPD
%Hh]q(::pKNk24MR:5HHRlm[/Ug&-O\0_Wl`I5>*@h71^XSG-Af/m]@bHk1Vcgd_)EEI<T*2TsiJaa/=0)DI@VEjbn<AC,3hdUBt`
%:I'RJ#DLchRj8nrkA1:I%-*a*[Wi/mE_F<H/)cIKNa_ru:_F^#(;LVI2Jc?d3KV]+=+r03!-I=K-^d\905\Cb-?t$_/\Z4hBu[<Y
%ZLrNnc4oOS>.u2qXf=>)ikE*ge=6'MX%3YJ[*"*irQ"lRlg!LbJL41Y>7FE<g'9au=,]9O_rkcocJs@is60nLBjPC0C$@$eXk]2R
%2e7c-+YRoE]2d7CQ2l0QHj`#W1uPjD*%^.+-.P[FENp"&_"0$jT-`E:.:62Vm6.@/T4_r:2R"6%^E/@B8e-Ob-0iUgc$-1sheL$>
%*3HrF_^;MljLLn&&Ag7X:#PX=I/3.JjD1Z9T/djTqcgI=XDN9eQK_fSqi!O$(MriD75"],mA\:NV2c\[D_jU:T`!D^laeWaRq=p0
%%j%5\jbDmF)*HR)"-'B8?<"8W7gfQH)c9JGM9hej76qr[DE?b3RV,%&jsps(7.OXE%]e>I94JtXZ5HLbd='g3=(If:l>K\jii\UC
%oekjK\npMj[)DiMY0prfpB2@n_N\J%I"sTZ\K[cuAQ-D$Q<#tRj/2s*?eadf[c;:[%Q+QsV5AGp5LPmNmP'(eYc8;t@pg,?mjHIf
%CTdt):Z<sKQ-OhZ/"*a&nd:7.Y_6?F^CM)4p(O+?T5HBe%oqr<dFS^:VSa:B%F5=kQ9_'ZD"=gk]?lruJC(>MJF$T+K(](F!k[TD
%-%42-Y2q1k5<?j"UuOF6K;]9e4<HiLVrkf:6Tu[F&+-ITXu?VpaFoEAN4Gqp&g6B3?P3mfU+55FX/`4kqm:mgC9.D-gaD=Tq+oWr
%nRQO"MFZtSE1(K_d)EtOqY[_oQ'U^QMN\4H=T^]fldCd9p"u'UQ-ALt+hfSB5$i&D4QN)aa)W++@gFK0(YcEQQ)3Y5rr)D4QsVKn
%p)-s$WOc1ZX,eqU"MiS2I<BQgV`,!KVle\GC*Q[QRI;$A@WB+h==lCnW;"i3KC%?:Ah@)2)a4sB#G97?Z4JNj&*?0R4RZ/cnt=L)
%EZ`WJ]T!_6?)/6Vbmg]NLkVu?NX%Y"fB24#.[f/qR@Mj;NoT9uDKNZ4W"0:#<cS9o;[fVScWl#`n4HK*nf(as!@+3qX=TtoQrR//
%Q[97dYX51fj8<IiM(bb&X*=/KCqaKVlW,,*e]YJ__+,Ns>ZNZ'#(MCk*bE(]E[=e33iV;o5@5IN#JQ>IJSdQL4n52-.6_kA?sU54
%aX9pCT8Og::Sh%]oU@S$orm6-UVTQ%KRIg-AuclK)u'?AI>jKM=8nmkj1rFd`$Pk"XaD,[K]>X*^rb4HF_@'%:;I9"h.K?jMtt6T
%I0m!GCj[%pi8HdNHlCi;3;RojNOO,EhE%-KZa8*8C&g]gF/bf(67TCV;6?!cX,)D8n=pCfCkL>P]Fo9_=:do/?&6[l?/3X#c'=ja
%K5_NFV@0PpU-7Y1CM1n`l_p4$$ZiSs@W(7#cQ+sQ"jN<-6Tfa4_8adn9LH19m\27>\D-1`O#AH"D`5sr.td(-qZ7(V)N@8jo?mH?
%9A`V@WBM-qb#e#gKM:uNZUGn[,?`/sSk$'TQL%.r'jXtea4ECYgO7dlCa=5HIX0:=\*(#AhmZrVo&-3H*NQ9f[[UViiOQ5dZ-dp>
%<c;kO[V@Il:K"`\?C;:`q*%XFSQj<dI%96+CCLd_r2rHIE+=g\qj<"*RkM3fAds'Vo-r:=<JD=LD>$mgX?o,tRG=:?(>GF-;sq8Y
%0Boh&_#p.tkCki</Xnl2^"'[os5n-bgE3B%N1>g`OQU6&j6Qp@:oOPC82#T@Y4O/$`a++B_WDXM-.&7e-/^LBU`OlUBml'u:s/Ga
%8"eAE5'<P%Sp2*J^^gdFPHqEk?EB_&U;Re,[nBDt_C>7TY7%=?5Mj515KL%#G-8WO3F,:E>*nnK[W7KfYGB[%Ch"j!mQ2hDojP"q
%4'Guq!)AhtKa^#]>l(b`^'(=e*'35K'&i*?&@BU-STdoNc'lL=XdN$a[m0A"j.$aiONrCdj%FJdf#.'LGL.W(:Xm5K:E]6t@cLKm
%W1Wr!'r0j/!2>YPYsaSih!C<;>q6Sa@&%SO\=Tk904$b<Pg7mhT)@6a&#Df*6g5sa8A0scBnPFJ;-I8YH[I.gJ_m"%.<4fkE&p!O
%Ok<&m9nX.V9!"',q`t;JQf9FShT$$SMu+m`rKKhu5AnP.iQ5..RN&P-%9ge=g]qZ:kH\li]B00!DU^kj)c?96>lBQ+TQg+p]2mNc
%I9b[,9DG1Dfu)$kUTg4@E9gqSFCq#'gj\Z=Alqg"TgEb$/pf)5@&hQ3n!T'H7[J3(G-[g>Su1Gr+?<_Rr?7_$@^Eo%m'bL>_pttD
%\3`YF$gb;d?`8#Hh0.pIO8p[EM!aQ;.qiI'_nOY'eT-.grua+4]AC"!Ud4%,FG^Z!^MXEd,Gfp10/<h>WP&L;+t"+[JN;@e`t6rN
%R&&L=f_g(TjS%s'jm:%UrZ^^'Q,>gHNWI8j%%dC=E=C!#a+;I,*61J&#;UdL*!<814HTB&iu$Q)NWY\63KAs7>R*$6EZ>/sXRe^>
%:QAr+q$VNlo-_R5)!c5_aSa/"%*Z\9+S-u$1&+`qa+;I,*63SPiB34tPN/&1c'&b%5itiHNVK%Gc29O*A?telk"h"IkkPU-+S-u$
%0gIJVJW.op9I>%Rh0ae4pO7M,:.:i=drPGYgS1><d(1/_5P(FMre,,?`JB8a]mkFe/$,kS2?8[%/LZ>M"V\3I%5uYNZh$Rp.sG+K
%\T,&&@5TWb\ad@Hb9%Wf2892hNR\W0K[jh(;d3Oua*[<`_V=D0%j8I_L?U`(RuR6lP,5]r%i-d@[`gCgS@.SV"H$\^/bNrt8/OdC
%C4PjdnAbLj"\JAA%PE&d(jnR2$>[hu+ZZ\JU/6,3^>@9S+5a,ef)!fXmHf)$Me]ed7,<24jPl6dp(7L@FB@edU%IqLg!;%-eD0Ig
%FWIub]W^C)763^5N?Ou%3]7d^s.jF$QnOtI%ga(3QtHACQ"G:L)ne6Ojl>RZg!Y:/*"?q\/q)WTIQm%6P2U)NgFntod'.N;"srF_
%/f'6c'7;uar:A$C7UB)@Y+1gFjaKohnq2HsW'BEZq7C2\Jt4H3gFBiN4!Jo@o:MGjEN3s@4nH0-H(#W-dac);k^F`Ir=c@N<^*l,
%4M?!cSB&3VbXRdTp%M_YlY)cOhiIMN,K7"+im(a\1$meKp:2*1&%IVk<IUou>HaFk=?[;D\i<HcQ6EJu9'/'NF!$hE4llSU'H[Rq
%TrE4DdC=U#?!V-1L"pG9gfRoHrKc/$a<h>gN<sk'!Cu>QlparK<"cj<7Q!rga=j#!_e-#pen`bSmH@#M/$bR,jSA+b[8Z;>C0.hC
%%!%o]YZ5HLU<2V2qD&Ec*i)K+;lrJI>c/[/%m(YdlrNd[jJq:"2#IZZ;hdIaXbTH+*#+R]@(`U*Q=-nlg[FgLk>ZT5gtlu+I(a1L
%:<q>QNAggL[E%0<,hFN44a;92cQ'RbMe,-qN^mX^7!@G9)r8u<e?RlfeIK$+'8=_a"PuM[p[l8_*X_XCKq7j2`=F&RO.0k7'J?fl
%IJ-WB><:O2A6/hng4`^dlS`u4BD94&I>i__?,^\%7ota+^Z-l6VT`gsVa_H^F(%&;nbI;d[rM#&TA)?9]pi5_Qfj@Pc/%h?YZ&Nh
%>^UT!7[[It1jA-BmIR6doh%Qk^kV1gfESUr?o"+#\5iF8/&XjXDZ+h*eTsB*2uXr$>0(=<k#5UpC%*.21X#O!f2H^3CrQ/3/\-3V
%]H1$25fbOq_!-0r$JG'UCtMulUK'5CQ--t4gJ8H:K*=C7>,_/1X_OGJr:4ScI9B\o@_U_o]$j4bl1)31f^fl^%kJ/hZ(u^_bt\;)
%_@CmAL5msY_)KTo1[Nsu$ej<@9bf<!LBmVbA5"bE3DV:X)/6>S)!(AFK26ipU80,>SCAY)@5JdJ\`ClDpkX<:9TXJn3YqrDlnSO6
%"DbES!Jns^I,]@R0=/*K4$Gi)iSB3@h$\[[`H!>nF/N4>0dFg-<PegGS!3f0+'.p)8[VWg*-MAR/`pR[V<oM+_UK4aDf+$YqsVbF
%Fo035Fb]X1Qt1?2&b_k$+$g:cHb#3^`RfKKiHroEW6gSr(=lMFef!)aRO!ke$8?:n9p3/+*&HJ"(Rr2F:H`fmZR"o<"S/Za>S^_D
%q]]-^X)"eT[IF$`&i6"aL+QY34+M*iJ[Oj[V:k;kaBK]F/BQp4p$+<Oq]"S]AS7Vq,O'ejU!DKG@2eE.mc^df"@gY]ZQ0Q"rYG>k
%J*IN[](k?ac.X1i;1.r`B'g's@Xe,eZZ_+3=8M!Uc.X2Dn$)^_GK<_;qBt\BAtjSBdq7tWOh#`-dq7tW@;`S65Af!)Bjb6AjJU6`
%3t8Qa:O_$!Zd[9JnE-Xn3]i>fI8>=GXL$Ah7)tjj2XB]dbi&!QVp.7a/`N7l2XB]dnEPDldq5/A"r-[N:RcKM)O8G4r3TU>Vr?M,
%k,6Hb3t8<3DgpEAZd\,TXJ9gEAs&WR^?b"):RcKM)Ms(@kA8Bs3t86u]_Q9Jc;#V\`KQoPlg-H<^UWj`At>IsF7I@JRrrlmiFG`5
%g8qX00Fr/8kobQ!+J:65o$_3ASH]cIT2%(_G+'e*Mr^e\3]eo+o?0q!F`s4%]$BH9brRrRGBo".AuF%Ve'KO!^J'aZcU44FFrHs#
%9pl>(,!-5knrtSE+]-%^@W-_LXL$Apn,G.KG(T';bS'L&E\ks8,B4PrIbLm0du;ff>2L3/Vm2ci-`Ndb4"V*B'8>FD-Wh#tR]1b,
%SHa+N7)mi[ZI><^g!!6]F`n\[2\=@'%("D:ei*oD^Y>p2XTef_A@'ER6]-0\dq5/AL:3p;5Af!)Bs95MY7$^Y3t9Le`a0H8F`n\W
%r*uo<Qo[;<V<-@q!iF7<6S14i\q$cddir5'$^`t:%5S.-?5G;<G+*E:2#=e6WO(&m=1[tOJ;^ecnF82VfP3"B0(k..9@fH$O+QTu
%r@!^coJ#>!4h41A@@`>o&LV_gSQ#a[4M)Z65DsjkZP2r;7-UO#Zc<mH1S-ZQB.8Sumlmg%hpAK^(GQNjS%3G[Qh_C0li%,Ae\s^g
%_eMBEH$?F&;"Ec6Hp<_qQgKEj^&3?Uq=up!mTf,thaS_V^heuH4E,SfI%RJn.eAAGo>94]`fgrfOYH#pGN[C<H81ItScGsJm00#.
%.T<N-+#B2-C5EVt$Dm[t-Fmd1H'"[].+O+N6hP,F*]ZK\*k?9I':P8mr._r^P1no5(<Hk2(dtu-69?DCN6G,tpo)T@O6@G^H\\G[
%hdT%5N&-IH%#X6FNaW"o>oKLlLPq'IfFN#h4102k."QJXFQGf&Z*s]1T[g;="&LIeA;=_\LDRG!AG66P,UBg7*i*&&6Q5*#'G#(:
%bpPYgM(f!Xp,d60iJ6)q2u0&Zb$KR.RbEA5jG2$E,ad(^CH$#MT+p]L9f[B1rn2TB&Q@]q:>&m(ILbgfS+E[1s'@fmjb3EO+FSFg
%5K]MOasE/9q`;Ed%3K!?-9`p!+!+>7N?S6Q'd5+%\M.^XC24XW)*qr%-tSB6!;Itnq9fqDXOj'](bIbUCCtENS,8auqn;o>CCkf$
%Q&]LXl-a&&KH;[BbaJX\.cofZ,86&@9M7#L77Xud0_LVJDPoS,QUQhQN1;a_h>+Tf2.?%:gdc\$KSo3;<.p7:WKoWlGS6,pOsX5A
%*A_A(g-,I<`sg/b%7&.r_`'_G0QQ2tJ+/h6RlSk-c7]ibeB;@J.a$WM7;s2AoiGAfrE)@%OKJq3CP`9k]M48ood_n7/(gaKB:2dD
%dqi%I_*H[XoHq`:/`o5T1X5RR7^3&;RenpZ=AqC_4G<N<c6SG2STlDlSk>s2P0uurgE43r06KcXpD:TYZ<s#nlo5=q-_P_;Xa/qY
%DVQO[3M&cQ5l/U?!^J,-h9-j$2.X&_p0(X!DSJstlgtN<rjnDX*k5YT.c"5`<Sm:=^0Ft]A0e_B-1#C-ls"19h_=#p!E8^"cYTjg
%rQ1;0r'OLe]RC!J8p2,m*:19t5'qT]50k6dG<"5Gl1rQdl")0i3''&c)_=>t?qt8kp62[,G?_<Ipl!p>3NkItHX9<M-.4Y]ZnaeI
%@*UK]O*>i-?csEoXa\^I2rjZX0dKqd3>nM\T)WF^Z3B$&aRcV2G*PcaMo9')\Z?6p?#1XuAnq!.]3,'1er0#pqB#tBiP2B6jTR4c
%a>*fV";fr?/'Ui&ZPkF(,I,kFFDm7V<!J=W]A392RRGNY8b)X2(JRAYL0N%?5_OK<V>suB7(65_mPVjMe+!Cn^E^W%B8d1IrW@Wi
%_(T-qqKGnrSjXZm\S)^^?GJdF<Ct9+/4<\SJkq&$KS1PLK(BMR=cn-1(g1RV7b;8&NNN7Ud_4nWCIb`LogBCuS*:5^;0:6Sq)^Do
%FZ'l>KZ\9aD.W_*D'l4g9pB2Bbl#B59MlG6U5?7Fq1mYI^k%oM!TC+,-3?j['4a$WLM%Nn+M3ar37GqOfo7g7!>[H:2DRRA,G()4
%JgbDN.gs?Rj/%FK#nG`B(t20?&u)*NNb0VsBdSZCR1gl:1D=@Z_qfALi=`.7_&s%Z;L/2VM)sHj#mIPd+.=bFdCXEee.SK&"'$Tq
%+nNbo&j0,nab!%b9FN<N5;bkBmD$2b/.$>R)_iKoZN0Z0O]QrsfKTUC2%_*b</F75@8RW20H5T+E+COD#^Y"?NW*4?LbN1ij"6([
%K<rJ=Fr(Dq29d2='!X\[/gAM57#Lklb\==)A*0MUcu_$c8f9ST.Zoe5)Ctk"(WO?78:+@c"C%Oa,:]ja%'pZ@K[+;Ad1@S]dYc,R
%@T8U*Wi?0D0VU18EYOgE;aKnVJ4`5['-]*`&<0<gMSbQ@'LC1cJ2'g<4*2&gk+fJC-7!\>8':E074("I+>+i-]E7D1JOCfXJgu9_
%&DK/U$8dAL<Rh4"lb![W&V5$:n>b:KhU)IgTIK01PSO7R(,SIrQRn4l)$5,H2,9jg/cql3*g4OtJ-sBA"=G>:9FtS^._J5q6PT_)
%!NO"F[ph\OFVQkP?K*tN[m<`aX2^o2K#&06<aF6`Q=N3.$&O:K>Dlnk!+XZaS00M&`.TCM.U`e=o-+8j-sZ9T*EQb<)E'9#LmF-E
%d34K,=D66qbq'EgG-J2>qaD1Jo_(^S>rGg$QK&$a)2/[i72mKZ^]^B`+J>SW.D?o[!075LP2-MN?aEQ_5ts"5LoR*c)jgkrf-Jil
%0VU2A'Ef%:J>M7NqPU.)N[+TBW6M@L'r<[A!<fA-P$uUdnO+G\L-3BVO!5qQ)N(9)](-sF@)JbPJO_1B&V)h^()R'5l3Em&#(23u
%$@d]\TW^lf$8J'TXCDW@Pt29W(<@mdlmL5X_=&M?A5uJU-J/NA(!-AE!:m\9-ZfgY>o_@L-qMEB0NCj*1bp.=#Fb1u@@DjdJ6j^e
%)VXJ>Lk6.d&QD..g2];a"aET?22!W(6r5DL_&uMR+R6922gIpPM6O@VcoE=B<C*>ZhAD&@)I,f:[Mgi]Nbf4j"^-r.$>C+a$>-*6
%W^^#[OB!8+-`J6MG[+O!-@fE"AXrg3*aaLN/JHh=a71p1#s]CI)?A1c3W**t8Rj-P!!GQq-4WF4"Uq1M&IChHB\2MUcmh.DQ\Yu:
%QY\Op5iPf?%d6fIbYd:E.4P>.3CtH4<(V`l)A4Y49dNd_WWuTucj5FD&/co?M7c+<_?$)*O;6WL'7#?=!s6=s-NK!H,,2`hGB?D!
%!&?<T8`3R9@)nt,"mcq_V[G)N3!1]lNi\$<Mkq:i!p]j@JD:oO"_Xsa)5r(g5QE96SY2r.U4EoPW&t+&!\=gV:#tM219V<sQ&&P[
%QSd7FHghCH#on,I"@q"'CCYA>.`.M#;:#=7aukG0$QpXV#sZ<96pubWIrZ1cI!dPs?G_CB.ns?41kd\".VAIFRKrVJc4^2UULkZt
%C5.!VCBA??GRDBK7ar>q"g?m&FNYcUo0_%"VTBA6&N7&4(_gZJJ`orKE=Fu4-DVfuM=BF@#fn2F'Pna.#('\gnNEWl0Rc9Z.oCXM
%'2i7T9bUQ<@(,"f@bNY4!.6!3`!?B"9[\nLJ/Ke?+@Ju_ES$qL'*Xt]32SrL0MrR7_2^bf9*>;s)+)\di@$F*?6k+,KoncVNr^ad
%0E[$'(XXR0RqR)0H,-'S<A^3od\Qr*,Z'r0M?Y=/2?s/U,UDp_+hE3Yb_,s_KTu_4D$?Yd8&b]<-c2l+6mqOH"hd606STljO<T8F
%&uR]N;?WE5$Z'sCP,aGO%B31B_2i&/!CY:nWK99^5QDHA%3-K#X<Q(`ePU^NL;ee__/a6JK[*Y#AVFt);pj"!!f/JP4:<n-S+Vs"
%i[M1H%0fmEd).FBj#ETQWPQ;8Lb+Ac5Qh;19iGj6iW^eC0kdu#k6/,U3<LH3b]$],'F]/q-6Dhc253K?<hjlJF@RP\;$Uj3%F9ZS
%"_9H"]>;Xu#`SO$(9GTm"H?$[,4hrZb^A#SC@h\G:(Wq*=YR3_^f2]p(s$&I&1.C*%%-^j#6nBCPaCB_TgT$<jomT4W9aKl5Tg%1
%/5R:;$ROimn]k/r>%Ii2+KI"!:=F<;!WqIH$O.eA+:]6>E=*F+^bQT+SYr:460Js^R(5,*+s7_R%',@1UZ[]@TLp%0Rhu]uXg7Vg
%-9B6M#e2<pK.J3&DgGh#1Un6A$nI'?6e'mZl5LtW#_HGEX%mIJQo,K<>n;m*"4[8^>m*GpFU*kR(L;&U%YRup0^j<rBO>Q+(a@cJ
%!\^9!!c>j^Z6;UNJO"`)(eB>ha[m]2LfWOK!8?uH.1i?j,#Mj=KrGpVTuchg.AB7"UZ:U%@YeODblSe%WanIF-gP1#3a3Jt(=>le
%!MGNBiei'6Ebb$HFf,WY6!:TtR'A^]*NPl".=uOL4-aJl<S'\)r$1TSZl4d>8-'H7*(ZgB1MqY'P4%N<+<"*kp?o:r##[m!0M!B+
%"26JEqgr@qN"?W"W"Kt5j3;NRH3OjI$&%"I`4ohd8Z%\iojl`O`c)EWMF#E[;asRs2(6hV<Cntt&!8Zb8dHn%+<V#HStQ7`@bAiQ
%o,<>(a;+oQatuX7i8PUI!Jui*YTe^Rfp;^QNH[\SS*b=J#T08YLDgr<SA#7=T1JW/:NX8N0l-uLPLrp7oeETN'B40,#?cik*hd!V
%;4(&a["4#Xkl\d]"i1KHc2g;&fF*9\;&$fg<2o9'':Zjh:kJcQe<j8pAT29T:&pBm[UkgpS6e[SNhWIK:UEQHTaSeJ113NdAojI?
%Xrkl4QWRGn8iMd>3MFF-)#D)l10X<6+GPY6]fF=LalFCV,d7Bt4N23Si"lfm"!4DA?e#Wa=tko8Wk&9Yfl3,mOG$YcmX3KCaXm(`
%Y&Q4Z!^$ZM=qmil<&/-m9_=)gnqQ'iQ]t!i79)_pK'W^pY$qYWg'XBH`=T%7@0/-A1MA;$GU^L#%)`8`#tQ<r-[%VsfJcd$Tm\3.
%P!eN.,33=,D2"]PU`rf?E!*<U%O9>c#QrPS77L:W-F-k4E8t':J8/FfH);>%Kdop:AS3+iIBu*o\%DsA%uC;Ep-caSU+i"eD<Zne
%(k.Yp%<U(0A#'.(%SgW4JNYNF#,5k"'6L(1nZk><\@bOp,*J]K>NQ#Y,-5O#Y6ABG5(VsWS0ef-QPc,D@`V&NjElT@aG\>lARWEr
%I"[V!\J(j@L2N),B#90$,%s)E>Ck6P6kPqET=E,I7>"*j+D.(FZYOFQ_mCM:W-T4KibM!2PqG_Lg0bVQoVKV1ZSFM1Adi=T+,3Ki
%<l-ZadqDRATn8#M8Y)rTCOI$c-;#EF3C_obg;tK47%'S_GT6c\#F=iq![/-di#A(/[Ldt"H5^;/M?G8?3h6G6Jr&VSam9]e^f)&>
%'9us**UF2Fe2cR16kqB]?pcahI&"Wg?jas_d^uSgd)FMO"AR0L6P?c!W+u`;P:/fFNYBeR;lL0<APmV;#R:'q$,Zj$N[LBUMTe[=
%S=[gE.69W;4D-HRJZb+=\jA0p7fj8[.Mjs;0mQ@@AAO!8#u'B%CAitjOf1N-<KpUZ$]?QUW^AW'3bY&![K?Cri\M2gRZY9s6?('c
%2-j?%M(9d'dkuHk#.oZ=S-g"(-97tK1T&24)R;Pt0aL'[!J6iiSIf+.<Fa#Q%%SV?,+X?\Wj9k5B&O*7hI+nH0lEI$n>dn"$.rjF
%%C8b;lW##<CNL*oUbX92Mh*V2:SI:\57f?`gq?FacB5i2A-a;XU!agTKqd5(U(_-I_n>;h.<rKk@MD4G.0a??@s/WHGuqIDVB=%!
%KmD8X"2t^J2IW+q4tCYaGGBd5l7?0*e<=u.5K74[ak99"2$9Qa[aOC@%!Cq?o0!JYC-$:mDn8e&<fL^Lin3(;K"u\G'gbA&M.9_W
%KZ3nf'-UnK)UGsE#I?V;aTusEZ\>3sMA!E=\4X]tdNg"m8</8$3L0[VIhgR590=72X5rcBUPU`3'2an'@%-"qn;q<'k?M^3H;jFD
%"R@]KRVfXDS1ktSB3kX;98<;<UrGM*\#G1]erm:(NE2_46q9a*^bc`WO@He0m`(DcemOFk@A.5@ZI$%+E_iiIg4X:'6p7saqC:r1
%R?Bm4C>pL-"."Xl0G@i%M?5\oh356,=E9g6#\G3ZMTiLqc89PnN1LlB24auXYVLR20mCsI15g+Zbg@sE`_*X(N19pSe$J??R*!V>
%]3^jV)f6F\9]W]$KU%\?6FJWNkXiJp_6[VmN+>@g>Oh@4PsFj*#9fh?R,0SG)XeOtKcXS8#u$Fl$KH4s-#Z[aNs:P6roQ`Wf`4tW
%hQjr(5RU(:4DrBDU(*'D1mrZ-2N/dd@)R,6+Nu)dqlU099,@7W:*1XtF;9Y0`!DgKZPdKnN'0bN<%+"a/e-/2_3fG/7#E#cZgp3q
%>l8!L]54iKUBs>UF!GX]9Q3KT:S^!8]#<&295rX!;@?&:_Z5b!agqp9@R[f[lrF1*D2e&e7%f%Y@q$,a(eUQs0Q>VX)ce4IBf$KZ
%kt+,b$6e>5aohf]fpNCtAh"+maL8s)W^q2>3#V<?C^BMh:X+)&#"G^ECLkEtR@](eJ2HTr-E1NCk_'[J;41HE)4:V&Td,+6qcXP`
%^f_bRgIHZ/\BnsH'KNgA&X_)p3OqU_E.h[54TQ_Il,4>r+I!XL<_.$WF&$aB&0uSgCb2qJ>1Nq2fpq\cq5tXXBG)@Wd*jpmD!<cu
%SfHVHYlW0EK:`!\\mo3$!0bCn$G2RR-Ya?.;;ahXJjN-d?F)nc0%/@1N[ufhL1@_3m2?4.>BjX19U(qa0X,B3G;5F];f%g5B]CqE
%-V9HAE9'"2AlhAcjWt.1$YHQ*h28*D\!bs)fM$/"9W#h$<+7Udr$iV9)4%>N#?D#:Q"2./!<g:Fbk-kUbk`kF)sno]9f0m(Ht^?T
%FpbMa14kl=L`t`-.!PlKju"m'!'rVBEFOm4NoSenWgOSm:(T916r?tU4Tf:(9+9Sf2<>3uG<$R;A76Hr*(TP;!4M]$J`[rY;<\*1
%N2a.c/E4_r?ciBL"35f6J2(`Z\9L=?bgn08]7)Gdr6n/a_:k,U@^\h?&/9^(CC=aq1C"=f,j%N,#d7'\_IK#F8[T-Y0s+qX*OE_,
%)cgM>0`!P4MNMsr0q3%f5E"2K#3lcr(lbA)AN$l'1m&dIfWFoO0to2F@fRjV=Wj1FQuF3/dkhr0c"S_fEZ-9EOo0N`LG6Lnl:qM5
%'9o&.dNX[mBafN2>1R=,fjGmC.2YXg7*N#?QqI=,N2Mb28R#S2N(Hj:\f0UmK#T\]5V6sWgQ;ZEV4%k2UeB]mRiPYt@?&:.RY?sU
%b/2oua?;W.?Xe@=P=I;2X"17e[SgI0!b+nI"*%#MJuOnF.lM]/<=DMR;\*:V:tAd=#j8!t)VYo-Z,X+X(04I3(?Y&\c,<sU+%@"`
%q*]jJQ85e6hLaGOaaVhPk2f9Y,'@?NgRMuq/;D$_O!(]$BBCYKS>jA16jNal7LlQVP6GACD8@c`Z?igdc5Mc&9a`JXQ&W?-P@o>&
%D_aIZ]W%T1TWp#+;/]cP\\NeVAmiF`Nj<u:\;m8M`LBmfb\Vt^!KsB;4g>Q>4<%m@AbBSBm[i<0GZ2Iq'Mc(o#P*d@_oAc96'u1r
%%]Y9q,-\)i!Z:d8'!Xa@67b.t3j0GTdBW266,PPr0dVn]5T7u\M+Gt`iY]c\Hi]C^ArC&1#>ak99V'4V#89uYd55,R]$kBtrjsH'
%8e:FT,UYtkN8_Q[e;<j6^l/PjW/E3u."E%97\V*='-(*S`E](Yg1hlO8T#BI_38W>"MA/ZP9`csSco3W=b0#t0Hq@$UmhE`,I'.h
%7Yn/&&1q$B>XkcDSgFn&X['M`#!6mNqSYWQEZrNDHNjlo=X)Kc:V=J\D&c>kmVG9`O^tn_LhE)E>o;SE9Fk,;V`W".gFs\/[@B^^
%5:81C^-s9HZHOeJHg7!>K;Y"n7);5q(P0AFeO[msH;Y1.-$DH53E<I1'Ouu0@E]_<@Wqi4Od(,F0K_+Tkq8&+QeK704hHUCm$N#V
%L)jpoA0iCV7b@_T'8n-s.;?BWgtX=8A_@AWjN+nNS#8f3OB$?DRP8h7H,ZJu&4;V<_"Qq\0?DMSNp+K$<oN=G0rAII<HDhU$O#0]
%cpUbgK_7Htj:@De6",n$d0CrDU5:3!ib2&TXr7H_,iK5HX_Tau@K'Ph!5qE/1Rk'%Xj\OY"VZ6*4?O3iL*N'4Qnr-$"RJoOG7m.B
%<b``_$oK)];C$f?abm<;#b]jC-3+7jj$n`:!iD!P)9J<1rEB9G]1+k$`jS,j.54t`*;]M^CpI4tH9o!ei`S-:9#fiKL<9qY@UW;e
%49nJE;e:Fq3p6p39ZFj^HE<,<JJSaj/ts->Ye3J*C^=iK%aub8Kl*Y`3J\4fj/NA^BW@(^6[mrPfJ&$U,#&-6R7\=['(PT8HH2C'
%!>$g_!)_/Z)hKKr&Vqd<XY>L3;U\geCf:O)6mTUa"L40lrM/mt!6eV>k$:1g8!E<\e44(A%hWXq^.U6U]rP;3AZ[AbAM@ge6"Y>C
%X;d!R2G5HsfiUI4d7gQZe;:R5,-C736u3,5=*-T?F^c,d=9FtAXGr6Gi8VQaYt&LY@lf?:PI,I4ZVX_&)q9fpU2c]9JeU#I%B(H@
%YfCR1Kt<QIL@teL8uiVi^,"=Wej(RT@\[FbMI$^LVS"e*CGA1pBumcajGnt>4;*R;b4XIgYM<gBHBENgr3';2ghq<?j[$!V:SRMg
%XZu%AC=3#nkMHPr=3Tg3=T5B5q0rDp2qpF~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 4160 6042 a Fe(Delft)30 b(Center)h(fo)m(r)g(Systems)f(and)
f(Control)p 0 TeXcolorgray -600 1080 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/XYZ null null 1]
/DOCVIEW pdfmark end
 -600 1080 a -600
1080 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -600 1080 a -600 1080 a
SDict begin H.S end
 -600 1080 a -600 1080
a
SDict begin 13.6 H.A end
 -600 1080 a -600 1080 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -600 1080 a 181 299 a

 181 299
a 181 299 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{0.9 setgray}def

 0.0 0.0 moveto

 85.04042 85.04042 lineto

 85.04042 -85.04042 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.9 setgray}def

 0.0 0.0 moveto

 -85.04042 85.04042 lineto

 -85.04042 -85.04042 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.6 setgray}def

 0.0 0.0 moveto

 -85.04042 85.04042 lineto

 85.04042 85.04042 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.6 setgray}def

 0.0 0.0 moveto

 -85.04042 -85.04042 lineto

 85.04042 -85.04042 lineto

 closepath

 gsave pgffc pgffill grestore newpath

 restore

 save

 -85.04042 -85.04042 moveto

 -85.04042 -85.04042 moveto

 -85.04042 85.04042 lineto

 85.04042 85.04042 lineto

 85.04042 -85.04042 lineto

 closepath

 85.04042 85.04042 moveto

 clip

 newpath

 580.5687 -580.18007 moveto

 580.5687 -580.18007 455.28117 -454.79045 416.12402 -415.58226 curveto

 376.96689 -376.3741 326.3905 -325.70544 298.35129 -297.59477 curveto

 270.31207 -269.4841 234.10374 -233.14667 214.03685 -212.97995 curveto

 193.96997 -192.81323 168.0681 -166.73123 153.72311 -152.24707 curveto

 139.37813 -137.76294 120.87912 -119.01358 110.64816 -108.5882 curveto

 100.41724 -98.16281 87.25049 -84.64426 79.98555 -77.1081 curveto

 72.72061 -69.57191 63.40138 -59.76474 58.28749 -54.27266 curveto

 53.17361 -48.78061 46.66359 -41.58856 43.12813 -37.52502 curveto

 39.59267 -33.46149 35.16011 -28.07675 32.80626 -24.98553 curveto

 30.4524 -21.89432 27.59947 -17.71094 26.16312 -15.24565 curveto

 24.72676 -12.78033 23.1339 -9.3327 22.45389 -7.21732 curveto

 21.77388 -5.10193 21.26227 -2.00183 21.26202 0.00063 curveto

 21.26176 2.00311 21.77231 5.10051 22.45195 7.21535 curveto

 23.13159 9.33018 24.72435 12.77829 26.16052 15.24304 curveto

 27.59671 17.7078 30.44934 21.88904 32.80302 24.9797 curveto

 35.1567 28.07037 39.58923 33.45537 43.12424 37.51854 curveto

 46.65924 41.58171 53.16821 48.7729 58.28102 54.26427 curveto

 63.39384 59.7556 72.70992 69.56105 79.97388 77.09642 curveto

 87.23782 84.63176 100.40457 98.14944 110.63454 108.57391 curveto

 120.86449 118.99841 139.36139 137.74675 153.7043 152.22891 curveto

 168.04721 166.71107 193.94415 192.78748 214.00832 212.9514 curveto

 234.0725 233.11534 270.27692 269.44894 298.31299 297.55647 curveto

 326.34906 325.66402 376.92047 376.32777 416.07275 415.531 curveto

 455.22504 454.73424 580.49538 580.1061 580.49538 580.1061 curveto

 pgfstr

 -580.5687 580.18007 moveto

 -580.5687 580.18007 -455.28117 454.79045 -416.12402 415.58226 curveto

 -376.96689 376.3741 -326.3905 325.70544 -298.35129 297.59477 curveto

 -270.31207 269.4841 -234.10374 233.14667 -214.03685 212.97995 curveto

 -193.96997 192.81323 -168.0681 166.73123 -153.72311 152.24707 curveto

 -139.37813 137.76294 -120.87912 119.01358 -110.64816 108.5882 curveto

 -100.41724 98.16281 -87.25049 84.64426 -79.98555 77.1081 curveto

 -72.72061 69.57191 -63.40138 59.76474 -58.28749 54.27266 curveto

 -53.17361 48.78061 -46.66359 41.58856 -43.12813 37.52502 curveto

 -39.59267 33.46149 -35.16011 28.07675 -32.80626 24.98553 curveto

 -30.4524 21.89432 -27.59947 17.71094 -26.16312 15.24565 curveto

 -24.72676 12.78033 -23.1339 9.3327 -22.45389 7.21732 curveto

 -21.77388 5.10193 -21.26227 2.00183 -21.26202 -0.00063 curveto

 -21.26176 -2.00311 -21.77231 -5.10051 -22.45195 -7.21535 curveto

 -23.13159 -9.33018 -24.72435 -12.77829 -26.16052 -15.24304 curveto

 -27.59671 -17.7078 -30.44934 -21.88904 -32.80302 -24.9797 curveto

 -35.1567 -28.07037 -39.58923 -33.45537 -43.12424 -37.51854 curveto

 -46.65924 -41.58171 -53.16821 -48.7729 -58.28102 -54.26427 curveto

 -63.39384 -59.7556 -72.70992 -69.56105 -79.97388 -77.09642 curveto

 -87.23782 -84.63176 -100.40457 -98.14944 -110.63454 -108.57391 curveto

 -120.86449 -118.99841 -139.36139 -137.74675 -153.7043 -152.22891 curveto

 -168.04721 -166.71107 -193.94415 -192.78748 -214.00832 -212.9514 curveto

 -234.0725 -233.11534 -270.27692 -269.44894 -298.31299 -297.55647 curveto

 -326.34906 -325.66402 -376.92047 -376.32777 -416.07275 -415.531 curveto

 -455.22504 -454.73424 -580.49538 -580.1061 -580.49538 -580.1061 curveto

 pgfstr

 -580.18007 580.5687 moveto

 -580.18007 580.5687 -454.79045 455.28117 -415.58226 416.12402 curveto

 -376.3741 376.96689 -325.70544 326.3905 -297.59477 298.35129 curveto

 -269.4841 270.31207 -233.14667 234.10374 -212.97995 214.03685 curveto

 -192.81323 193.96997 -166.73123 168.0681 -152.24707 153.72311 curveto

 -137.76294 139.37813 -119.01358 120.87912 -108.5882 110.64816 curveto

 -98.16281 100.41724 -84.64426 87.25049 -77.1081 79.98555 curveto

 -69.57191 72.72061 -59.76474 63.40138 -54.27266 58.28749 curveto

 -48.78061 53.17361 -41.58856 46.66359 -37.52502 43.12813 curveto

 -33.46149 39.59267 -28.07675 35.16011 -24.98553 32.80626 curveto

 -21.89432 30.4524 -17.71094 27.59947 -15.24565 26.16312 curveto

 -12.78033 24.72676 -9.3327 23.1339 -7.21732 22.45389 curveto

 -5.10193 21.77388 -2.00183 21.26227 0.00063 21.26202 curveto

 2.00311 21.26176 5.10051 21.77231 7.21535 22.45195 curveto

 9.33018 23.13159 12.77829 24.72435 15.24304 26.16052 curveto

 17.7078 27.59671 21.88904 30.44934 24.9797 32.80302 curveto

 28.07037 35.1567 33.45537 39.58923 37.51854 43.12424 curveto

 41.58171 46.65924 48.7729 53.16821 54.26427 58.28102 curveto

 59.7556 63.39384 69.56105 72.70992 77.09642 79.97388 curveto

 84.63176 87.23782 98.14944 100.40457 108.57391 110.63454 curveto

 118.99841 120.86449 137.74675 139.36139 152.22891 153.7043 curveto

 166.71107 168.04721 192.78748 193.94415 212.9514 214.00832 curveto

 233.11534 234.0725 269.44894 270.27692 297.55647 298.31299 curveto

 325.66402 326.34906 376.32777 376.92047 415.531 416.07275 curveto

 454.73424 455.22504 580.1061 580.49538 580.1061 580.49538 curveto

 pgfstr

 580.18007 -580.5687 moveto

 580.18007 -580.5687 454.79045 -455.28117 415.58226 -416.12402 curveto

 376.3741 -376.96689 325.70544 -326.3905 297.59477 -298.35129 curveto

 269.4841 -270.31207 233.14667 -234.10374 212.97995 -214.03685 curveto

 192.81323 -193.96997 166.73123 -168.0681 152.24707 -153.72311 curveto

 137.76294 -139.37813 119.01358 -120.87912 108.5882 -110.64816 curveto

 98.16281 -100.41724 84.64426 -87.25049 77.1081 -79.98555 curveto

 69.57191 -72.72061 59.76474 -63.40138 54.27266 -58.28749 curveto

 48.78061 -53.17361 41.58856 -46.66359 37.52502 -43.12813 curveto

 33.46149 -39.59267 28.07675 -35.16011 24.98553 -32.80626 curveto

 21.89432 -30.4524 17.71094 -27.59947 15.24565 -26.16312 curveto

 12.78033 -24.72676 9.3327 -23.1339 7.21732 -22.45389 curveto

 5.10193 -21.77388 2.00183 -21.26227 -0.00063 -21.26202 curveto

 -2.00311 -21.26176 -5.10051 -21.77231 -7.21535 -22.45195 curveto

 -9.33018 -23.13159 -12.77829 -24.72435 -15.24304 -26.16052 curveto

 -17.7078 -27.59671 -21.88904 -30.44934 -24.9797 -32.80302 curveto

 -28.07037 -35.1567 -33.45537 -39.58923 -37.51854 -43.12424 curveto

 -41.58171 -46.65924 -48.7729 -53.16821 -54.26427 -58.28102 curveto

 -59.7556 -63.39384 -69.56105 -72.70992 -77.09642 -79.97388 curveto

 -84.63176 -87.23782 -98.14944 -100.40457 -108.57391 -110.63454 curveto

 -118.99841 -120.86449 -137.74675 -139.36139 -152.22891 -153.7043 curveto

 -166.71107 -168.04721 -192.78748 -193.94415 -212.9514 -214.00832 curveto

 -233.11534 -234.0725 -269.44894 -270.27692 -297.55647 -298.31299 curveto

 -325.66402 -326.34906 -376.32777 -376.92047 -415.531 -416.07275 curveto

 -454.73424 -455.22504 -580.1061 -580.49538 -580.1061 -580.49538 curveto

 pgfstr

 1161.13805 -1160.36015 moveto

 1161.13805 -1160.36015 910.56299 -909.58092 832.2487 -831.16455 curveto

 753.93442 -752.74818 652.78175 -651.41083 596.70323 -595.18956 curveto

 540.62471 -538.96826 468.2076 -466.29393 428.07373 -425.96059 curveto

 387.93987 -385.62724 336.13612 -333.46324 307.44624 -304.49483 curveto

 278.75638 -275.52643 241.75893 -238.02722 221.29701 -217.17642 curveto

 200.83513 -196.32565 174.50111 -169.2892 159.97113 -154.21684 curveto

 145.44115 -139.14449 126.80273 -119.52951 116.57503 -108.54536 curveto

 106.34734 -97.56123 93.32776 -83.1778 86.25691 -75.05074 curveto

 79.18605 -66.92366 70.32089 -56.15353 65.61317 -49.9711 curveto

 60.90546 -43.78867 55.19974 -35.42249 52.32692 -30.49196 curveto

 49.45409 -25.56143 46.26791 -18.66615 44.9078 -14.43529 curveto

 43.5477 -10.20442 42.52461 -4.00389 42.52408 0.00127 curveto

 42.52356 4.00644 43.54451 10.2016 44.90392 14.4314 curveto

 46.2633 18.66118 49.44934 25.55733 52.32172 30.48676 curveto

 55.19409 35.4162 60.89879 43.77806 65.60605 49.95943 curveto

 70.31331 56.14078 79.17847 66.91142 86.24849 75.03777 curveto

 93.31854 83.16411 106.33643 97.5458 116.56206 108.52853 curveto

 126.78769 119.51123 145.41986 139.12268 159.94777 154.1935 curveto

 174.47568 169.26433 200.8091 196.29965 221.2691 217.14854 curveto

 241.72911 237.99744 278.72345 275.4935 307.40927 304.45784 curveto

 336.09512 333.4222 387.88829 385.5756 428.01666 425.90349 curveto

 468.14502 466.23135 540.55443 538.89801 596.62666 595.11299 curveto

 652.69888 651.328 753.84172 752.65546 832.1462 831.06204 curveto

 910.45067 909.4686 1160.99078 1160.21286 1160.99078 1160.21286 curveto

 pgfstr

 -1161.13805 1160.36015 moveto

 -1161.13805 1160.36015 -910.56299 909.58092 -832.2487 831.16455 curveto

 -753.93442 752.74818 -652.78175 651.41083 -596.70323 595.18956 curveto

 -540.62471 538.96826 -468.2076 466.29393 -428.07373 425.96059 curveto

 -387.93987 385.62724 -336.13612 333.46324 -307.44624 304.49483 curveto

 -278.75638 275.52643 -241.75893 238.02722 -221.29701 217.17642 curveto

 -200.83513 196.32565 -174.50111 169.2892 -159.97113 154.21684 curveto

 -145.44115 139.14449 -126.80273 119.52951 -116.57503 108.54536 curveto

 -106.34734 97.56123 -93.32776 83.1778 -86.25691 75.05074 curveto

 -79.18605 66.92366 -70.32089 56.15353 -65.61317 49.9711 curveto

 -60.90546 43.78867 -55.19974 35.42249 -52.32692 30.49196 curveto

 -49.45409 25.56143 -46.26791 18.66615 -44.9078 14.43529 curveto

 -43.5477 10.20442 -42.52461 4.00389 -42.52408 -0.00127 curveto

 -42.52356 -4.00644 -43.54451 -10.2016 -44.90392 -14.4314 curveto

 -46.2633 -18.66118 -49.44934 -25.55733 -52.32172 -30.48676 curveto

 -55.19409 -35.4162 -60.89879 -43.77806 -65.60605 -49.95943 curveto

 -70.31331 -56.14078 -79.17847 -66.91142 -86.24849 -75.03777 curveto

 -93.31854 -83.16411 -106.33643 -97.5458 -116.56206 -108.52853 curveto

 -126.78769 -119.51123 -145.41986 -139.12268 -159.94777 -154.1935 curveto

 -174.47568 -169.26433 -200.8091 -196.29965 -221.2691 -217.14854 curveto

 -241.72911 -237.99744 -278.72345 -275.4935 -307.40927 -304.45784 curveto

 -336.09512 -333.4222 -387.88829 -385.5756 -428.01666 -425.90349 curveto

 -468.14502 -466.23135 -540.55443 -538.89801 -596.62666 -595.11299
curveto

 -652.69888 -651.328 -753.84172 -752.65546 -832.1462 -831.06204 curveto

 -910.45067 -909.4686 -1160.99078 -1160.21286 -1160.99078 -1160.21286
curveto

 pgfstr

 -1160.36015 1161.13805 moveto

 -1160.36015 1161.13805 -909.58092 910.56299 -831.16455 832.2487 curveto

 -752.74818 753.93442 -651.41083 652.78175 -595.18956 596.70323 curveto

 -538.96826 540.62471 -466.29393 468.2076 -425.96059 428.07373 curveto

 -385.62724 387.93987 -333.46324 336.13612 -304.49483 307.44624 curveto

 -275.52643 278.75638 -238.02722 241.75893 -217.17642 221.29701 curveto

 -196.32565 200.83513 -169.2892 174.50111 -154.21684 159.97113 curveto

 -139.14449 145.44115 -119.52951 126.80273 -108.54536 116.57503 curveto

 -97.56123 106.34734 -83.1778 93.32776 -75.05074 86.25691 curveto

 -66.92366 79.18605 -56.15353 70.32089 -49.9711 65.61317 curveto

 -43.78867 60.90546 -35.42249 55.19974 -30.49196 52.32692 curveto

 -25.56143 49.45409 -18.66615 46.26791 -14.43529 44.9078 curveto

 -10.20442 43.5477 -4.00389 42.52461 0.00127 42.52408 curveto

 4.00644 42.52356 10.2016 43.54451 14.4314 44.90392 curveto

 18.66118 46.2633 25.55733 49.44934 30.48676 52.32172 curveto

 35.4162 55.19409 43.77806 60.89879 49.95943 65.60605 curveto

 56.14078 70.31331 66.91142 79.17847 75.03777 86.24849 curveto

 83.16411 93.31854 97.5458 106.33643 108.52853 116.56206 curveto

 119.51123 126.78769 139.12268 145.41986 154.1935 159.94777 curveto

 169.26433 174.47568 196.29965 200.8091 217.14854 221.2691 curveto

 237.99744 241.72911 275.4935 278.72345 304.45784 307.40927 curveto

 333.4222 336.09512 385.5756 387.88829 425.90349 428.01666 curveto

 466.23135 468.14502 538.89801 540.55443 595.11299 596.62666 curveto

 651.328 652.69888 752.65546 753.84172 831.06204 832.1462 curveto

 909.4686 910.45067 1160.21286 1160.99078 1160.21286 1160.99078 curveto

 pgfstr

 1160.36015 -1161.13805 moveto

 1160.36015 -1161.13805 909.58092 -910.56299 831.16455 -832.2487 curveto

 752.74818 -753.93442 651.41083 -652.78175 595.18956 -596.70323 curveto

 538.96826 -540.62471 466.29393 -468.2076 425.96059 -428.07373 curveto

 385.62724 -387.93987 333.46324 -336.13612 304.49483 -307.44624 curveto

 275.52643 -278.75638 238.02722 -241.75893 217.17642 -221.29701 curveto

 196.32565 -200.83513 169.2892 -174.50111 154.21684 -159.97113 curveto

 139.14449 -145.44115 119.52951 -126.80273 108.54536 -116.57503 curveto

 97.56123 -106.34734 83.1778 -93.32776 75.05074 -86.25691 curveto

 66.92366 -79.18605 56.15353 -70.32089 49.9711 -65.61317 curveto

 43.78867 -60.90546 35.42249 -55.19974 30.49196 -52.32692 curveto

 25.56143 -49.45409 18.66615 -46.26791 14.43529 -44.9078 curveto

 10.20442 -43.5477 4.00389 -42.52461 -0.00127 -42.52408 curveto

 -4.00644 -42.52356 -10.2016 -43.54451 -14.4314 -44.90392 curveto

 -18.66118 -46.2633 -25.55733 -49.44934 -30.48676 -52.32172 curveto

 -35.4162 -55.19409 -43.77806 -60.89879 -49.95943 -65.60605 curveto

 -56.14078 -70.31331 -66.91142 -79.17847 -75.03777 -86.24849 curveto

 -83.16411 -93.31854 -97.5458 -106.33643 -108.52853 -116.56206 curveto

 -119.51123 -126.78769 -139.12268 -145.41986 -154.1935 -159.94777 curveto

 -169.26433 -174.47568 -196.29965 -200.8091 -217.14854 -221.2691 curveto

 -237.99744 -241.72911 -275.4935 -278.72345 -304.45784 -307.40927 curveto

 -333.4222 -336.09512 -385.5756 -387.88829 -425.90349 -428.01666 curveto

 -466.23135 -468.14502 -538.89801 -540.55443 -595.11299 -596.62666
curveto

 -651.328 -652.69888 -752.65546 -753.84172 -831.06204 -832.1462 curveto

 -909.4686 -910.45067 -1160.21286 -1160.99078 -1160.21286 -1160.99078
curveto

 pgfstr

 1741.70677 -1740.54022 moveto

 1741.70677 -1740.54022 1365.84421 -1364.37141 1248.37276 -1246.74683
curveto

 1130.9013 -1129.12227 979.17229 -977.11633 895.05452 -892.78435 curveto

 810.93677 -808.45236 702.31137 -699.44063 642.11063 -638.94055 curveto

 581.90988 -578.44048 504.20427 -500.19449 461.1694 -456.74193 curveto

 418.1345 -413.28937 362.63805 -357.04085 331.9452 -325.76466 curveto

 301.25237 -294.48848 261.75162 -253.93349 239.95671 -231.32497 curveto

 218.16179 -208.71643 190.20415 -179.2943 174.86255 -162.81807 curveto

 159.52094 -146.34187 139.9914 -124.76639 129.38509 -112.57578 curveto

 118.77875 -100.38518 105.48105 -84.2303 98.41946 -74.95665 curveto

 91.3579 -65.683 82.79926 -53.13345 78.49005 -45.73764 curveto

 74.18088 -38.34181 69.40184 -27.99889 67.36171 -21.65262 curveto

 65.32156 -15.30635 63.78693 -6.00575 63.78615 0.00192 curveto

 63.78534 6.00963 65.31683 15.30212 67.35587 21.64677 curveto

 69.39491 27.99142 74.1737 38.33563 78.48225 45.72984 curveto

 82.79082 53.12404 91.34813 65.66711 98.40907 74.93913 curveto

 105.47002 84.21117 118.76767 100.36676 129.37274 112.5563 curveto

 139.9778 124.74583 159.50465 146.31871 174.84308 162.7928 curveto

 190.18153 179.26686 218.1298 208.68376 239.92166 231.28995 curveto

 261.71353 253.89612 301.21371 294.44911 331.90367 325.7225 curveto

 362.59364 356.99588 418.08485 413.24025 461.11359 456.68678 curveto

 504.14233 500.13333 581.83244 578.36311 642.025 638.8549 curveto

 702.21756 699.34671 810.83139 808.34697 894.93968 892.66951 curveto

 979.04797 976.99207 1130.7622 1128.98328 1248.21898 1246.59308 curveto

 1365.67574 1364.20287 1741.48618 1740.31897 1741.48618 1740.31897
curveto

 pgfstr

 -1741.70677 1740.54022 moveto

 -1741.70677 1740.54022 -1365.84421 1364.37141 -1248.37276 1246.74683
curveto

 -1130.9013 1129.12227 -979.17229 977.11633 -895.05452 892.78435 curveto

 -810.93677 808.45236 -702.31137 699.44063 -642.11063 638.94055 curveto

 -581.90988 578.44048 -504.20427 500.19449 -461.1694 456.74193 curveto

 -418.1345 413.28937 -362.63805 357.04085 -331.9452 325.76466 curveto

 -301.25237 294.48848 -261.75162 253.93349 -239.95671 231.32497 curveto

 -218.16179 208.71643 -190.20415 179.2943 -174.86255 162.81807 curveto

 -159.52094 146.34187 -139.9914 124.76639 -129.38509 112.57578 curveto

 -118.77875 100.38518 -105.48105 84.2303 -98.41946 74.95665 curveto

 -91.3579 65.683 -82.79926 53.13345 -78.49005 45.73764 curveto

 -74.18088 38.34181 -69.40184 27.99889 -67.36171 21.65262 curveto

 -65.32156 15.30635 -63.78693 6.00575 -63.78615 -0.00192 curveto

 -63.78534 -6.00963 -65.31683 -15.30212 -67.35587 -21.64677 curveto

 -69.39491 -27.99142 -74.1737 -38.33563 -78.48225 -45.72984 curveto

 -82.79082 -53.12404 -91.34813 -65.66711 -98.40907 -74.93913 curveto

 -105.47002 -84.21117 -118.76767 -100.36676 -129.37274 -112.5563 curveto

 -139.9778 -124.74583 -159.50465 -146.31871 -174.84308 -162.7928 curveto

 -190.18153 -179.26686 -218.1298 -208.68376 -239.92166 -231.28995 curveto

 -261.71353 -253.89612 -301.21371 -294.44911 -331.90367 -325.7225 curveto

 -362.59364 -356.99588 -418.08485 -413.24025 -461.11359 -456.68678
curveto

 -504.14233 -500.13333 -581.83244 -578.36311 -642.025 -638.8549 curveto

 -702.21756 -699.34671 -810.83139 -808.34697 -894.93968 -892.66951
curveto

 -979.04797 -976.99207 -1130.7622 -1128.98328 -1248.21898 -1246.59308
curveto

 -1365.67574 -1364.20287 -1741.48618 -1740.31897 -1741.48618 -1740.31897
curveto

 pgfstr

 -1740.54022 1741.70677 moveto

 -1740.54022 1741.70677 -1364.37141 1365.84421 -1246.74683 1248.37276
curveto

 -1129.12227 1130.9013 -977.11633 979.17229 -892.78435 895.05452 curveto

 -808.45236 810.93677 -699.44063 702.31137 -638.94055 642.11063 curveto

 -578.44048 581.90988 -500.19449 504.20427 -456.74193 461.1694 curveto

 -413.28937 418.1345 -357.04085 362.63805 -325.76466 331.9452 curveto

 -294.48848 301.25237 -253.93349 261.75162 -231.32497 239.95671 curveto

 -208.71643 218.16179 -179.2943 190.20415 -162.81807 174.86255 curveto

 -146.34187 159.52094 -124.76639 139.9914 -112.57578 129.38509 curveto

 -100.38518 118.77875 -84.2303 105.48105 -74.95665 98.41946 curveto

 -65.683 91.3579 -53.13345 82.79926 -45.73764 78.49005 curveto

 -38.34181 74.18088 -27.99889 69.40184 -21.65262 67.36171 curveto

 -15.30635 65.32156 -6.00575 63.78693 0.00192 63.78615 curveto

 6.00963 63.78534 15.30212 65.31683 21.64677 67.35587 curveto

 27.99142 69.39491 38.33563 74.1737 45.72984 78.48225 curveto

 53.12404 82.79082 65.66711 91.34813 74.93913 98.40907 curveto

 84.21117 105.47002 100.36676 118.76767 112.5563 129.37274 curveto

 124.74583 139.9778 146.31871 159.50465 162.7928 174.84308 curveto

 179.26686 190.18153 208.68376 218.1298 231.28995 239.92166 curveto

 253.89612 261.71353 294.44911 301.21371 325.7225 331.90367 curveto

 356.99588 362.59364 413.24025 418.08485 456.68678 461.11359 curveto

 500.13333 504.14233 578.36311 581.83244 638.8549 642.025 curveto

 699.34671 702.21756 808.34697 810.83139 892.66951 894.93968 curveto

 976.99207 979.04797 1128.98328 1130.7622 1246.59308 1248.21898 curveto

 1364.20287 1365.67574 1740.31897 1741.48618 1740.31897 1741.48618
curveto

 pgfstr

 1740.54022 -1741.70677 moveto

 1740.54022 -1741.70677 1364.37141 -1365.84421 1246.74683 -1248.37276
curveto

 1129.12227 -1130.9013 977.11633 -979.17229 892.78435 -895.05452 curveto

 808.45236 -810.93677 699.44063 -702.31137 638.94055 -642.11063 curveto

 578.44048 -581.90988 500.19449 -504.20427 456.74193 -461.1694 curveto

 413.28937 -418.1345 357.04085 -362.63805 325.76466 -331.9452 curveto

 294.48848 -301.25237 253.93349 -261.75162 231.32497 -239.95671 curveto

 208.71643 -218.16179 179.2943 -190.20415 162.81807 -174.86255 curveto

 146.34187 -159.52094 124.76639 -139.9914 112.57578 -129.38509 curveto

 100.38518 -118.77875 84.2303 -105.48105 74.95665 -98.41946 curveto

 65.683 -91.3579 53.13345 -82.79926 45.73764 -78.49005 curveto

 38.34181 -74.18088 27.99889 -69.40184 21.65262 -67.36171 curveto

 15.30635 -65.32156 6.00575 -63.78693 -0.00192 -63.78615 curveto

 -6.00963 -63.78534 -15.30212 -65.31683 -21.64677 -67.35587 curveto

 -27.99142 -69.39491 -38.33563 -74.1737 -45.72984 -78.48225 curveto

 -53.12404 -82.79082 -65.66711 -91.34813 -74.93913 -98.40907 curveto

 -84.21117 -105.47002 -100.36676 -118.76767 -112.5563 -129.37274 curveto

 -124.74583 -139.9778 -146.31871 -159.50465 -162.7928 -174.84308 curveto

 -179.26686 -190.18153 -208.68376 -218.1298 -231.28995 -239.92166 curveto

 -253.89612 -261.71353 -294.44911 -301.21371 -325.7225 -331.90367 curveto

 -356.99588 -362.59364 -413.24025 -418.08485 -456.68678 -461.11359
curveto

 -500.13333 -504.14233 -578.36311 -581.83244 -638.8549 -642.025 curveto

 -699.34671 -702.21756 -808.34697 -810.83139 -892.66951 -894.93968
curveto

 -976.99207 -979.04797 -1128.98328 -1130.7622 -1246.59308 -1248.21898
curveto

 -1364.20287 -1365.67574 -1740.31897 -1741.48618 -1740.31897 -1741.48618
curveto

 pgfstr

 restore

 save

 1.19553 pgfw

 -85.04042 -85.04042 moveto

 85.04042 85.04042 lineto

 pgfstr

 save

 /pgffc{0.6 setgray}def

 save

 /pgffc{0.6 setgray}def

 65.69315 78.20103 moveto

 23.84846 36.35634 lineto

 29.67973 30.52509 lineto

 71.52441 72.36977 lineto

 closepath

 29.67973 30.52509 moveto

 gsave pgffc pgffill grestore newpath

 restore

 save

 [0.7071 0.7071 -0.7071 0.7071 28.44691 31.7579 ] concat

 pgfs


 181 299 a
 /pgfsc{}def/pgffc{}def
 181 299 a 181 299 a
 0 setgray
 181 299 a 274
290 a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 274 290 a Fd(\036)320 290 y
 currentpoint grestore moveto
 320 290 a 305 299 a
Fc(ligh)n(tlik)n(e)597 254 y
 gsave currentpoint currentpoint translate 270 neg rotate neg exch
neg exch translate
 597 254 a Fb(\037)634 254
y
 currentpoint grestore moveto
 634 254 a 181 299 a


 pgfr

 restore

 restore

 restore

 save

 1.19553 pgfw

 85.04042 -85.04042 moveto

 -85.04042 85.04042 lineto

 pgfstr

 save

 /pgffc{0.9 setgray}def

 save

 /pgffc{0.9 setgray}def

 78.20107 -65.69318 moveto

 36.35637 -23.8485 lineto

 30.52512 -29.67976 lineto

 72.3698 -71.52444 lineto

 closepath

 30.52512 -29.67976 moveto

 gsave pgffc pgffill grestore newpath

 restore

 save

 [0.7071 -0.7071 0.7071 0.7071 31.75793 -28.44695 ] concat

 pgfs


 181 299 a
 /pgfsc{}def/pgffc{}def
 181 299 a 181 299 a
 0 setgray
 181
299 a 274 290 a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 274 290 a Fd(\036)320 290 y
 currentpoint grestore moveto
 320 290 a
305 299 a Fc(ligh)n(tlik)n(e)597 254 y
 gsave currentpoint currentpoint translate 270 neg rotate neg exch
neg exch translate
 597 254 a Fb(\037)634
254 y
 currentpoint grestore moveto
 634 254 a 181 299 a


 pgfr

 restore

 restore

 restore

 -93.54433 0.0 moveto

 93.08606 0.0 lineto

 pgfstr

 save

 [1.0 0.0 0.0 1.0 93.08606 0.0 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 97.3796 -2.3485 ] concat

 pgfs


 181 299 a
 0 setgray
 181 299 a Fa(x)181
299 y


 pgfr

 restore

 restore

 0.0 -93.54433 moveto

 0.0 93.08606 lineto

 pgfstr

 save

 [0.0 1.0 -1.0 0.0 0.0 93.08606 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.87 99.50082 ] concat

 pgfs


 181 299 a
 0 setgray
 181 299 a Fa(y)181 299 y


 pgfr

 restore

 restore

 save

 /pgffc{0.6 setgray}def

 save

 /pgffc{0.6 setgray}def

 15.1924 42.65643 -21.32822 56.1841 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -17.6922 61.5636 ] concat

 pgfs


 181 299 a
 /pgfsc{}def/pgffc{}def
 181
299 a 181 299 a
 0 setgray
 181 299 a Fc(spacelik)n(e)181 299 y


 pgfr

 restore

 restore

 save

 /pgffc{0.6 setgray}def

 save

 /pgffc{0.6 setgray}def

 13.44891 14.18109 -7.09055 44.29965 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -3.45453 47.93565 ] concat

 pgfs


 181
299 a
 /pgfsc{}def/pgffc{}def
 181 299 a 181 299 a
 0 setgray
 181 299 a Fc(I)r(I)181 299
y


 pgfr

 restore

 restore

 save

 /pgffc{0.6 setgray}def

 save

 /pgffc{0.6 setgray}def

 15.1924 42.65643 -21.32822 -71.37651 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -17.6922 -65.99701 ] concat

 pgfs


 181 299 a
 /pgfsc{}def/pgffc{}def
 181 299 a 181 299 a
 0 setgray
 181 299 a Fc(spacelik)n(e)181
299 y


 pgfr

 restore

 restore

 save

 /pgffc{0.6 setgray}def

 save

 /pgffc{0.6 setgray}def

 13.44891 17.50871 -8.75435 -83.26094 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -5.11835 -79.62492 ] concat

 pgfs


 181 299 a
 /pgfsc{}def/pgffc{}def
 181 299 a 181 299 a
 0 setgray
 181 299 a Fc(IV)181
299 y


 pgfr

 restore

 restore

 save

 /pgffc{0.9 setgray}def

 save

 /pgffc{0.9 setgray}def

 13.44891 39.02089 23.00975 -6.72446 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 26.64577 -3.08844 ] concat

 pgfs


 181 299 a
 /pgfsc{}def/pgffc{}def
 181 299 a 181 299 a
 0 setgray
 181 299 a Fc(timelik)n(e)181
299 y


 pgfr

 restore

 restore

 save

 /pgffc{0.9 setgray}def

 save

 /pgffc{0.9 setgray}def

 13.44891 10.59857 71.2372 -6.72446 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 74.8732 -3.08844 ] concat

 pgfs


 181 299 a
 /pgfsc{}def/pgffc{}def
 181 299 a 181 299 a
 0 setgray
 181 299 a Fc(I)181
299 y


 pgfr

 restore

 restore

 save

 /pgffc{0.9 setgray}def

 save

 /pgffc{0.9 setgray}def

 13.44891 39.02089 -62.03064 -6.72446 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -58.39464 -3.08844 ] concat

 pgfs


 181 299 a
 /pgfsc{}def/pgffc{}def
 181 299 a 181 299 a
 0 setgray
 181 299 a Fc(timelik)n(e)181
299 y


 pgfr

 restore

 restore

 save

 /pgffc{0.9 setgray}def

 save

 /pgffc{0.9 setgray}def

 13.44891 17.76366 -76.9144 -6.72446 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -73.2784 -3.08844 ] concat

 pgfs


 181 299 a
 /pgfsc{}def/pgffc{}def
 181 299 a 181 299 a
 0 setgray
 181 299 a Fc(I)r(I)r(I)181
299 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: media/cache/mscLiterature-figure3.dvi
%%CreationDate: Wed Aug 25 10:29:57 2021
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 267 242
%%DocumentFonts: LMSans10-Regular LMMathItalic10-Regular
%%+ LMRoman10-Regular LMRoman8-Regular LMMathSymbols10-Regular
%%+ LMMathSymbols8-Regular
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o media/cache/mscLiterature-figure3.ps
%+ media/cache/mscLiterature-figure3.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.08.25:1229
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E086141A4B481B1D085ED61872E8BE023618298C154CA1CBC5A23C2
ABDC7EB93B1287558374ECEBB8152B9043D36537E8FF707C55BB3148059BFE8C
2A2F8B3E9B2B8B1C12E534AE818467322EB65A2F8B46533DFEC5C073C6294F2D
41197996BACA6164963C3AA18EF7AE2BD8E00C40760E980317E83B7F3D7B7C54
0FF26E1F0C47E3EC2566D5E417FFB95075CEA940D3C1E27CD199ED274C06E9C2
A19346E96F8CD9FF5592D53F8D637AD55DB4E8A614936BCF55E219A4545490CD
89C4D25FCDBE778C579AD8766E00F54488E66A5270D0BD393D445A9F6AB6F0F1
857165B635909B6C8722AE936102E279955273B912586308E7B0B7BBC3D5A1F1
C6BFFF540017509334AECE94FAEB1351CC9609D1A99BC3E7CE8477AB8CC458C1
C811A5D08C433C5CAA997750C38954B548A17DEE023D1C05FA0E3F32917BC947
40B4F4801CE825DB3309B835D93D76B589F590D80E1DC8898EF0D316ADDAE322
7B7039F8ED
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A91D87663136EA17BB18715AA052BED594CE20910697A4DCD82C
553CBF42550ED97390766B1DF694CCC628695E1E6F0720F705FB727B15C6CAEE
EAC922B8F093E59FD1B1902FE450DAFAD952EA0A98B0686F3039CAF83588CC3C
30ECDDE05B7DA9A9E75D8DE747CFEE2E831CE2124CBC71B927051F7FB892BC42
936A1C53B8DB13075402BD4080216A226636DF2CAB859F67430D8CCE60A1EF18
205ED93EF4EB608B037B88D3CC7FFDC5252F691BF753FC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFBB609F1F3488FCD40BC240C42122202A26AE30
EDCB46ED7952582054843C0C6E31BA266D82C8DADDFD318AA828428B17B91244
B5FFC30C105797DA893B5393E9EE1C319498E2B92C9CF390791BF3F6DCDA5231
16D64255F26B3D26D7F70072016879C1CA4E377D77797A32DB18676BA8294533
29D58214B161282982CE616442096DED79278023E56BEEA38DB7DF7AC21D9B88
457317ED0F6CF9FF5A2907997EB6A04DA6593C846B1FB75433B24AF1F6CE1270
429EA58791874E4246C0A7321AE831930F08F586A85120A40EF09A72B1959517
A0630A94699E2A1BD96AA1B5466D742363F38ADF7937A89EE47EAF9B93FAE85E
2F884193E1D5FDC28A8A7F6FA6EC89007816A208960055A88EB090534CD23A88
1E6D86F82C0A23BD0A770F19A5292DCD4C30E8928CDB1375A67FFC936BAD975A
9DCFB0A4BE6947FC780F2D4ABE4714DC4CA2CD2AF407F6AAD2DE8B745EA3CF04
14890044719DE09F3F8A3EFCF2FE109A30D87414ABA2676B03B3060A587D0E46
716D81039491DB446916FA5F10B5FF1AE7A311C6FA52E9323191F7B83CB246CD
2E4BD540172263C8D807EBDEFBB74E9894BF0EC793699F0E68263B1878CADE0E
E48913BB0C4CB09F2124ED1AD4B59F7915FA254CE192150A06A437F194A50EEB
0A766C689FFC8EDB02B3CDA24BE5B94F4D4C0FAB79CD0D3E7F890894C99AD3E6
B3AB0CEC0E6C4295F8FF87E07BAC02D3469A37176FFBCBE1C6CB58A383EAAEA0
F49A020318D51FD579661F3E2FAA54D811386573C91A067187E223CB9AD2C26C
FB2671B72D15270CD8CB1D59CA262E0355E991C525AE6E8CCDE226F4902BF46D
68C5D0FD284D7A14817DA0640D7DB680E79F9029FF9F79655353B69F7F9713F5
21697F75F4A0116546A9D962C22A4647AC1D5FB8AEBC6481A94C6ED5EAD25505
00011CC1B5A95933E7854EAD8F2C531DC518453ADF92C19BBBA6B2A5A6D96F9F
2221E85020131163F32645F282EB3A44D8C1AFEAB666552ACE170271D4F4AFF8
43079198D8F05901C897288256E71AD9A18A5544EC317B4247FC0D40A2C3CD57
E796482600AA5E73A63B568D1B97E405C045C305C9970551CE63E45D74F8B75C
95A3F96517CFF904BA2676748644105038841988E8C8182BA89C9BEFCD87DB55
AA5E0AD1D2C398A278059ECF219F339C39CF69081E1EB8FE48F3E078103BD876
70D225C2850EA487E561E61A161ED1D578B1F169DD8A03EFF3CE10683BEA98EB
2B7C1F4E93E0147DBA1946FF5CD5A93E1EF62EEA51B201D3B14BF477572A461E
B99B4C0C0FE29E6DD239D2F234D71DABD43C445ED57C494DD907E1E6DCAE729D
19A6F9ED2ED65CE7FFB7B8DC087429A3D69116B933F366F7930FEC7365662AB6
CFFF3022D1FFC91F6F2C6B28808CEB9BD6ED03B43FFE970ED2529C5E0870471B
65CEA8DB2308752A39C9AE5937EC7F21EFAFB2A43CE2B3928163793F568FD208
2183D51A95456A761655D006138CEA62A0ADA87D3D4B8954D01DDC88746908ED
B625B9FC645A71DEFD070173D7AF2FFFDF728B7EB14228DDDDCFF7E9BF9AF688
1F745EC71298D454AD31AB998F5821BBB633126AC26EA984A4660F22D3905959
11A900FED030F69500C16AEFE3A6FB08B00FEAF1D31D9470ACE414E44A1BB675
8AB06E34EF8E87528FE146C23041CE57C982B9EB2736D453D66E3EAD617C93F4
31708ECB7574708B95C16BC0ACB213112B9E6B2763E75FACD64EE28807FA1928
BBB2E6C2F219AAD63568B6B2F3D43724ECE4443993EE94A4B4016F462FEA63BD
490E187D5560A2C81AE79DF8CA515C323A63498CF6A5082FA79D34319957690C
F7CD568224E9F66B93EF3B53FBE4E1F32E3F90B51313D7430BE1825C90D88DF4
0E72A43941A65F73AED95051BD333C988C2585BBD10198214BA25C78CB3BED5E
7AD9383F8701213707958227A3F6E419742C9B7B387994DD94EBC3599E7195F5
FA120FDB681FF0181501606A23750D6CCF87F65670B25A5940553419BD119D07
F29C6889396A4489D046C320F4F438E85B8E1227FBD0ACFFB73441EE4F938CF7
199F8A8EC00C8BD6EB20AB66BC1FABC48E4ABE10D4257269E620CD953D5133D1
C98E13B084100B7D9AEBF3C073C8C79B30EA5D28A68CC2FA966F0EE721CBD633
D6D668F34764F90B5E8A643C8CA2B2F12BBDECD47B6150B5655CCF81257BB251
6467D0BC24C0033AEC86FB987B713930C957C632FC8F5816F21F6926B6C0914B
FCE14913B22B6848FEFA6107790BE7B3C7F55B3BE38988F36222BBAE11B6FBA2
9AE0A974673C2867BCC64F0A8FE98AD94A97AEDADF621368DD7980ED84CCACE0
3B34DF5EBB3885DD636E8617400D051B27DBC4514A567CDF9FF87DFBC5B77ED1
58C0EF082D34E9BAE83A478F2D9DB1F9B65E818E39285BCDB6D08747FBC52D61
F311C2EE3444CC6154FCFFAACE818BFCDDB16D6DA12F60EA605290CC0000476C
0235F3CD2DCA6DE4D9D40638251FE20A5C8EFD39DA710A4716E1706C9A97BED4
C33668C231EF31A4D5750105FEB6F0C8588A257B163EB95BFD4A92564CDFDF06
B73EED893D4804AEB03FEF3B12D9AE0D47CF5332716FA25C28A2B94219A75D70
CC55783504075A5F0BFED5601BB3973AE413955F0DD137D42B65BD9AD563ADC7
E1A2C37A3113C6F89B4DBC3027B3CAF2C6EF0A5000F53914F0800E33B06E3DF0
CA28D9626A7DEEE92DF84CF59672E3A0080CF4DFCACEE5513EAF3E903BAB3879
0E8721E8C3C52DE79214EEEDB424D767D0C64F1EBEC99C7740FED61F219538D8
185042F86BB762F723CDA26989C4C67DAF6DD7825A6CBD56048BE3943949B1CC
8EADA4325C44AC6F52BDDE513987D5ED51662BDADADD45882CBC0F420209A2ED
5CD01ACC7E1D0401A7FCD4DD0A6F4621F4C29048731516E16076F3482F71DC66
93DA281940D45D3F9B39005FE49A79CE949CEDB65B196F50EDE5D2768687CC47
1A1EC7186D318D849C05BB8BCD0EC8659948F84008F4624A4F41B8DDA112B42F
04B0675063A2B3BD3FA2B3E0E04ED9832582F5515AF7EFECB22525A6012729A4
006203BC8A46C7A6A60DA0F66A1A066E0025917D1BDB7E9E37AD935833B94133
FD59DA8617DC87B4B835C7DE472E783CF2984139C440B18BAAD8E361ECEA4E7D
DD253666AA024FFA986DDF098E47454A062B5BB10DAE3331C3E3C1B56AB32843
5C9964D369F0A58D8467322EB65A2F8BC6050605CB87F380D794E6A311C6FA52
E9323191F7B83CB246CD2E4BD54017226B643EBB1C0E4AA0EA12349BEC2C0217
289E81B36EEF2749586297064AA5C2EADC5E6EF258AB1B3B5FDEC3BF37DCEBFE
48DCB5DC6BAA38B43805207BE1887DC76027C69300A7BCA663C4328967C977B4
30B63CE6CDFE50A654778BF2A360A33A473E6D63D300577B2C99A5F45D0B5591
2308234FC559DD1F7D85A7CD3BB80421FA781D930DA82F41FA8B6DF5F95734D8
735E4A1934500BD01EDCE981A8CBB0DCE6D06FCC2E3AD7BB240DE7DFBD1F17FF
DDEC2782BEC3FA70A36E6F2E812C23119D75A47EBCE147EA06772992CC438932
91BDCEA2DBB162B85E7721E93CFCA0D4B69BDA5F6825733B48FADB06F9C8BEB8
E158529741F24A479F827532A008C4373425A53658E3D5CA68AAE9B5ED66F92F
3918E329298D9F6293E8614966D0ADE9CB5DA1D8CFD55EB82E0C85A089269EDD
6833F4E48E3B9BCF78C8BF7556BF51AAB5AD4B903096F164D60CA0CE7BDEB2E8
0D58B526E647AB7936C6997E133DC99D407B0D2E407E03DD4B3C95AC14504665
A6A8D05345803B3A0055EBA91893597A866F289B75B6C623DDC0E21F8746CBAD
EE0BAA08C4A5A3C3F3998CD3328F0DC964B2466AB73BF735DE357816B8A49779
7F6672F4FB24AEFF9D9806E15D1DFB6E3E5386A1D75068986D021414BCA5F1E5
BABDC5FCEE3EB40454892CE429C3ECA8635B7A0132C1054A7EE25762D02DFA00
29231EE1E3133136F8BEEB1C994238F3B603EA8489EF99E770EED78A968F1DC4
B1BDB357EBAB1A189F424831F6578541FB21A36E4C6CB52FD09F038D0ED98EF8
67646E3844ED0AFCAF62167196EEAAAFC3D114E7F327220DC330236F7133F753
DEF24A153EE4742916BEAE0D21F24A3E4D146DEBD198727C6E5A340FEE679C25
24FA0A0192DBC4C4BF0DFE03973FF4765BAD2311EB21056C4F23EE42FCF25B6F
007D2D8BF0871F390A0F59258E4C768AC0134A614BFB94C297F9E1876E1B2073
481EAB5035A77F9B6CC859CEA88CCE5E830DD429C6AEFCBFE9447A13D00FA3D6
E666B4AE09D366C03E8B807AB38A8553E4B5345123312D43AD2E83693825C679
F654F27464C3E04E4B15FA6FE9D0EF916A19C85B1E1B78FB92A8A32F408CD920
8A66A14DD2BDC5FB5E00308AE28AFCCCDE87BF0D9DED320981295BECA7E855C9
D5FE5DF0E2B12476968B3C810EF05B694C7382F8731D9AA669A78FDC06810D5E
546CD334D3DA9FE95DA028C1DC1FD13D5DE9B840FDD96372799EBF4C9FC600AC
EAEFC2E3B80761EF5695001EC347713986999A6BF44052A99A861E14FB8153C7
49EF0DE6EC83878CE9C3969A9F8AA643AA958B11ED879178611E0E2FAAFDF0A1
3E39C647B1160919C81067D75442072E34982759C289C8FAD39D896A60017B4E
5A7B06FF4D1360CDDCEDD19C2E11233BB52698068476B55C10426C6B620BF189
0A7406C5CF22F440BB8106043B89324AFE19A881799DEA617DF96B4DF17127D5
844580135B616405F42758BDD2C8CC2A8C9771234506BEF22737891913D14DB3
66F3BECEB3445CB1603011ECA7833E0E3E9578846685909845C2A0B991A76635
3911FD032BE7E564473F851F794504BF7C70E330B61842EF56F134AB25DCAD2B
D08AE61E233FE6F94A87F4647D674AEEC41A3E496FDEC2C0A1F90C1F4FF44D15
BF4FE23DFDA51D40DD9BF5DDD3CB175F3E1E61294DD9601006F8ECC930DEECC7
2781066085C13AF52E30A9669B2414EED3E50445B7E8B881265EF41110CB02E0
2E83E737091B05A3BAA49FCAE6E32DC9D1AED22C2EAE8DD4267FE9EB63076703
B29D8D4DBEBE215533641C03B7BE8C7B7156D2E5D82C74EFC80E31B39CE0EAE6
322687A068BF76B742AFC3A23E150839A9654E8B6B79FB427D7FDE4323899C63
7CC86D15F14C4B08FC9AAF420CCBDF9A9636BA68231730C7F28137AC3A0D90E7
81E785AA189CE07DFCAE1DA5FBE871D8035F777CF210384EFC6165DE94D6FC7B
8B746C4B214A485F9CE57642F42A0329F3AE9A259683BA62A5132CF549382EFA
09C29290665D41004EAAD1B895B159E2C905459D2697B2819F3B1BE771D8DE36
946FBFC4D184CB3471F958F98B5D41193311255A11B8FDD312B5CBFC4A916A6C
DB708E37926B072877F5BD15A44362A10F1795E0780C412A606D33C0739B890D
9B3EE1860D5F11A241C4889FC8C0F634CABABB7B430C4AD6E491C01211B9BBC1
212013A533B501A088CBF25D6CB180390D43CF505B0C6D1212CCC7F398B49BA1
34AC18C9B29574AA4FC9027AB682AF79E8EAC789CC0B080CBE539F7AEAFF7D7F
64A454ABED6233E9787D1CB2FE03262725A0904BCB5EA7C17A39552A1F26283F
54A8A2F029D04511C79165B5315320DC3DA94674E8E633B1951B51BAEEFEE731
49E7BD8C20B7796749FD662131D12A881DBC60E48CCFD9E1AC3BDDF3FB69A81F
2D36111B4186BED6A5EF82D27AC66A2F6F91819A23E4A229EC84ADEEB4A2FF37
B92CE6C953A91853B38E12AADEF8F3E4852D894A15F60EA95A74CA355A6197A5
A51C16D88F95054DC7B965D9AE82D16F0DDFA0306B260C5CD4D9A58341D9D58A
4E7668ED6054923188627F7C9D623037D39D267934B346BF63C8CFC8E9F73320
4FA4F2D087E6F867ACAB282F0E245291E60AA9A4EE1AE4B05DE49C03FB720C95
8EBF55EC09503BF1AFD89227A574BD8D6F6283BF75EE351715605A9EE21CF836
572E2BFFDD9A56E20DB4D6367956ACA1339E777504775773E5546629028DCA31
55ACE0D8E354195A2563759DFE0183C8D67B449516EEB4EB90FB0BEF17F7C10D
58787200C749BA0DFA1F5945DB13A9A6181DE0670915C269B4E77CB4ED988F59
3D535D4100055D90094EB79BF159A65B012A2EACFC2FD63A2047C40D188F4E30
4C4610FA7CCCF0512FDD24CB36B402293FB92453683899ECE7EC3DDFF5B0B8CC
BF3D9CFF45C6FE8E3C283C02A4655C579BF21B53D1FD37996C6B4F46DA2E708A
CC998C1BB5EDE3A45AB78996EB94C76AC6F4A0044C3BCE04556B6A6F524CDA3E
22965E2FA5AB9D9F9964844483F0E0C6017580365599DD3021C36FDEB1A39972
2233B220056CFAACA8C087B4C0BCC2AAE1F10C0147775505F87BDCC02101AFF3
8BA1917A296C2BA33BCB5CDFE91A4647903661FDCE35099B7A551426924C0227
80794EA774CAD2ECA4581BD58ADB6AB154DAE79625D062852F9EF2C32B53258B
6BF4A4A856647C3240A3B33DA15021AF9FB97DE82874FE58772E82FEE206948B
858C72DEC59D297CC24DB89EC76930D071A679EDCE79065760658DF839B7D55F
3F5B546FBE66063A676691C47B0155CF1C7B04436F5076398F44159AA77D2794
F0C75D9AE60CDF648F9677A2701944FEE0E51FD5BEB501509898B8C4530A1BE5
182B4F95B4988A9F5E686E35792989DFCBF68761F29435C7425B34649283416D
371874998B99CD18F7391102102F0AFA75DD8A68E88EE24ED429A81C686EA73C
A41B1667D83AD9378CA55306C8D08B09476F199FD07FA0EAA53F7F06622E1758
A5B6C86E44D4529018CCE8DAEC14FC13ECF3F5FF91497ED226325921CA194AB6
40AE74B8D924E48E8EEA7BAB1F7EF9D23EC42A02DFBD253E4F8EBA8FA68830E6
BD9979FD51C8355F6261BE5A9574D5351815A959020591659CF35B170D16656B
8D61E25B73FD1A9E54BADE8F858094DF755F2C35F72055766F3C65AFCA94D0E8
4C7FC39E73EAE0E4C162E24D15C0BBFED0EAFDFAE2C502881246F7254CB4F3A0
D2812548510A255027D81C4C17B989618FAD618572989299B985A5FCC35A8891
C300CCF87A6C602AE0AA7A28AE4E577EE64AA9725A015C1E0CA2644D426C007E
5682808AEE3BB7AB14D465CB0E4F622144E415EA54E08AF6BB995CB64D19B2D5
0C3CDB4E43E6D9185F37A0B20E81810874ADBE880B8E044E4662EF0AF221544D
E5DDC61DFF9129D43D1A3EB7D6F68685D43D11A7B6645971E03E3887A7D1E170
C47AE4059FE85CABBB066949A02C4E306E30A43C5D42182A2087CC39A4D9B855
AA0BC6B2582F1D082049D5A06F34DE2335626096EA26D57B94A928E6FD16F11F
AFD503506D77732DAED9B41D4795B74CF2912DCA278A3549585E94245D9E7E63
EB45F0D1798271EFFC92608B289F60FFF8C732825DA065D7C95992607C9FEDFF
E81393DA14560C1643CDFA74C575BAA216CEE3C693C36E0BF4740CFD75F6A53A
A50D881746BE617201E30280B1A73996DAEF61BAB889712EB1595CA37FF93289
176FD0505F551F95DDE3615B9F1E6134534A315CF6317CF3B593A0787ACF5331
99348D11730EFF7C25DD5ACE31A3B08B3C2A698E4F95DAE539B5E403A0771421
FBBCAB41D5765620314119629F3C11947884D1E3DD1A89769F0E8DC56C55084E
E590D2BD58FD9784BCDCC3D498B5E8AF0776A74A77D10C6C1DFC91DE62C1AE05
CF60692C84EBEA3D477C0433ADAD9AA04C4B6A9E56344507DFC3F6671D8C2968
A3E83FC00043F27F1E73B67016A5054B244923BE99C97D290292DA35B180B5A4
F17FEAB6088FDE32A79937141E27811C6B33694B3F988AB0C9ED06E7DA31CBFF
72C7EB5AEBA5C7A3D9BDDCD1ABD7F3AE4C917959CBDD30F5BAB2D6F3B11B98A4
3210DDE46536EAEAFBB904C0608395A9C2BA9A03945E029527E917F17E502D5C
DBBFAC0581982D7EF27B675C6B14C5440F3DD5A1846D9AC309B9E8CB4472C20F
42917BA4B020DB0FBFDF87F6013B8ABE63165ABA15545146ED2FCB21B0345A1F
37CBF48F1EA6472B994806D02F28988112405F80F2B8B218A6C042AC6847F2B3
291D30D4EEB934A0173199B032DE4998B1B1164EB30AE3737AC094373F1D2168
8137CE3BFD9E69AC60D04886D1063742D723EB1C06B948EE803031FC6D236BA4
7C5C52A83C1AAAD52E4279CEDF3E4E13CB4A80E94B9F75FA7DF1AAD0F96B2F12
90E8451EBBAF666407756E9A8493C6DC65A7C3623AF7619795608C99E157FD3F
3192252514A465CA900C0A13EE814AF701BED939E2F054666E71E5317A6E3CF5
32C4004E60ACD7801648A2ACA6D4B8ABDA4D671F194C4A1DC79F2A5097712F35
79E050C9FEA8E1EF4F3252FD330D163CF0F40F2C296FBCB5FEEBABCD6C455A13
9D565F8CE5847F75CEF39020F0544340C3B4C147A3CA6B939B4B19E81AB17115
0A50ABDAA8951194774A8B20702D160C3450D2ED635B4B8ECE515BE82B5BE1AD
90B13720D22930123109A3310A85275A7DA9E0E1336F13F8526C6BBFF2B1DB7C
03F4F77A11856B763454BD5F697F683D35603984D60BA78A94E120FF8B0AB25D
953DAEBE2006856F96C8893E35CD741B8F28EE7DB9F2761DD12FB60ADA0247C9
FB6C65754B6177A0DEC633BC444468AE738011EF30BF68A42F4C4A7FCA980184
A9366A77EB2FA0E1CC2465A94805A4E84CC1FC6577880BEFBFF5820772B44C17
1B4AF5A3C4CCFA99AFFE71134457105F3B8D3B7E33F4A6CAA53F52C16313FDE2
A91445EF7A5754713BEC6CFBE152CF0FA5C403CED5991EAFF6938C0E68D4AFBF
E14B9497864D9B5D4764FD4038BA75602EBBDE8EE1EFC998E63FA1B07DB02B54
1FC918AF87D5282D0D7BC2E56A5C60833A338DD19BA6DBBC7DEE251F5A950D0F
62F276A9161DC1DE8DB644515DD6C338BF9ADD21A60C14BF696A8E3E169D4A28
274D7B30DD69E1B2C3CA70F2F79FA29543F526B87F2EBC4DACAFE9339A0097A0
41E1401179A005AD67E59BA123D685E103F25E1F42FFDA16D4A3B4645ECC5F4F
79B38A5D350AAA08318765F1F8406A7234AB0C0FB1B1853255DEBAB6116D53BF
50D681063EA6A439F193E4F1D40EBB23114B9CDF03235CC96E832A27D6D3F9F1
E0D7C970AA83D699485A7E03E71DA50FB2096EE5DAC923CBD54A4B5390076A43
C82C91B982B19D7AA8B61516F4B80C393995AB14CD756C4CA37202E05E0BFE9B
820605676678DB1D4D77D17EAA35BD7DEF5A54D050720CEB18CF8FEB55EDE2B2
B915DCA5D50A7E3512B325253FEEE5F1AF4106F7B81B499E5B17378423822893
F71FB98D8F5A96BA2DA0F3D2CAE3F2C028C5EF249DA376F0F2299767C8C84FC9
71D86F6321DF5D41BDE10B57314C784BEE0664862731D40F4BBBA3557362AD0A
39F29E7E10E5CB785A14D37DCB6631D3AF2D287EFA3B3678FD6C1504519FA7C5
D558D47FD0D0331085614FB069CA8D80059115F5EA8F736224120CC5E432226F
BD4681AFB83A9E85CE3D074084FC5F88DC7ABF2F42F1418BDFAB8210BA22E315
9015756223855834352478CB917D70F1B0AF793AF5AC6FA28046364D9C8E8A7E
042AA371E061C368E357E57A8A81BBBAC38A2A054B57FED270E9686C074CDB09
7FE395C23C0CE33E16D59F60B06D751039011DB94742CFAA513B6861828F6251
F206B9131C951D1ED4364A9CCE52D8E309B098D1AB782C8AA31DB9E1DB1E4351
30296CEBF3A1A872D17AFBBC17A93D71F3A3D321500914B57387B807F11D2A73
FC722BD5C566036CFAC5397F2A5132D91253DBE9B37E12F0638352EAE8A9C563
46AACFAD4043380FA8E04B88C9EEEB2DB80D4D07B52CE914D9DADF80E0737B34
D0F1CF6AA03DADF006837A2C5E235B9EEB4EB84B5940C11EE1321603E2DA27AA
DBAE9B6728F479708D4C043017B3ED93E4CB52AE96BA956EB6F385D209153FEB
ED81AFB3701D7164E4100F34CB2012DCA626F8A2147DF0662A02083516551E7B
DF1BFB372B7CCBB9782678A2638403851DE425A8AF6BA29A2283BAFEC9A82E30
AAA702BE0FBC2D58E357E9AA1D3EEB75A4D20EB11412D1012AA475556665128B
99C20340131CBE57A799DC6042F339AB93A7432453B6534ABB056717FD13D4FC
5220E86C5E9ADFD6664348C7A8ADBA58C7ECA2BE88D881CC03929299117F82FE
4F8D74710B5A1ABF12EFAAB723A7C816D47A9B3FDFA93E8C92F7360ABA1DF90B
ED14A3164DA8B2883B0B2CA52A8B48F33D023CA3DB9FAE17B29A59D2C328CC6D
94A70E8C4DDA6FE92B0E407DC950C01E31D915C6626F6E421543DC7754F30100
2328111B4DF5E4EBC8057FBBA562518988C9DB46F8A1993B5020F8574CE0C8B6
FCE43E382AA3BBE0CD0A5D948BA3817DE8E54F71FAC584426F531F4A3F9C4D9F
7586758AAE0DB68A07DEF72DE86D4041A1AF04BBE7FC989088EDA3A1565DAD1C
08E402BD6CF4EC99EC3CF150B3C1C176E6909031B3B4493AF8F6443208E5BAA9
109563449350CD6DE913053B7A675D0F0519B5B7F5A9342D5980832196D27869
EE01D169FC58F743CD16C8F0A75D1E4B943D89D63966FC98D9CA32B97933842A
14BDCE8D5B9B5CCE6FFD54A41EF225416BAEC7C61A9DD8A5806E380E2E7FFE93
82A570237B4D891245EB3074E0D4D241216886E27FC021114A82B2810D3098D7
FE2935E62F9E5AD7E5031793A4E70219B6569340B59671BD93C1554D2D2EB448
9007C555A6A08B437AFCF723A8F721B06626CAC2B2F371B1559D8BEB245FFAA7
955250F08E8F5B13EB0C00D0E11B189E5EFC007B0F2CAFEFDCBD00F3FE84F1E9
D748B724F859C717553B6E62097C0A408651B00C7F85E67FC314037C7E13F3D1
46873CB848F7B16C9B416C0F7B5550CF4F6DA9B7EECD4C294E2AFDD9CFD89C00
F6D53F203F331602FE0FC138EDEFF078A89DCEB9541E0F87682AB0267EBB3BDA
CCEBD717AF3271DD9D078A574C3C3E113F7F0D00B0C41F617D1E75F9FFBAC639
19E605EF94D0D2D096B734CE3721C371C213B6AFA0E739FCABC582C832960710
8080263EB92C9DF6DAEBA5C2E434FE09BD48225E110640A81C7C151D784EF671
B669370372D67B96DEF8498BCC17589A700E889B5EDFA8FF2D9ACA07215FA15E
294C42865BCF549350CB0F18A3BAE8606CFFCF2B7B6B3CE509264EE2FF75C9CE
88D17D4C31195D4B686DA3FBFC65D4012B3FEAB06663D976949A4A1003E4EC29
A27DED0A252F40A609F513EE630DB0A4DEEB11257AB2DF361B2AF95849F3AF9E
42B663611349146803C99257A9A09A3BD8FE0C4D070656DA891F6B6C2FB62737
22074E8876405E2368CF3BC65040648818172CC78055E1B39E04D2869D597789
99DAD55652CF8B3D7C01395D3BF0599B1E4A6AD4E0C2BAB7AA375883C30B8494
03F5A1B428B4A87D42F5F09A321BED127C7018C59997C1A49B700AEFE3F8CD40
87B0766575358EC8570A242BBDA8D91896E73AFC4DA03A52EEFD6EC22A739146
52234D15738C62BBA2C6AD31A0D44B1E9FD3E9E8CFBC344FC88E6559EE447E99
03ECAEC93D5E9D3E18F4A0727733CEE0F562A8FE056259BFC7302C7B37A24544
943A95910C458DCE016F1773387D9D4D851DA35FBF5CA18BAA7455C8AC6E9BC0
C1E5143A5DCA16BBC20A5316F9F40EF02DF726049E86265687368420C97F3A41
5D53BCD1CEFB38C0557EFE61648E12A39638FB42AE591FE504A2614EB98D5035
FA46F719B503CE4B2E2D3463B468EA8934148D4BE1C7AF9702CA13B36325FDD9
0110F1B8A03CE1002D027374A41C9AE494AA74D5DA4F158E624C2437B781640C
69348DE5BC5F443EC06A1BBE8E6481A48A9E0D040A0A4437D82A7BA66FA0E5B4
D0F5D4AF7B046D11F490F1DF3F8C21D9CC04E187BE53F8FED4F33633BA03A5B8
EE51FC4F6A4CDF352FDFD48E76C5737253FB5D2AE2662E2BA4F9908402DEF9AA
CE7BD76B3D4A244E3AC7442DBAE16BEAB2EF6A77F16BBB6E90FDD676A2215FF1
19532683B879671A87722307DD8BE84F65F443B78CC753844884422EF7459DC1
146671DB157C352CDFA1107C467ECF6233C87A1B4699D58D1C7E4B5CC4377968
13362232B3A8AE43F782C9C7F3EAAB68393918581E5D402BD94D576C05FE2AFA
B5E9F03DCF912D60BA2001A2D092A40A04AA69A5BA421F382275F0C4E4791A63
71735299F980EE45721D0F6D8C3A1D8CDB3A7574A94AA0157967D88836182FAC
8B5786F0FC1A21E399530449FAB1495E0E3D51528E6E2C07E9AD472351050F94
2D4323A5ED11DE2E45AC7A467CB73043A75E693DFAA0BF9F9BA10DED049949F2
69BFD4C2DA659C00B09364F5192ED3D272734367FFA1CFBA126F0B20513119A8
44E6A8FB598FE53D030925EB04A439D43635254CFF36C827155FC7F5C670365A
3978A3833636F8B33B0C66ED837176BEE6E6A8F6B8B8F275DDC0ABF2D6DBFBAE
B8990A9BF4371C933E0BD0FD0CC2C3FAAC13F915F25CD37A9CC3103B3D14CA28
29BC40DFC0FAAD37018CCA129A4897876302C02AD8911D9175447C15B671D342
FB4551E47E0FCE419E22848165598080FF1AC67983B2E5C13CAAC355E995A962
D99270B213B77B654FA8C6FAE137AB0AEA1045EA8FC0DE95A72ACD640B08B8D5
86177DB014AB4D745196AAF73F06386467CFA865B49FAFAEE9506D2F10DEE673
E177D6279DC60D5AB417883A321FB7D218D63E37114B23575DA9A6AD10ED8A77
93FD6BCE759F8302447FB269D6C55924D4100D53435F46538BA5C30C185DDB06
A284AA5034CA2FF24F6426D134C1090F8CBFBE01DB40AF670FDC930ACE64A098
1BA264E7B739C4088A25F551F578189A3285E26AE3D478DFDC64095D442198D9
D530581F1C40D357CA59601EE32B2425551E7F03D504F27BF98F90DBC75FB4D7
E5354074074C255686B775090A16F6936C9A0AC65957DD1AAC35E4F77F9EF91F
FC9F8D4F2B7C46FFFCF9F11D18C020C2C04DFC9F36C8253C4346DBC11A9D851D
A2FF6A2BCB48B923012E45D9F0EE55BA61EFAC69501F1BC31A19DB87C73771A6
CED0715EFF43475A0FD680DDA3FB99DBAD092BB709FCF1D2F42F6F1D7FAAE03E
A53CB5D34A0533C3038B97DE960896B497E6EDD4B4ED1204D5C0DC2D83EE0CC8
AAC15778A233397B42D6F3E389C51F07A7FC26000F352EE7FCB385E722B3445F
20AE69B185177A0C3635D75B805B4F3426C6C6E12E081339CDBD4553BB61F886
966601C53826AE17074880519DE36B7F98AA9D0ADA37E382B549903534CC577F
BE9D2FBC52DDC19B7AC998974AD599597E5FA7ACCCE3B2D0A3946680DFF89ABD
230FB37711C0E606B1CD01AF00122F9A948F55A8E36DFE616FC43482D75DAE9C
9CC68C6C3135387F38203666F9F7A94394FD517973078F27D6695A95B4313BAF
9155FD81A22DE96084D7181957F70B74CB84912E406A2467A2E8357A7EE7E75B
3B9BA6FD74F2A2086B7864D4902CE55B9EC1DA6680EC73D7A0FF7A3010CCC117
0C4E39917EA3055C85D171C0378299712D1177AA7469F474796763FB6FE9ED85
1FBC93DD94BC03CF89CA2C3706B40CB2B6E400BEF294AD0BE52E0885AC6834AA
B075BD25F7D00318790443228D5891C3C32EB9D88187D73526A15E071A3AEC9E
E2CFAD51447F0D660BF7CFF7EBC4AAE2A89A861E14FB8153C749EF0DE6EC8387
8CE9C3969F81B45B9A4F63E82747CBB98970AD3D2AD2C8B193113DB2DC8471D4
98B5988E64D3F957588B2E07F07D84F8FCC7E6D882621F41648BB24DFCC97771
5E91B28FB3DC5C388D100C3CF0C05C0E30F0B3C40E640856403246955C902895
54E7D9855E01803A2E4A4A44D467EB26AD61D0E3D77FD9F40D12C0D6DDD6E89A
3BA6468B6322EF1ED98E1FA6C1C3A5B210E9C2146C0797AE355583D824B2BE94
B1BAF6C01409650E70010C2E00EF49B371BB12C5CF61EF89F79D44C614960653
34A06143D6FA33885C9B9ABB33A1539967C49407FF5E0D54358CA6C8C48F7238
12981EF8EDC3A3B494F3809BC20E03E4DA37DA7FABD00AA15542FC340CB11389
C30786897E49A974E9026CE5A9CBD910A9A02F36C06FA7B26238CF55340B24BB
B424F4EB68B4883453C36014EF066419924D265AB8A16663EE2EA9606B83F776
78B642E1E8A32C268DC6FE77C016E43A552AEA1F90A4930F07F492EDC0148725
808E9CA43514444AAAD46FF165FE342BBCBF05B837E703278B20260F2B190BEA
781C5DC9096EA7552AB60D7A00A2D1EE32AB63231350953FACECFD82FBD82191
9E3542B33690D8F8DAA460FE8C33947B6536F3963061549BFFDB8444B7071AD3
CC7E89BA81EE6E462B186BDFDB94FA42FBD894318DB980B95A2F77EC3E049D52
7B3C51560442A175D0D4355AF506D88E32379E2C8F02E1379F36DB5250CBB731
36DCE1486937FE85441BC8E861EB348CDF8229A2ACD4DE21E46EDA743CE5D7BC
A65AE29C4F00F2FB20F2CFCDF6472686B200B23FCE6AC13FAE056EA1B304C5FA
7005501808E50151C166892AA2415303D2ABD61EAD6A435EE297487AA4432468
CF994F92CBD51443ED5564F72229E7512B667AC78A09A780813B1FF02AA967B1
2AAFAD9ECF36760C06CDDEF25058065A72AADEBDDCC09B6D128D8F475D8A3220
6AEFC8BF47C1509D24027446B0481B628674416319D720E3C79EDBE008780085
38C79938E46FC4A9B3B3E4C94830361C8115DC829905CDD01E943FD68AD929C3
09009C30F1C356E5AE411E7EA01A0FC4D2AB843F28E77309B1D0E6185370CF12
61BD2325B000A305A52C4087386CCDA558F5050025A45A1049C9625FC0502D3A
8052D228572ECF09F29DE98EB0A544672A85184705E71E41A2B854305924BBD7
54AC15C7B0F3377F39199DD531BABE8865E8D3B7640F59B5C07D2CCA6C0BE09B
467FF87E2B457C41477583D580BB31F18D435619DFCE7455379066FC8C4F9489
86B1F80EFD950B74E614A533B0C4A2D4DD9AD8A3E4F85B69429085C453279987
D2158F156B652A99F4A644D178FD05C543B6DDF44F265B6D3027291F2D47B02E
C7F91571FCF8978A464394EA8141077EAD6A5C182C775FD8878D39F160B10D4F
5E8E6A9AA32A950F3554A99D33F5C5AB146659B0FF64BB5D962CB2C4A67EEEBD
A6F360770054987AD65FA54A1BD687F1CAB305D9C4587AC495570DF9C4F05525
921AFF53DD0A9A4E22BC98381243A4DA9CD095F34269A0B280435E5BD73D91F1
056A41B007AF081136D50948561FF5E7C59994442E00ECCDEDF261F9F4E5DF33
D55934F684959BC5B463939AEFC3033B88B33AB67C5499D2A60B5321A5C22576
5E25E76C255966E3C6EE159D54173C987AC6952C10B0C3E73DF2510605270065
3849C02805E1C5602361274644F4BA8AECF2933CFAD5F041561B6E99B21772E4
094C21C8D7FAD2ADB181B67A51495543AAC99F499FA516A8FE9026B4F9F6FA14
603226BDD342BE1666E63EEB0D32C78385EFCA29AAAF9A225424A889FDB971BD
BAAC6FA6337200742FB65BAE285D806F3273A4A2B6C88806DE2A8037A10D16EF
D305677B9A4739C67ACF82AAC4F0D05A8CE52E360EFB5E0ECF810FFBA9BDE380
B680E31C8BE7CAE9F2844D17BBDC178AFFB0DEB4493D2BEEDE3E396AEFB764BF
C86DFE3CE4A2AD2F1014CD74242AB6DFA6776A594A9275834F2E56C9A5C9BD35
B8B288FAC8AE20AF4B8F10C50D3B5CC763A1912FA4115BE17055D9EF763F9426
C284326BA0D4D95BC25B242C73A631A39F665385BFE8588C946F09DABCCD5FE7
4AC5D873DD414F64280275F485F8A27B76856919419613973269D39C768806E8
A3010266862CF39FBBA573AADD91993E707C30DAADB967780F749B4F38ACDF82
AA399585EDFCD485CDF9E07935058ED16528D28E50E37BBEB1D1554503645DC7
AC0D077FE7AE2463F40DA89824D1C5D17DC70E135B2AA39363889DBA63C13F64
6A21F005F985B4BAB5F16FED0F646F79745A41552F95F74536C803FD0E67B1A0
045D2C928BF1FE17EA91AD0A116EC10060344872DBFC286DC6CE255799769EED
04E800D468F47B080716ED92AD214F606EFA4CBB077034D588198BBB5D13982D
6EB249196CC7E76C5031C3C0FD6080CF97D0318FBE6A0DB8D511356EAC4EECDB
1B8AFA3CE22F8B07A8C48FDD4D1337C67285B142D255D9CF6EF11271FEA3EE1C
24530AD38988CF04261B458247D328EF400BE34A35191DEA9BD6B99387A7A619
EA936D0B6239F72579B0E99370DA9C9AED1E38EE110A34004817B886A7977690
7A475918032008619872EA79AE70C001DF32ECDFF02FFB141C9777BADFFC5A8A
6A1FCEF61CD2A5097CCF506C626B18E1CC6E48B88B9BD42618FF76B7D7477C08
779C0180E034A90CB084FD2D643CF953FBDFF9AB4FF7DAB21AA6B30547145AAB
6016681FB9477E2A1243CB87523D2492EBC0F85F5B00448C767DD9B71530C5F0
1BE2D2611CF9644C28F3F1D117652C11440F024431328D961B72BF5435880D10
FB3735C694DA7DCA8F8DACF03CB8AAF73775122C66EC7F385D26FA00A1ED4CF2
0363A4562F836EC514D418E4ACDB9CD2571CA84F117D8558ACD6BA0098C6EBB1
AD2C0A062DE1D5167D0E2E82D385830EAF3992E4D8C863BA7D440B3BB2B2CB93
69704CE85F5ED2FA84096D5D15D9912FC141D7B8AD117442D802DF52CEE62D33
3C8680E458D0AB80476A0E2F3CA21869CC19CF9CD0F897F0E26E2FA5E43905EF
F7027AF9017AD7735E1F131F51421F247C21AE6EFC9BDF91470F1F504644EE43
EDBB75AD763F0731566FB7FAD0C346FCB6CB449F1872A1C253D15626523CD873
8F398882D84DB4F253934557C4E1D8CAE8DF936480442CC8D0A0AE401F14F4BB
6F6FCBFE0F4541F5A27F7A0BD2721C066F31553E26153DE9FED3B3F6B887D607
A14D933DD82E32144FAC0F0E34F1D0ECA423C805F4D486AB65E5FEB2374FF8AA
CD9F9E421646BE14E2BC931BF7B3114E113AC272E689268C2981DD9B4631F186
99FA6A85E93C7D079350C0BAD8EBBE1FA99D924A09B208B1E96DFC9CFBED73EB
D70DE13443F8CD56E8D3510D3DBCD37D52F256FFCDF706B456B6886F5FF5F416
C079A9D79A4C01FD5FE881F9994498B9CA251192A91D5EE10EE03E670FFE852D
E1E90FFE9325EB3E9F8552091831DFCF87DB972A1991DC659D83263F3BF24615
D47A897EEE5A15D4214F56DF2F6591BA911706D3AFABBF86B72A84FA9BB96840
C512BF9AFB028AD7A598FB92FF2E8F498C5E147DE7E6BE6909BA17189DF98F28
3DA6EFB0DCABC5A2659DAD9B2E82A7FFAD8A82C46149A381494CC9A9FC4DD87B
E8A273A04C8F9210E9C4ECE00BD8D482DEF3BD9164B9D23E40724FA9C3DCE3C2
B9DED6CD9D11622AFCAA2031E01F44EC9827715D8D755A09BA38A0C320169BBD
C9009D905FDDA547F04F0C596B99077020341D0C8D0594B96F3D215F6C0CF801
85A1DA5B2DB352AAC8D929D5EFB59A09821BD121F361A0BB39E02217B34E09C2
871520EB071D57E293719487CF5D51F3F8FA688FA1B9F46A211FE7E2B6FD928F
F7E51CBB67E70B290AC88D73F5F74B8271D5613B831E9FA76E06A298ABAE1A43
2799B9D39C052DDC7F055DDF6A6EAB9E62CBD50ABE89F5DA43300A19C6F45FBB
3B6B73E80D855F5EBFF6A5BCEC4849F00F97A8A62296A2D3EE7B2B79BF7494BD
A2645D0FDFC998896A60017B4E5A7B06FF4D1360CDDCEDD19C2E1579F2D70AFC
CED406694CD0A9F1C745974FEFD29E634316D6C4567EF8239569CA8DBB4063FB
54132B4206B20A8ADDED3705DFE13EB7E3AF75001AE8C8203622C7290F47A1D3
F3F15E77B3FF03CA99C867D2C9933AE39EC90E0FAA5AC754219A606ADBFCE414
76F709F0B657C203B8B79E9E12A6A42C89543196FB8FA21E8894D2C09DA43432
557E9947EEE2B94EBC03B25993FC39020072C76104C8C9F3647E03E89E38C8C3
F9AFFB729B1B2971DBFDB36FEBCF1436F4D5CEFE787157F8CC7AC507F9EE264F
885625FB151F7DB3788BD9FF8E30545E13A3ED367DDDA8D8916059AE84C186BA
3DDF8A3D03A6269D7BB21372427F66C4D4978813067D64E0DF70541891615BDC
BF3B5FF2CFA216EE8C2D9C96FF0A04F2EBCCA2467174529C5E1CD9C379F90BDE
98CB15B4BA24624E146098A7CC2A669A0A8E3FC5D4E6634E80132D58328A139B
32C83267C24193319CF38A1BBE0C7FBEA056326E41636E17D938515DF144112F
A950228EFD70BFB209E1B9EDCF0D3DD6C9E029FFBD6E3C668B0368241FB6E214
8252F67A3160A9B66A24C5E3561BDFF89136385827B7980C2FE0ACB1C0351294
9012E5C307F7C8B4778CD3F19AC7CD4C92632D8B80A9FF115235BB3354BCDEFD
91004F3E926B74236B0D42E4C62B2ECAE693F327D25D98C9AD193F94381CC6BC
942CB497E519444446F0E2F2A2CFF9963C615AAD654F4615C381514C1E1BDF36
283AAFF8AD785A49E09115E4B96BF9A69D0DA22D0C87E46ED1BE94E17E5C4E55
92C5E49BDF168EAB3B30CD4F93304E9E0DB55DD4D849774AEA55032F07DB4C25
C0D1E15E3395B062B933EB55FE9D820F45B5B14743D409366D9B06578A1C23B4
8A90E6322A2BEAD105A169AC099700E454C9B0FAAF6F2A73D30E8F58440D8219
4CDB01A2CFC41133C69AD75946DBFCCC41CED07ED01BFADF46DA47A77998C831
CEA17602DF6C9369CA824B117CD99334626049A9AD892D4D317648B5B437A05F
4A962CF1C22D83316A517000F1073FEBDBBC6E54C1AAF015B9F8B0A1A057B354
D8D8A6BA18F7ED299B936ACC0BE258073C0B10855AA2D2740572CAB4D6C15C38
93787027C722B626C678B1CF0226C3C6F0294D719EEFFA417DE903CEA643F8EC
BE4C52A10C03486C14E6885F493C5E083E235B12C627CF6E0C6109CE4ACCC5DE
C0ECA1BA3C7EE4290F0D898BB3E404CCAA91FEA4EB60B49B44B73455D293113B
DC0CCF64BA27965D2B38AD26D20E519C84DC7C2404ABCAED0FAC8C87F13F130A
E279AC1C3F3C112ED828E9BD8DBB5A60E88548BB1CB4FC408AE829A43389FCC2
7560074CD7A9D04043F8BCE203BABE2FFC6E88C3FB8B507F85E91127FCEC4599
BB37CBF785708DC404283546D7814BA53FE7FA161FF626461C3962F04383FCC8
71AF08E7CDDA69390985D83828FEEA98BF33E0D0DDA4D02A93E18795A8AA1D49
94D871C6C21370BBF47A320BA4335D4C8672E6CB0C819A797C01FCC433A43F15
25A4BBB12EA7ECA1A5A5AE9679354CDA6BDCEBF3AE5B5E2BBC2F802F00B3A75D
E53FEBE1B7B922265A2D4A754F038108BD7A61604A4D5FF0DD4EB11165B7352B
B1146A0FF73318128A2B2DB3EFD07706D953C66FF8B0B46004D5550F42CA253D
B791AF07085B236FFF17AEE46C593BA22BC17E73DEC03B775C6DB41E9274E098
1819A9C0B0BB98EAD3B5ADABB830C68513A5DFAAB01501FA5B8606220481175F
BF5284C5BDE55D757904291FBAE916C87C5C61B1A2CE0A7679A9F255C6640ABC
A8288C828512307217D2A233C37004085BA3AEE37926983876B9B88D345869D9
6C57CAFCFA148BE140BCCDE6A3E478C27AFCA5031CE4BC532C084CB3B3B4C114
A198ACEA84D7D6DAC8936854A0E9B5873E0C43A98002905B1E514AB44DFFFCBF
4181A86F0A4BD25C3921CD2BA83609F5B69A32B3DD2B06D394E6C71B572542E0
ACBEBFF0A8E863F7E4CBE8483FF1688609F513BE2D59C7BA143BDE0D638CBB9F
DE2DD6A4C64592B79F511EC5A8780B2771796C4B9B68B3AA8EE192D9320E7780
6A19730C97F5486C4F82771128C675DEB746189B1E316EB3ACCF5F83703D983E
609F9F4E94FBD66E7C1E56B18A51C229D309125EEB67E216D0BFDFD8EFF9C41F
A280CD6F62F72BACCEA3209551645EF4A3399C2832F197C27808D7DC3A930A0D
201CD7C570A39F1135C4E9D0CFA54B5C45CD1CA9C9BE9BE462A12F35E45673FB
121E1AD75F20A8F4E8B2902347B20B1E99309ABDC421B136D9681EC090BF144C
4F51133050A47EBE4DD5C1A4A740CE1CF340BF08021FC0A04E0F869A48C9A889
4D29C23D28871812FA17AB4684BB3B2D8BD8AF3E5EB9BC7BE18F5EB7A440C673
D625128D295638493156301A8EB7277801B6E41841E2DE908A2941A38F0A1867
33A8523992CBBF6DFDED8BDE4E6DDAA314CF08D885343D6DEF53574FC70B3CD1
D2048FE03BD96CE409E90FE9A484A1109F2EBC5EF7908D61DC7423FDF3AABEAD
2039060F8B6BB4C28AB1B9A5AAFB7FB94A917B3C7ABB729571384824567D6D1B
2BE5142DEBA280A5A6EDB91D2A74E12A72DA524B0F3ABBA5A8231299011C9883
453029710375D9F063B335EECF830F146463EDD2BB8D5C6585CC4C3D373AB653
0B16F574AC8B12D714278DB26C4928CBC3C8D3E114E264BC85D3ED2103D8AECF
9785730A4930EF1E3E733292C806C80C8865645C6564B03BAB7FD13E263C2549
247D8DF74C6863D43B02628AE978D546FDA83928B3BE98031AEBE6894AD20C70
7E19FACB3F7468BB0E7F7F6525C086DC7EFB997A60E05ED8382FA173F1E9BF5D
CA6B4037D93A7A74FAF4F5F0B2A7857D356EC90BEC03F13845FCB6CD3C548599
8AE0B5682CBBBF5CB103D5FE7C33AE8490309B3755F4AA48D4EF7ED8D3C1C834
4297B70FC7EFD14DDFD5A990313A690BF74E678018B0CD5076E23EA61E854163
E286B22E7C880CFAF36FBB0CFA78A1197FCF102CBDC87BBA433335D3CD79A5DF
50A35A7075E0A73A9EC77B59540B4079013EA515E869D196B6D0B8B8AF6825E2
52BFAF0D5B62B6128E81068DBF528C83F702F2EDF4E45D0FEB7FD43EAE619847
7272F3571958BB8A5A5588FED7F69020B67EA3CE51B52BE00F21532431D428B1
076EF38DF09636DF6BA529B2195F29379C4B88C50DF01F591763F16FE1D6331B
DFECE6C9A7CEA474FA9151DA64C5A488EFD0D6F70F8391B7DCFD58902B637141
C9C3FA28B55B1B5A21BA2D8D81A2A9338E8F49892490A1CF05305DC3B29A1E30
B7E9A160FF152DADAD834A43DD5CB510F4E2813868F4D52CB248874A723D1CAC
0E6DD815CE279FB0B28D20F5D32802777853B47DD59CC846154643BDCD7C4886
3E5892807D6312F3E8F27DAA9C755B75CA93BE048CE142EBDEFB16E106C70A09
7035549861A8B6D57670833F82D75D5A875BC46F1E7A5199DAE7BC7EEB4C5C45
1EDAB35FC270F4E6514EA09DDB39AFC515ADDB6F26FFFB8F58BA7065D5BA8483
B5461933DC9EA69E5F28389E3A3A607FDADE63FDB1CE3CF726D64933BE3E7B92
89E87FBBEFB2A4A7BEE30DA2A9CE7073E02324E9A21A5BF2DC34E173DC04E102
840E68ACF691393E6A3ADF983C19E99524F5D98DB983726F9ECA5C9BABFA49E8
217131544D9B05B510F48E757851AA44975855AB9D1E3310DC01B08B5CAEE859
071AED3C0D409CB163EA4EC26EE2F867AC5947D21F5257BA5C9BA0897E711DFF
F1EE6ABE33479FC9E092140254A5FD2DA591F742DF0159CC8BA919398751D8E7
6173E629F307A64B286C02409330317B4FC830F541527524226756497B4207C6
D3173ED4A0A7FB5A609F0CB9AEB7E88CFB0CAD53BA7F20DAE648EE34DC7CEC39
CFC601BAA93DDB3BFA1AF853AA3AF3CA13CDE23412FD61F936189E6473D42A8B
3B0186016DA79107228DED1B4AC689B3E30DA2B09FB2012717AC3CCA0F72FD3D
D6E6E242E73B03318DB2B6FEAC5843087FB8C3DC0072C4655389F13E266A453C
68C647CE8EA12552AB0F918E093F5862BA768C07A6F0173EF1350FBB689E6F37
5A57966CB2FDB7092A18B1EF60A4D042BB742B4C08754D9F00C2C9FA0AC219EF
AAB524A94577EF320491A3FA8CB2D73029380FAA6BECFF82024F043B8A1F226B
DB844639C5C1AAB2102A042C5B66EED4F921646F560829E5A4C737E5A4BDFA49
20B96D5030E787961D72D02C195C669E792C0DF1C2B4B7463B16492EC628DBE6
D3D608A7BE0B7EE204C551FA3213ECF7D1A49BE7AD6D6BAACE6C3E98644BEC87
021CE986BA77EC41DBACE2826B07DD73D336E5B30DA1C24119365218791DA09A
09C7AB12BE2E64A6DA55B6D1354CAEB76731EE262D684627DC8F839EECED8A03
13F596CA34590D81873D531DF4FB838434FC4B72058205052587C6198BED338F
843FA8349F660C272D54592FA44956431AE5AEA575249E6D4963C88AEE9FE753
7C3F8E23C02EF4F7F10E7B3B25D4477B713B015A306F1EEFB66A7C571687C92D
7BF00C6F8129E347C6489FD4FC798AD8629FE60CDF648F9677A2701944FEE0E5
1FD5BEB5015583F28F9EC9834A8D9C9B376D9B539BEDFBE4BF99F3725E1F7562
23855834352478CB917D70F1B0AF793AF5A814E245DFE0E7484FB30B628295F9
41E30A5D2EE095ECA4C8C849CC0D1B54E47D44B807D264B8FFF9E4D785C1B3EB
CCB514DA6DE060318DA4875AA4D5D876DC1E45FE9E441A2A25CF4B2769836EDC
94CF18BBA0915AD56CD8D3A3AF636279A8B02475144354DC5F63288B1C652C7A
6970B09D0EAB3B1214182E7DB08E59E004E2255DBDC7703045C2101451A59031
26FD80BD493627782C24ED16CCBED04102E568DFC9326B499854BCB7C7CBCD9F
998C2BEC705FF8A70910AD75C8B13FBCF80B8A318F9B499A49D08D1E7A627C3F
E5D8F062D7FCBA5245B38B7B7C8786EC38442A68778686E7CA0C313E15FE05C6
3C25AD85F04C03E5A41ADC0636AFFA3A9031A7D52AD383ADEFE8AA8DDEC17CF4
BD5B6DCC5F7E835C3CE7D4454AAB910F20467E324D3D0624F94540BB17EE50DE
7F287C29FD455ADD01FDFC70C3D58DC484BE53067D7415687845FC9407368DB9
A763F1BA3386E051BBC1C7FB8B5CBE3D295CAD67FBDF1A183AB1941874DBB0AB
81350F9F2283A52F8861CA4D830DD778D8ACE45A2B3F6D84C530D25FB7993ECE
3FB1ACFA385D9CAC57566163FCCEC2157AFC8FDC8943EA0CDCB1659C7C1D4462
EE897EB2BBA0A8746AEB76666736EE24E135047D1D412E289BBF35B80F92DD0C
959ECEC318224D07AF1DDC35BF7074ACEA54B605DA2C80BF522B655EEBD4881A
62392CAC3E45E737712ADC7B4DD7239F0F41E86F2D4EEB998520A57985CEEF44
63E8207FACDED0CBBF76726AA2B9E780D6954E154DD58C64D2A1E2139716A8B8
BCE22870B2A8AE0361A40FACAAD195DD52A743AA3677BA05A43742D2F19BE31A
D5366B54A7640689E964FAFD82E425B65D3F8D5CE7C2A9F04C48E8D8D94E943A
CCCD35893686E88F8F127DE4EA963E24C4625989AFE8DD9E0B1844B116CE5CE8
DCF4C788F0368EB763939AEFC3033B88B33AB67C5499D2A60B5321A6FE24D511
AF8AB17DD10B3AAA7E18BC7AACE9AE959F78BFAA8931A2817EC3709EEAB74AA7
AD3CB3BF89F4FE0AD8A9DDE53F7627C5EB24D7FB1AC128604DC225404F3DBA55
5ED87773C6B3A8ABC8ABB13ECC3B249F1878A8F4DDC100609DC41B13797502A0
C52D82740AD335199E8A20D9A463B616725FB7745CBB094CB3607C6ECA114DD4
10849EE0591709662A1B521B539878818276E4A5A5243B3100318F45CBE1BB1A
6E0CCF1CD79182D3B235B452C202DCDCCAF5DC69E296AEB1A806F0222132EA46
587B92D5B8C8131539566D7BC863F004227E862427E6DBDB6452FA49B03BB40D
E7F8FBFBD36B12A1C1F95A92C431ECF7EE8E2E5D4D979C3C840C5436938CD797
5BAB77F01502B43E7D9EC4B765BD8CBDC4ADE726D6DC6EF0FAB3F5B2A405BDBC
8C8E2F26349004AF3D296585FC6AC72FEBE8A6B535FC4DB5D4AC148F50110549
48A10FA9CA7B44F26748AF1F586142B2524A8EA76881278EC54549F01BEEB31E
73863967A4FF7FCCCD04CFD61476B4495F91BA96AC3AD7FB22BA4BDD28DF0811
FD0F8198F2075552763F2059F46A636EEEE6A62B6E1214CE593C8E6A44DF10CD
2CC3D01782E74D45DD4CCD6B47CD7AB46DA299349839D6BA76C607F28E5C144B
DD57981F14368C4447A72B857D6C7BF995035406C64054DED8BC381236C47E46
F557AFA10C4E38D9BEBB4900F2EE9B60182B4ED6E6BBE81A38BD2DB695C237B0
CFEF3023EC12CADFC0ED0B9AF63C4AE44B7870D343DF102BE43CD5058C3BD026
3C6D6EC3A9B7B8DD2F0B8D82752DF19FF85F3ABBCA8FA905020BC5A286E54613
54ABFA8BD2B6DBBC8AECB140BDD91D9B88728874706381E06CAB4FEF345D361E
6BFEB0F52F18257CE4B002E8B036374D5C37D66FD69C26DD0B3F1031E36ADA96
A3BA24963A252BA1E99E39BE7E1118774CB4C95B6FD047603E302D3D296FEAF5
4D457AB450605A86077C5A8F315DCE323BD9ACF948EA6965A64782EF458FA28F
5870230E9DA69ABC80788F2F72CEE5F5594A0B7B18013CF71A53C9B51115B533
559B56FB9D2DC3F092100EE6C6B0EA56507C3D9DB10BA62284CC1676852D47E3
BD1CE8C88379E352496A755F2590068032B9272725308ECB6383C6EBBFB2B61F
E04B0B13B26BFA8A80D38B98088DA06584BE2E6A1DFAC98532A65305D47C7236
AA63035E63CCE8F4B450CB5D21097D7290777354D1447835A6B88161FEC44584
1CABA1D2A59B405B86983B45EF20C8B06B4FDF37FC4C6C7ED97BD15B1763422C
B084073DB52698068476B55C10426C6B620BF1890A7406C3655EEC2461F4B71B
7028415CCED34DB25B1C87ABBB92FF35F9759ACC9DD14B661CC9D209B631F3FA
28B1C6B00CFA8D41970883CD836D1668B85BD642F7F50AE117B50C2AF03D3603
D6B370E688A51026B6FD8EB28564E5D863D6BDE1D7CCD1A973BF297FE6A8821E
03A381C468B8F7DF32B806286039E75042D590F24D8FE9F50D35EC6BB437BF25
8EF4843C39EDD64D59FD94E698D0A65005A5960C7F6A0635F4D60C3D5A5D5AA5
4D4566C36A1DE47ECC9475E66A9995FA5B117AE91425C30A0B85C98BEFD47FA7
6E2FB6DA0EA3472267A89135EB528CFD0877E8D2AFE2379FA8031FEEFBCF4035
E4319F565C7391D8A700731AC74744F93ADF8FE08B4C8BDE976D18C8F669EFAC
17A80DB2CD8A2335B62CA1D8384D4869BD9004CBECE1C9D0FF1E4AD161C1C1E1
7AF3203EF8D033328E197493A7C129CD1701D6B2E7D88E02A47DAEF3C721575F
E1039881871D883DBB1CC9F5BE250F123027EEAC691DE58AB930369731F5B956
46684EBF41E264D943C1929141EF89F8183B94C9CE1424E86B08846F902CD400
D1F79C054D0CB8F10668A8CCCC9DB2CF6CEEE7B2D6E24ADD3F851EDF208282AD
F04ED5C2264211DAD907074BE3AB5451C4A037082F566E73C4C3C500CD798E32
5C588B5B71A41D2F664D35522EADAC9FFE1131374EB2AADDB2337DB37E6B3407
776CFD06CC2C60C88FC3817867ABF9FA737C3B10C7F4528F51479C03EAD74771
81F724D242E49D3B613458BC8FBF04874D48127F3226BDD342BE1666E6321491
DC81CF23FABAC0975AC960D4C07E4AB64B360AF67F0D9E9DAEC1E9643545D179
D97E7159C9710FD0AEA0D1D4F5FEE75FE714FFF3D54D09C9747ACA01CEFD2600
4374EDFD43571C36769B6559680F45B2F405589F151A958FC0ACCEC903E9ABCB
6ADFA4EB07AC36443DC19A50C553C8AF27ACFD99EAD434BCC277A4805E6F068C
F20E23EA250462972EF06EEB9BCD3B1076ABCC3DE786B580E0C213A31E124222
E5DE4AE81A1E16AF3354F24886ABC9BAEF5FDF14155487DC65939F04DF25603E
4E215538A4CD1C1DF9A1CAD2BC6E812806D30B4821F1AE919687A79E43CB0B9D
921B4A6980F6B22FE3C7B7CF6357CCA2BBA4A317218DD1D5EA6436A0224D41C8
42816A59F02A507DF4B48A3A9830ECD85E92A8FCE76F32E61F3DBA3E0EBF669D
367C6FF13C336537B67F235795800CA8EF17DEFE3E39088B04BCF02926F77C1A
39ADB297BD5D35D0CAFF42DFE14CB390C69AAF35C89B103DF5666EE9AE0F2375
34E2543ECE021E45E6D60B1DD6F4C4423D10F8AE9A8719F95A52CE74702030A3
356FBA2E66131C9991ADE94D57D9FDA066A17F3ACB2DC5B156DC85AEA94441A5
97B0323B21D5808D636ADC789843A91F21C6772E261E33F795A9296669B1AC6F
BCD623AB4AF6DE5CA80F9092DDF372DD0FD35AA7A2CA4B557102419D3FFCEE29
301DA2C590E3A7C5FE2404D7748075F07DFD48CEF6189F1F33F1B1DEBF5A2307
21E51750128367A0AA72945C9498E5FCAF51FF07C966B61B01180333ECCD5B3F
E94019A02F7C49E44C149600B40429D6A683196C149DAEC4602009C21437639C
870058C8994A6AE1156CC43259B564167FF0E2B0B9FB06E184655B54E82FA19C
6ECB9CF4F231874977CC5FBE8225CB7D118E696E523AF961E9C9893490985F10
B4FD088BD3BE37C6200E44974C097DE0CF32BCD261A6F07C4B1B09F3761EBAE4
A858EC23DA8CAE33FBDE7AF787664FCF245203C8460A098595B7BE5DE659E933
7F909B8B374E4975E93D9FD32DFA0AE84699D18E925C69A6EC77FD3EEFDC15E6
62E4E766AE5F6AD0EDD349021B481165B32528BF3209DA0DF713EF4751FBBE44
FF17EE180161A5BA285A634784B5C38BF0CE1D0963C3F8C7800D3BD58F5D44F0
B16C88AFA1A33F9A3D8C9DECB825097A654FDB4013212106D464B0FE966C9832
86079E27EBBA62BBF3976782EE4B45DF434B01660CFF3F8062143CA293576476
D8AB9050ECEECCF35182E14D08D2BC1D53FDD0B65D64E40E60CDB474EA041DBE
2706B9751409D054A5CA5522B0F83620B26F55D7620C2C1C392A497C88E67E7A
C8E934D993EFAFC5D3C280C6065CC8E356508FBDD02A5D564D59B23FDF9AD9CE
CB2D86E4739B612336CE6A7D12A16E34AD90D4332D31C2662EA19C6F6580ED77
B3191FF2B7FC8BF3AE8B6F5E9C82246C7F9377E9C2E4B63C78F552D411F7CA7D
7E9B6D734A5F593F978EB047E04090D278D7151D59604F0960512C20ACF2375F
69B7773958CAAD434456040246427C9A9AC25C57CEEDCCF47DEF98C4D40FEB7C
DCBE04946CB3C4F5D2B76B858C5870B069668A6C232F38ADD3B13107AE3C1435
E0C7C24D12D2C38A1B7828C9DA1613D52F0B0541ABC454534FD7D7E06ABFBD2E
17B6CF94A7D5DD8F584627AC85A883D18DAC01065FE4BD0331868F422960B794
7B0102D08835B87A389A286C1243049F98EABC8D9B254BA4C787E0AB49743AE1
22D2F7372C1F3D22F8BDC6AC057828B8BD148F0FEECE3D50BE2B30CAF1DC9CF3
E6D032C7812F9422CF1D9C228B5C8A1104684339DECFB30F68D91E63701EBDCD
0B994DE21512CED7C8440B83400125EE5D023D0CABBF2B103536530373CC6F53
CC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA509A32EC58088B80F7BDDA0E5FD8387A56DF7864A
73195645D50794A8CC817EE4907CE2630265811A41E7AB20C717848C85F24845
B77B6AB4FED8FA65A00A4E6C51AC3CCB3B6C2C5FCC5A757FA50D53E62FBF9117
8720FA2EB8E25C29B366304078961DE665ABEDA47B214C73AF9982B447F067FA
AC92EFC1494640BCF0294FF2103926BD4D84D0EECF70D7BCE3B519FFA1FA6E54
E2459EF62838C90AA05E5B55E0B9D042DEA04D480710D369A37106279C91938C
746FFB2F9BB1859B9E19B54C00F83DA7BE791B44427DAB18EFCE389A6D7CBB10
8D6A49F91E1C73DA70945B9BCC22483B0FCE601FBC0E93A89172B1A13A4823E6
45378959E3A4959132D9C1ECCDA935354C7F42AD1879C36707754E855326621A
601576117EACDA8787FF9BACD78AD9237044496B37B24C04342FE0876C068732
1E1690246CE183BCFF43FE799160EF194087E7CB8D3BBD6FE1DC8600DA605D4F
20DE4C1F23B16A9440AD00F6BA5601CEB6D079BE8730D2B8FDB828986367E2C4
F0243B2FEC24DAF9FB3BDE32DC8120E63045002D044B71370D2195B0745F3290
1A80A18BB3DF60DF1D9C1F0526611190E892D8AE707B0A9B94E0BEF9D47D2152
7A3B1D808785CA3722DDAF7FD77CB534E74F590AC18F55EAF42B6D05A121EA22
2FCCDA3CD2A9C193BC563E5B01C3DA1CFC82B6364CA33BD7970142AE10B7C80C
03876B0FD46A5993942E143A26C67464E6D2CE3F0D7E23C59D2CE7BCA07E8E63
3408FF890A4296F3E9B0D405E9DEBF3A7CD95A823A176D8387CA420A441980D3
E8666043259ABA782F63D89425977C174DA2373189135E0ABEBDFE62B5E9E126
0F6699D945A611A7EA348DB3C86BE4B088C77C2D7887B361297AE1D1E38DC825
12E4336F135570D8D7A6DF940E23FDF870E2858CDBC2A33039833F934B4283C2
33C8744FD5EC84144B2966F72FDA2235ADA8515C4A4972910354AB20C935E0EA
158B8AA0F818699F292ADF54BA19904BE3D91A86226A3B6AC4F4CAC71F4E90EE
0661E9284998AB98F1DD4E042B66085D15EE7C54377780B0FDBE164EB7200CEB
625A2E247659B8D7B2924AF04D875E139FEBB73B10C153AD89091EA43D081F81
DDE88B2D64C4FE2A7E42C5EE6C750A2B0B8180E5389A54B85BC69FF37B8CE078
CBF4B4198881C0D98302B116A463934A5A28E8EE8C15FEEB5E5E97328618BF64
DE4BEE2CB0F263EF782C0D4C706214FDE117584140381D43F8F39618E4F57281
9AB997502F351D81614CD73E27F230046F89E913D027C8566DC51D99516B2F83
53F69FFFB5D736F85D789D3932A124FD8EE5C6C240D3CD3CEBE1A6915BA90066
542C50A6E3D62384F9ECC1679B6514C107D7B3A61604DBF81D603AA8E1C41CE5
D48D0DE181A612268EF6A85F4DF4B1F9DB41360FBB27DAA529E2F8B9C28DF8ED
00645552C9A12DBE0028DC8EFFDA32825936EFC89D352105B50534C875CE7155
4DE156E4428BA4CA6423C8B423687C5E2EA01816ED984B7282BDC153E1A5C4DB
2502C4C4A91BC788FC12516BC85BC89A23C2CAE0354074074C255686B775090A
16F6936C9A0AC658AA1BAAC24515355F9825C843D0C6BBB366C705803A301902
F1854F5CE3EB154A456D5A77B0C43821F04397EF15C2A291A8A4132F4D574134
DF09895804413FFBBF3732B48869A480A92AD41E3E1C55BBA48E5A24FE6FC388
0C639397437CEA43184F519AAB4A64AD7316571013AB6B2BFB92089431CEE093
1D3D2FB86419F748BEF99438A2EF8990A519D704A287889135BA6DA1CEA9E7A9
E8D9AFFE49AFD568F517AAE9AA5E1BE66C2C522BF8E5FB4531330E02C9A8EBCD
6C3AD71A1A0EF8A166071BE79D45CFE4070F971EBE827C4A232945839B2705AB
65BC5AFD9F3DE5666DD13387024C159B3247E7CBDCCD90E10600663B161A15DB
54D1C7DBA7F9F4354B5BF2FAED4B00F36F2CE5F46491EE8653E75489FF45E41F
46751953C4725CDC99096AC0CE936D0C68C026458DF297F410F90CA7DD41C4F4
F49423DB796C8B7268EFE5EE6B0CC0781AED1350BEEDA282AB751C4084618861
1E976891A2BDFC66EE858D35E1617A76B6B93D28A18CF021042D11CCC1BC769A
DAA1A5418AA997C16C2988EF7E0148A1DF74DA038B94764147780ED76337619F
86AF1FB6373D0CEE6B46717FC81602F35D0F54F815D0B0AD37CA58CE08B25D36
33AC9FD325C398E049FC951F28A391F664BCE4148D346450E92E971F6A420460
19E11D040BB87BBB7ECA6D72FEB47665EED274860C3BF880DC2F6C80CEC4A92E
0E35725506113918E5F29C3C662800E45BF5E62E6BCE384C1488C4D37BF9F6EC
90F8B81FDEA7E93EE59927434937BA7ECE3B966FA4A35BEE2036FF9C5C423C89
1C242D395273D98D7A005395D8821E2A6B0A65479915329DD2C1C33B75F7D74D
1C8F961A514F6FD6A3604524503DB75CFA310263EDD27D32D83A216241D03DF5
1A2646DB93A34C60583DA3CCDBFF4F315D1FB4802817F889315EE92C675CC914
3DE91EF77879A073A0D3F6744C6E2D6347C8510AC6D67E95F20772653E4D7C4B
BF693BBDA6847EFBF89F46AD331AC05EF8014CA59579136CAAA1B40AC36DD171
BE4B505A633720E0A8508FD5B9E01F4C2302DA5F005F18FD3A578ACC4D3AEFA6
7EEF8FB207ACB013947A866A8ACE63BB8932487CC65DE1D661D58585D675467E
6606632B9E591FC1053090C526CA1A8F1197FCE0E63BE2711921C32577B3F0D6
08B7A4B741D98D6F302CB1578B0EDD511F87361F7897A2D28A562A935226FF82
3955C3AEC87D761DC1D072CD01B49DAA9AA7801CDB41A857C05E6230126DB67A
A65CEE2C609379CF16CC165EF655F98517D951766E9CDC1DA90B72CA78C4FA65
2354994597B63A84F9AFE1C032512E819FCC17EB00217E5328311B59B1251681
6675EF303FE4F01F1F84DE922D615FBEFCA363411DE10FE5FB70E0DD01174663
D1A9F985509FDD2E75FAAB717329622828B2785C1A8B26351E62EF6C050296EC
F0188950E744AB53050CE216C010B1673FCF588EECDACD25533064A51A4ECDB8
3B64C9DF28D4B5691166D59F99616224E706E080926688173C851C350E28504B
D6F48D79CBBAF2625C2E2E1CABD518987CB276D293489BB97B6DF215204753DE
7C4A3FE2B2C6FB2462F7BF0A301EC9F7A07DEA1D0391B73F69D03C4288A6353C
DE5BE2901EC200448DF54F8F3B522DADD168637AE0E24179E719D6674DBBB512
BA97E4085C237309FB4567812757A1EF9C33F572F221C6167E73E9B60B21CA2D
3806F30D13DC8B1A60616CB434CDE7436FBE5D62D4882CEF0A5232202C7F74C3
0A4646D8726DD73FFCC6D23C5044A04E04279AAA541D26750E85FA093624E314
06CD21E82E96046449A558A88D426B6C046E9A088FA255FA09BF804BE0A72AAF
E74199DA8D088056F1F1323CB301A1FD6C0479C8F89AC68DE87D86F3CEFC68FD
088337955F427B31F18A672D31DA3CFAA35DB22ADE121024D54828552FE5641F
3F463F43AEB75CA5648A11C433096F07F5D076592306D8BC30833BD11CF1198C
51BE09B6180FD2DD2CB9B06D3122A737435305D42DE9C6B614926A370EFE1C4A
5E9CADF1E05BC7982648D5C9FB29924D2A372D8B66E59BE53EDAB3DA137D59CC
6EFA0F579F8A19CD0117C0EA512125DC02C19B85C24B38B1B40D53ECF6AA9087
3368D785FBB2758DD1B0BFEDF2C3D6DCF6187E792EA762B50258B853D05B6051
113F89A27762BAA77A6F83927CC273451A1629E9241114CF65226FF4C348DED0
7FDEAF4B0DBC9D59A559B2BDBAC48EAA0CF06C0DEAAF7E8D1F0D615CBD7F3E30
2E4430D8AF79983D51761097F5569529861FAEFDC91E823E0A0EA92E7F1118BC
F7A6C0D51AB943797023065C805B19DBEBE4C9A81AC1A584AB7E3E61A7F1029F
A5E9FE7BAA6A177DA4CC2B5E5C70C2C63001A415D6978EC80CBBE250BA0562AB
6D29152955C1F6110A42D0F70DAB4D6B7E2187A3BF218A6632678B4550B2727E
8682A7A6649577BC07041B903BF50BD66ED52734D447A5DF73FC46E9A9704144
D16D6004B24948F0B46C30A3AA503426744E5DAB6A37F59EFE3DC7BA85D89C0E
713F556814E051C6CEFE7E83C2F379B88D3DD15E1346BBE8940C2F9BE4BDDA2E
4322C052851175C6B70A9ACDB172BAB4BC144943B3D3FE06E95C6B6D36F91289
54373F9718877DA7599DE0AFF6ABB520C27E253D9006220706DC806409EF7E5B
FD966C2815E1A1DFCF85560921CBE040A2AEFCBE4AC82DAFEEF86EB672A952C4
C54E890380CEA0B0E0CD8A82DA2BA32CF7B87A3F96A7896DD470D4DC49BF5D7E
85930282F102E66F4AE9E94AFAE3CA1C359295C7D2967195AFD2D94BADCE1E95
F48E3796AFADEC8E98D78E01B81DE3A78F6FF1BF9578F7AF81E8CB4A17B989F2
DDC463DD6F84DAB963F5213142D1BC5E4EFE77037671FAAF08633A13C303EAE1
1BC1A233E685C67F73B1786DF4ED7FDD5B2A6C5097EC50C26EFB0E871C90A617
5956C54E9E368CA67F79A9DD91E97169B67DE7676E4338BB923A4E3B2F946324
EBDE7EF35EE31795B04FF3E6F6542C4F1C6EAEC54DA233359CE384F3116627B1
8993033B383330B1D2E211B7812E89A91CF9A55216E5C0F451BC1C6C550703E8
4C757F24256F14A5A1DFE6FA7EA168F4DDC5FA86CADAD2636F675A2B448833D3
EAE60B699B566E964B52CC2EA8F3AC2AC686E1CA07261AFC2B0A6F5BDF6CC77C
8E43C053205C1112B57431024DD39C3C6F3862E1DA157FD3BC5AD0D082997A28
E0F1AAC2D3440187C8FE2527271954A1419D8C5C21DFE4465C96FBE9F655600B
8893EE2C65BB593B87394CE0B227A9D9173422A333C45C6436DB9C6ACBE309F8
2A6256FB00A1B25F2BC121CF9F4F5687CE3FBE7299250E54010A60CF896A0CF7
9EEA2545D85B7AFAA22E8394686A50E2B9EF955D402CFD581761BC87542C1FFF
E3D0F147B5D502D625A371A5F803DC9543E5330062A9E9DF54E7E37902017E2A
6BCE438DC248140FC06678F93163AE8E20906A3996F3FEB1422C06D0BC5FE6EC
E778CE2B0C247C6A09E9D28B9FC63F2975CD9BB71FA698571B1398F3EDAA341B
720F5AE7D24058DF483C647F694320E023CAE0568AE3BDFBDB8295B01C074247
5BE2721C72150D1E7BAE6FB1A37122677ADF4D17A7689F02B48F1A93BCC902B9
229BFDD8109322DF0CCE8FE0405D523BD805AC7F5D19AE386456AD8C5D6D7890
15B2CC356F4041915CFD8BAFB8B7FB1145ECF9C2567A48B0C043C6D77A69C511
D7809E872C87D13F9DD30928904494416E3DF1D013E77685488691EF21286FD1
5A93FF6A0468C6D06CC31F68C3F262FA279BABA8F1BB4F07B431A1EFB315AA5C
68D05679792EE1E4182ACCCC95EBEBB93031AA1FAEE46473EAEDA71AD36A1E14
22A76D86F602E1FA74D8AD1BDC0A7EAFA1BA4C17BF640D2AF1E0F406AC8B4ABB
B04E5152219EDD29984942CE3E5A6990F99FFDF77D85D430AF18655ED8657CEC
EFF08ADDB19E494C72ED471DF04D25FFC5FCCB5E7F9D9F6D462A3C3239C9397C
79645EE6459737AD0FEB03A1C547FCB7AEE8B46CA1410D081623E5CE53838029
2E97BE26B58198799A1D91F52BBF703C057074710C0678EEF70A0C57A8D87EFA
FB4289EC577E70D62FBA7F757259A5D32A90AD3A6AE9463220934651C25FE7D9
853223CADF1D781A7E4D07DB3D4F16AE2501B2E51DD40C60358C55E4CC8E22ED
E7B3F23ECBDA863E0102268A3665B519CDB7E2378F46DC92FF8F7970CE5C0ABD
B3838348C088F2C7641C90E7A21C82EEDCEA0D02C8EB1606AB2B516787BD4341
B92479E72AACF9ACC43B557605C366245B65AE81495FC155B67C8626FF33812B
1AD8901E78AA828FB9ABAC42443EFEBDA80787A0F0ACF16B2EDBB23894BC719D
68C21A6625E48518D2E33F872D9A248301548BBF1283D4DE3FB0CC652E3A1D12
E6130B0FF3397CFDC94CCC44A38C2CE2AC5E22AB57C488C2208B769265C03C0A
3CBEE6240C0DE90646E7AB730E5D57A875B3F2E95B8DF74008A1AD51BB1FDFBA
5A3E652C8AA18F7DEFFFFA76B640FC05A08046169186702A682A14889D3C1B38
1FA9B54CC4195C597D6799CD5B7F09C114CC84AA912E5EB0584AFFF1D24ACC80
3C1C4257740D8A34B5216B01D916D41DDB32513DC4ACFCEFE43D6B23AA82394E
987600DD4D04CC5246DA7AA16DAD7A3EAE2D05A9B570377A356DEC6AF110FA0F
C9274961C7033B7646BEC8CA5FBA4E4E99A88103935A91A910B6AC680A8EB267
BD60C6E84B9FA28BBCB712C15A5BEC215FD698B7EF122683F248D120E2B00CEA
54EC340C270BF01EDE1A303B2D8E5C8C129AE6DDC88039288277AA477D07BBE3
9D8F781A0B7FE592860A47A61E951CB5B08CDAA8FC4C7774ACAE40009D0682CA
F5DB88E408B799859A65C144FD130E16295B17CF8CDBB25AF54BD452D1FE2B0C
1719E941B752AF11A279BA06F821525DD0F47783117684CC54510F9E30B9B61C
6C54309BE136E27A372AF4CE5A6513551350CBBFEB1D3DC912996C5EE1FE8CB7
B7F400E8ECD6D245F8A3D527418B5A668DF06463201B00F833E5A2FD79902CD3
2D6AEC688F02A7365B66797DE1EA0229C8E015524EFC3A90BBF54D37F9043C12
A5F4383312A7EF05D9A05AA68412AD77CA3723487975E0459FCAFC4B9880FCF2
B3737A6232E4783EB4A8AE56B83ED766137D6CB9196A5413A6322059418450F3
C51C6F5B8FE3C61590F7B1A801AC84FFD82566D635CEE5B3FCB4D57C732E6D16
BCED07FC274A5222CF53239497211C13D02F8FB9D9DBE1E7BA8E5424C8D0A899
F621CB490A6823BF8235C71E7C50BB25BAEE68DDE0F4850D322DD2CFBA62ABF1
1D2CADC336A4AFAC6A910A6B158DC42E97769D57AB289F58FA1F1C691B9F6A82
EC74B3996022FD4532F533EB63BD2154C076B263342E8A6977987E6EFB3DD2AF
1E6837EA88636AF0A06511DF6B55284A8CEB6B6648EFA4D8E060FC62F8CED7E7
5E4A4C72088A7A79FF6DBFCC7CDA11A1C00767CE1BC19F391E08E575B2EE78E0
4C5FEBDB6BF329D04511C79165B5315320DC3DA94674E8E633B2488339199BFC
D1C4FF3CE4851D494EF97D357057B13F26FEEFB65FECBDA4BB89EDFAE2D6A52C
31C01B3AD72B7F8EF16A8421B4FA121305A1AE54DD6930796B192864081BD48A
9CAEE7F9DFF85745A875F3BF3C4B8C0F978AA585F497851499E3E82C66DB5D38
FBF245D7B5398124C8F7C9EED4A8E707FDD5EC67F531382E4E32D290F9B97D00
ACA4914DF3E56D335825BD5474328B7AD72AF9317501677F15B1A4491290BFA0
567F93A5550CD9DE2843D269E312A2D5ADF6881FBD66D03721BA9C1B8016258A
541B050899D71BF8873C2203C7003FE088725F37CD5EE4FEB93A7464D4753A93
19354E3E4FA9C56227FB920DEBFD0734C14F8F8D31B1B2C357FAAA44467CB218
0AB1DF2288533E687A6A893A3EF3E520891FC807DDC7F0A7884DFD40B5C00413
10556883CEC750C615EDCBCCDF3FA0B31F34CAE2D347A1E93586EB95FDD3D1DB
7157B21B7A9DD8913DDE9F3B04019CE0D724C1F6521925BD4FDBAC36DB8E0283
5E748597CD52F41C780BAD637C4D7580CFC0320FF03F5CDC3DB656367432F670
E1EA6757CE2D6C995F427B31F18A672D31DA3CFAA35DB22ADE1210277ADD2080
4B763FDE9614BDB2EDFD18C10D3E6FADA25CCBE7F7924AFEC7130DE52A490DD5
50A27325171953B66FF7FC11A7338F380927E5F20F65E61032E53BD00CF49E0C
42221FD0ECA5100F4FEE2DF1F839B2A5D900EC8D437D7E968A4CE41B89961BBB
7F30C807B959F9270F7CC39CEC484577AC6B2EE3FF223DB92A482534A58D7FC6
B399DF8584D5DB0E5C30E5A42DB22DD8E13A29F907AA15E2CAA936824217A1FA
558FEFF0485CAF90627DC9C0AE474DAE890620BF249A218DE01B8B920F09E9FA
8EE38CB1CF69858CFD235685341F0D95B27ECA06AEA1C215927B9B509F7B8ED0
F3447145128EBAF2B73398289AC6CC9AE7912CD3F2EAB2010152363BF9CE7D96
355721BD5810723ED1EAF9B88AD6A9CCB5F6F72FC0614C2512DDD4832204654A
5104DA365956B096C1DF51E9B76BE1D0201A063F32C69E40D0F63977B44DC57D
2D73A7B25D95548D1DEF1B58D658AEF260EC161B2D9589EE8C8334F33342690B
051BD5EAFFC3CBC07187392D22FFE55A492922D803C91AF6BEB934EA33023152
C25C27C3C771B556A339956C3EDD05BE74CC57E6AD93A6A8549ADEEA0BCED9D1
410D411CDA75C4C5C7864FA957AAFEEA79FEC8CF9711C36D91336AE030414831
3B27E1641665CDC62F49338E71FB9A73E7AC4FCB078BB1A75AB425EA09AD8585
AD953ADF87B75E8CDE74E37C9AB7F35D50296B0B418AE5AE4391CC91AC0ABAE5
608930E599D101B7ECAFC15A5EF141E51F352F5ACF474B8D104A5677B231727E
89E2D90C9074F56DBFC2992CBBF2D3BE43FC7E8CE14C9FF7CB525BCA925A37EE
E489C7FC5E4422CB072899913127AFF918388EFB09382FD79729426B902E6812
216BD5B0F6D7AE9BDD7E614BFFE78D628646C32C1D95C0DAD9F2A2611C7BF34A
0E25EFB2AD7503D23492E7E980B2C4319DF4CEC8D7538AF44A083569519AF2F5
97A0F043F08C60B2EC222D351E9D566EA091134A841CD914249FC82D91ADECE5
2E4B3584DDBD03B345F3ABD2897BC9C6E095B804A9C7F00013BF9997611ACD8B
2253EE29D6495AFD3F52E1CF748CB6C0489438BE89DA50BFAC7999BE4A236917
D1F7F71D77DE7B4D89F524F9C3162EDDEA27A99A2DA9412B1870E9E7453C99E8
0FBC5ABFF0661E8255BDD1BC34C4BD614EA7496D58CE8BF62247CB10F8930488
5AA33F5133233547EEDE16EAAC1024DFA2E161FB6366C31F504CD72A82F621FA
0F11B18744A22B37664686A7608BFB68EB1B58B1722D9984913CFA67666BB174
AF131C2C900E5AD25EACC9AE031C4DEC6668094D1FA8536268F278E92560FB68
2B0123147E9E8CD09DAFD054A060C190218DEE4267826FE2892409609AC243FB
FB8DD3A1C6B5FBAA515F68E3D13AF1E8067FE8AD1D722E59AC078E6B3D451B69
246E1B04069357CC21D8439789FD52FD6306770A202E74519F043C7CD8FA2E6C
749D88789C56C3025C3CF00E04542DE83914234E64423B9D418C4403A105EA1F
C1D27CC6A4A1E67DD67ED59060159FBFF46B3FA6BAF9BCE3D81E2CC477721A7B
7FB7820D5EFC490F4B84A28B531B1E987FFAC89B9386ED6942A6888B1B3D315F
648DA50996583B43EBE59F7AA29B4339C799EA81748EA9F2EE39EDB8512BDE50
D2DB535CA402BF91895CCEC060E7E19AA0D75663AF5CB33D5641B1D6077818F8
220B924194E8BB270EAAA64FE96AC960F649C3503F0993EC741C41A0BDB45D75
1F6641FDAD6065A36614A681EA9BE760683E6CCC89ACF2A120155637A9CDA2CC
278130E9578FEC854A89C03B61AD69B87764A81AF067B6BA27930883F53F8CF6
F267B35795C7626A32B6E41849E5391C34E74040E6E7E797E18AF57941DDF7DE
2072ADADF7A31BC5A3C4E6BE9637FC8BD3E94D6257BE1B7BFB16ECCD2AF57B2E
E7205F707023A5FA5306CD8C2CE2CE93BD24D1225488A9B780043DFE114D2536
479E7D64EEB06D2206645116C02BA07760B6EB83C36829DECE216E9C9AC81F4E
3E164F6A9AC0955C00BE042DC2D87E2C0ED202ECF60883F13152D70D8C76E0BB
114F84862E6B822C8E6EEC8334019A1D2FA36F07EBAE2C3F39D2924B4AA2516C
618AA677D9F690EA169F7FE41F0F171BBEC63B9CADAC48FA62F116941558BD0F
6554E152EFD268E21171A1D98C252C028E75F84C6EE21374CA267D25115DD6C4
7D62A5097D8FF96CE8A5C8F9FCE901131D575196D496F02BF818ED3D21E158ED
DA88772235D781043CED8B0FD4CEA5F0B9477E6F64C0AA0C5F1ED2BC24B77548
F1E46ADAE083972A1E37907E1F199DE22A2B9259F0DB23AFC4748489D1F02B5F
76FE3295DADA1A1B81C7FBDDC7AB01C48166F2AB48FA1853639515BFF5EDE067
598E1B8DC7257A1245FDA84738BE165A609F79CBF49D51AB8BCB1A669F28845A
536EB340FEDCC1BDD57D885BC7418CEBD7C1039D8FF63151BB62BB3E92B484FE
87E65B2DDEFDA20A1818D172D0B301289648A500388A82DB4B4AE40A82742AEF
0B3B94BD6D97C282B086A3AF63994EAF506DAC03CFACDD70B4E5993274D3E69A
A6F6114C7FDBF9F91226F7569316ABCBAF5B9672FF8D90BDBFBA0CAB5052F14C
FAB082F33CA61BC587A5132CA4E82F35F9DF4D9FD5A11C3F3C112ED828E9BD8D
BB5A60E88548BB1CB4F935393FD4544A636A804D2FD6F7EB7DAE639A22D4B5C2
1602B15EE37DC5F4533724D785C22C645809C6B3B4BEE7459B22937E48C95080
2CC7B24EE992477BDAE8844D90EF0469468AD648DF75630D5E29912CD7E6362E
528E05FFC9E232D6FC5389570C46AF3505423EFDC21CAA28CF25D122E1601068
7CCBA357EC5C1C77239733D652E40177C66B0FA98EAF74A87B9AEC2D29AA0087
D516607CDF317345DBD550F4D3A85FEB2007E09F408B6FB0408B96E2ADEEA155
4980E13B37FEC33DF3B23FC7BFEDA3E33EF86C617365E9F141CC3CD485C3858F
2EFEB078DDDDB335A543ABB1E059247E276E206CB00BED125C8F78A48B2E8B81
071A62AE7E7856ABEC91B8CD1DC24AC1E0C47588C91CFFB79D7910F03973685D
D97F036BD60D4E35AD1AE40577DEDD7EA8BA95C479340B9E18848E9E29C9AC62
D022E21F6FA83A84FB5E1BD1465E84EC54E446A45C0AAB1256EBEB0D9B5DAB1C
7D96028198DFD7488D92D971AC0BAFB2A9B3C457CB0F90009ADF7DF22E721B8F
9F2759CA218F0E68D0FFC9CC45041B488CC7AB76EE15CADDA602C8687473C07F
4671206794D6EAD1708AEE48FC28955569B4CF96EAD1B32729DBE4756DEF2999
74B711279C25478E0A63F78F3460EDD4F64B4D2A5B3E660ABC749E6D6C8ACF2C
6986A41EF5F57E13555656242DE62DD10A9FC1F5DAE96E1A7A9C6023DE05228E
C140AFB0DA0688F326A406F9BD8DA3CC648E93EEB1FB7ED34128ADD92D6F6C85
71B6512A8DF217954E5EEA59EA0C7513FB6C7B69063847180B6DCA83EB97A55F
FB23788271A3EF829BB607B8D6E267243EFD320E2E52173E513BD9AEFEE12CA6
30B01A0EF0761F13888A4306667786F696786AD4DF5AF784DA0937C74083746C
A9A8557DFC573A228D6ADFDCC87145B9C3C3C5CE0F22D4B5DEC2A17886B2CD7F
3E06EFF0FE425138A90484712D9F38D9366BC724844FEE97D7DC3783A048D871
AC6F3464517ED20118DBBDD4FC1C15B283E2959F3E1394F6212E9CD5D1200A49
886228984F609F872CF41ECABC321E0A4F6F62668E6621FF1259C4DE58DBD2DF
DCFC03E61F0DEF4EF5FB3163C904E957AB8ABC04D5DB02C0BEBDB9FEABA272A9
4E1820A499722233B220056CFAACA8C087B4C0BCC2AAE1F05AB2CF9B4CC3BF7B
295FB8E3918CD673DC3B1859B9B7BA0C8AC8ADBDCCE20808A874D712730EA210
F01B7E6B085773D59788E039C0BD01FBB360077A16C6D30991F9890B7227EFBF
B2A3825821E0A969966A789FA2F37D77876B029856DCDEE6F046C9253F3B443E
5F62AF90BB92A5EF379D23BED8DCA6132D76C53B78A28BC434AF4C91C8424905
C482B190C7FEB04E13FC963C0478D72B621BDC0AD9724F462BDDAF81F41A5660
26BC1529147F19D128B598B6093CF9A023EC2263A7D1305B6224EA5D456E4DDB
C12135B2542128BBCE02EE3902A286E7ED3B5537727D461B9C9B15DE33E67B25
744E2FDA2E47AADCB3291121B58A6BDC7D7E585A9C849CE54A33D63B69215176
02506CB180390D43CF505B0C6D1212CCC7F398B49BA390351A942C82E3E05B19
390A1775D2A5F9EE021B2227D762DCA9515D6E911192A0772AC9CCF99167639A
74B00AB9D8ABD8ABFBA9D53C42A61026E5BDAF59973977744549C562A5BE309D
5D926AE5C673625845E1981A33135A82663237E82970FC0EC032AED2A2FD2D94
8114EEAB1292412994A5A0298BEF561152F82FF64CD3298D11237F9604CB5163
EF7FF065FE895D0F59D9E57DC8F688D3E667D69CEC2F78116EC8583ABEEB71D9
592AFE1D648A5EC164BA4DA424125D1735CDCF888572C3D4E2F02309D21B0C7C
563CC2D2EE272B0674040D7B82B7B40EAF7F0EE2FB5644503A563F06AE330087
0CC9795DA24E8E8A0E615D13BBEF95108334977E7FE842A2159F2B9C85533A69
6B59CC5631C2A4D2D9DF6A1C45DD0AE3299C87A4EC4CDA29B54CD2EC33F618B8
CA36FCDA32FDC097B1935EA526D43F2D092368CFC4E14862D0B702E894290BA5
207A4DEF6CE2FDD0986C7633CF5D3EE91CF5FDA380B47E99A989CA1551A47537
FB356B805ABD7FD9DBDADEAC3BDD5E113605DCA21404B91285599E58D1F25BC5
4EF0C516C444DB6BEC4CF3670414C2A7245444DD74DFBBA4F01CC2AB81DCEB39
6BA47EA5E363C4FF366CBFCD58155CC0886A60F27EF31C45E92F4717D8FBD4A0
844A8D953A05882EA96A4BC7AAAF9EABD6BB272B4DDAC2A26AF8891707232339
F3FCD771914933CABF613F0F9FA3E204BA7D14FF9A71AA3A1506BB97D6D835DC
BA80547619007C607301F5C7C276F7365F6850198D96C8EB6D6921D1B7BD7CBD
5840EF7B3457F381362AE29CA13ED2AE02B2C52CBFF96C06B67A6135F138C1EB
D88CC9D17543DA84E8F7968D2279C49A48C6301E226CFE1D3E3239CADEC7A971
8E82FBFF5F294B5D0D796A90FB81A5A18E98E97E0EE85CA6AE6961E7DE6E5472
11BB0160372E4C019A9B9AC92D6A40C4A95AA66BE98967F52A855DB02C498F11
F09165A76F64D7D5EB49B35CBA7981059C65967C51EFA6047D48C64C19A374D2
E21792BC0CBEF817DCE1BA4479E3A61ED5799165E2C781E6D9C2BE397CAD1E44
C4F933D2503C52AA8A07127BE1AA3359A90834F4A5C6383A1D003E4C104C3225
03F37A5AB40178F106488328477058B9BBEBD4A514626C26F052A95D65D942ED
54E36A6AB39DA95FB6020B097082E73509B70F0C64694B73BFF034BC6F0D74C8
BA15DB4002E1941504FE6D3AA62C4F5F1BDD390C32A10912E41B77C22EC0D1B0
F31398B13B39F69C29EB54490428B5A48080A0E95A00D0F166D1AA1D0F38D8F0
3598EC800EFCD6E451C4B50E839B5D76C739875A056E01C1A481E945FD890AA2
3745900DF0B0C18508304AFA6168B74E2261A1B0741D368D2D66F5AA22A700E0
09078F78DACE5A54C0701E385140447CB3990379D35B4D7682D1A0AE125DF60C
FF05C7454B82F991CDAE06A39A842755A79DDC1E281A8C34A969B80EDC94665E
6E17A4F5F3C628A3AFABC5D0922D917CDB0ADD125F3DAF96207B36E865797879
DD5D854A04EB3F5AF5E709F31F49844D1A9F70EE29B069A97BDE7AF2209A9F76
0CD237F2D869729A22714A5F0E7DB43CE31215A0DEACBB90EE44BA8C5B968401
A3CD81976D2140ACC6FA3F605EEEEB723EB1AD965E8A5A3ECEEBF44790D57FFB
857764AE9FC2A0DAADC0D6DFBAFA59CBE6E358CF0EF99B5C327D0E7AEA139103
35910CA61F5B4984C9A127C4BFEF9A3BEDC15441D95220FA6EBF2EF10A76FB40
74806495A0A3962A818320FABC322A2A3F62BF60D6F2439E2D50DCBA8CE26AF8
26A0C2E9389C2B8BB8E38579D281D51429414C6964555EBD682B2A587F384589
44A0E355F989A6D77F56C29D62A325714D3FE8C3DC019CC01E8738CCA25F014D
9BF3327B9AF9CAFBCA001B7C0328E4C7DB807BBA1D0C9B3EE1860D5F11A241C4
889FC8C0F634CABABB7EEB4C30EF07FF70EADB5D360E52B0879E3FF37E86E055
C0970FF6E45FE00933038F1BE45766247545BB7EBD0D5E3926340B9F9D22F16E
40184A3697C368E4E09A0E23CAA2FEACCFE55830A76C6B243487AE5A649D850B
6E2500D91E324A828FB79D8915451C825FEFEF2FABE1880BA3AE7A981556981C
6250ACBDC1812004520E40365C84CB726F14A7E26D043300B9628944E210E2BA
4E584D11608E696F299A0821E42C97CC50E6C4D6C1ABDAA045DF38D1B7A331AF
7237DCDC2483E367DD892F6347E5FC27DAF64FBEA760D3604F156ACD003FC6AE
2449B2B06CC2EEA975E1FDCE064578CE287B9AB896001714CD4537F9277EF713
2FA8EF7281043D30DEFD2C68CB4E6F0E249123E40CB7069D9E3D8AFF77E26D1C
44212DE67A96CA9D0BCA550922E73CFFBE4201AD7462760440A2317E38B02647
B723A196F80801C400F37D9F913322F0B46133699116EE1E2FA54E3897703115
6C876E12918275E17D9574F422B2AA7037F55F05E547ADB16F56669A201DA41C
13BD2559A35F7C4AF039C7D12B6BA9169218D70EF87AD5DA8EC56BBEF2B917A8
E8E67A32425B32DB025CC6633390B4B22B32C391633A9B6B41ADC8D0D1A65AE6
675BF7522AE89BCA5BD92B4A41EDF74BD6546A647368AB4563C8D558D47FD0D0
331085614FB069CA8D80059115F25816DB2E6FEFFD6D732F98B149F5F0FA2C40
F32C78883C1425782D7534C5486448FC86B1CD00AC242FB0ED953A566489EE5F
1548A11C21562D863C371D8202AE3123CE9D224B0BA4B135CC8709B34137EBE4
47A68F1A9E881DA9CAA403859680902B9B5A88CCFD133C91C1AC68C7C8754DD5
9F00B920D3C62C04AAB48F6BD8C8BD63D8412A1D038EA627ED64658353BE1CA3
769040F003E922138986273DF6CFEB55341D3FCD1B53E15238A93F53D2E9B742
E00F769D7C8E1AB077439ADCB651E922E05D991E5C6D71CA6F51CABAAF6F0F96
059F16748F7B1B043BC2FCD93C18CA4063BCC8EE90AC1756B426A936BAED123D
BD4D724B6005BEEFF3FA45A3B0827C61ABFA9DDB04CE9F7C02670CAC5ADDE78A
45B552D7C6C98468ACA69BDE8DEE5F06D14E4FB96F0F69193E868789380DC127
C1A01C7F3C9BA08A087D28C9FFD6BC993137C87A7B37139A83185B7569629AF5
0EBCF7152E3715510FBF60F16750CEA4A1DBE19DFD88B3993CAB581A7E340178
D6574F69F4EF02E372A1FD7BDD577A273AFDC1A318F77A31D384405E00E1EF63
58A8DF8CF7B4AF6BF074A9EF6D192C26DDB6555BF349F40C318AE9BEA6270F8B
E9F7891973BBAF9213B43CEECA12BD18993C155047007662F9E7F4AE14E8801A
65340FCADAC222B3FD287BE72B87834E458C19F4935031B9B500B8C97DE269A0
9D9FF7422FC91F24878E2091EB36923F31341B9DF942E732F5332C61623AA8F0
7CA0C8F94C5BC9BBEB32B40A87AD74EF10629CF72FBB09F9F27608073B580ECB
45053F0F2A618B6EF08086FC194CCA784A02F5FC193EB3F202D9F4FB0387D888
A370419CC980B4DDF530330D2690839DC0AAE1F2A93D71A18BE9EB710C0C4158
958CD6707E3DE6C99E7B22C567995B8EDBCDE9CFD2BC34DF6068C72D3FE008DF
321408BAFBA81936E6FB44CDBD739E86EB66FE2F4F06B08FE458023905D41817
647B7D2C63A8B8D708B2B900F04FE2467A72FED312680E7155F6CD439AA96488
958D280F4135C5BDDEB04079726CA43FCABE49351B4A5FED86508444261BB961
1DB2291F2AD2585BF559E6BDA1685A2CC27E820401628C3994C49C54859DB5FC
6D3B9BCE67153DCEBDEA52C72153C48DC62B435E2D60435497EFE308A663839E
ABA33EF369C5B372666E36BA4EB2F17EA48249907D9E501D27DAD12D2932F016
DCE03DB940B2714AF0F610D7A7A77C415D05122439FC3BDD16A69CE127645D56
4B8ECE515BE82B5BE1AD90B13720D2293012310EAD28003885443D4B789F3B59
81DFEDFED146296AA6AC1C7D598B33B68992E7A2F38FC0102D37B14D7743D972
5E1E1A83C27343473FE2C00C904F86AE911FDF34523601B86361D35B0C05E68E
1C0C20518533DA77B3495C30DFE530A868D4872655A2BD4F485C7FBBFC1A88E1
7F13A7F84B19A149AE0478BAED0988228D56F068D2B7D25F57DC74B6297EC022
0C91F8BB9AFE742FA96456E1317908ACDE09A8D7DF149E8E3ECE04FAE2EAE4A5
183AD800D1FE8340F7D727272E4D9457D8C2A1E937B47C40271A2650943BFD08
68FBCAFC4DE907FFCD365F3CD9235703F261C63CCCC7D4581D1D357E52311AF2
27B3E316B42E4C33F694BFF0ED77A7847F7C747410CBBA2473F5869F8FF6B4B9
5F4CC83D93AFDE394A7F95FA260EA13D49E592358916128CCEBF8943967A33F8
56A40BA5B302782678B62F595D634D4D311EEFAD3F82143999DD68E0DAE15B12
2EE89817433A4A9F9F19726277ED18E1447430558F9C8957032A6D45BD084D66
78957DF6391153F939FCC86B8032AB362D65C77F144A456D5A77B0C43821F043
91C0BCF08208F87957A6A15F77E1E234889B0FE75B3B2C797DEFD108C15E44F1
307BA3A8C49BD1BEE367846CF0AD1922FCB9A6BA94EC16802DB8ED8C15960B45
79F5431A92295BB7FEEDE3A4F983FA3424D8908193BFF7CC9640746D0F1FEF45
942CEA347D253E10733C2AADCCB4809A32442EA54F13E1BC55E428C82679BD82
73610FD0F8782225F177F11CD02925F5FAB55B0D23D72E780E29979DA702C74C
1847E4DAF52019012701B060002FBE29116C1998A08ADEB2B51FD97C947F3CAF
4A17CA0F8BE63D072D5A147F0A784F0C5A4E1934FBA251CA55B73D751746F87B
91E7273975069C907199D36165A282C7C6EE70A1B685A7B72000C7B2DAFF6236
CD773386E362EC787A6E990F7BF552E25EFA7274938E55FBBF174FAAC6A56DB6
1A1C8701545ECA6EF2160CA7018895B617ED9381E1A95168DC1B69BBA87EDCDF
6918D106959EBBD9B874F86AAAF7990882F149552ACBF1101C0CC34540AFE146
4AEFD4CF36A6E4AB567E41FEAFAA5F39269A9DBE9A143D1EED8BABAFE9416AA5
E06C7C4C600BF38B70C87E5ACFED5F0116A7351DAF147B6C496891B9F3400674
5CCD5252B789665470ADBFED8C929ED08CC0B325BA32CFC187F313B1C5E2DE5B
1C88FADF22976279F1B8285F5EEBDBB94C4A599DDBB64D567D7F1814E550BB18
DF86BE7E42A946721C136745EEDD97DB9551B092C99FEB3435C7606C5DE09FA6
98B4855DCBF33DD70D9AAE0959BE049A9949C285CC72DC550BFEDAEEAD411DD8
9A32CB8A923E21F5048181C586646D0C41955DF63256D5372F6AA8E5918DD649
69BE4101DFDDA522FC2A22773A5148DF78B4FA7F9CFA275EB02313C73A6CBD48
4908FF78EC89C3C1606A66A36A5D81BD0FDF6E2F6A544CCFF36F8AE8997179CC
9BA8A34F1E77B2FC8CF73D877D1A660D5056FFD2B2BB00EE212446E70A536F16
2CB22D6B6BB85AED82C2AA4E2B67034F7316B5922CDA33478F8BB69EA1BE414B
79DE499EEDC5920F37985232D8C861F0FC7C25DD5AC9CB8F043311EF45E6EF1F
6C389CABC69B231B03313261A3946F7493DD611F3CE69BCAD8410DC9787A8C55
8FF810C440F0C66A70BD8DB9593D119354DC4A93EDB7B6F49D40CB7DAB82C4B4
329E5CFF8AB0F213E9D5CF55D4261F9BFD027E1B0B5AC9076C21D22C18A1C53D
4AEA7E5F02CC45785D28DE4EAD3AF23E8EB270FF2FC011EB0C22073FF5B4891F
92369E9379CE45F6CBE7E3178917EF87FC11DCBD27F6AFE6B8BD4E941D2FC154
BEA826E96D98EE69E8793F1C76C3A2577467242CC0BA47B411DF2A9D905E6FB7
FAD0C346FCB6CB449F1872A1C253D156265238993C5B31CBF550EE7E64A3684B
3F2BFFB49B4B37FCCCD1CFE55588A85CFFD9A23AA55B1F15901EFA66F9ACC5EF
9C37EAE812266982EFCC4C3252AAFB5F43EFA9F78EFD78BCD95862F2884FFFA1
7C26969FA7AC28A6FF2AA6B4ADF066E04C09553BFD0FAF0F00AABFED9BA35366
F7276F25C7EB68DE604375D3D9AB22AF9B88E1494C22A924E999A37EEAAF4D84
EB72EC36B571CADC60696F3EC4EF1AC5F13D51C894D53C87D1C2D3C5D7EFFCD4
773DAA0150E6BFE03965204975859AAE67B67B37AF86DC4D973601FB89443353
F1F032FF5D7F7C97A02506798075C4D8DE31676E57E765AC6CB4C052198E87F0
9476ECDA6F9FFC29FD565D68BF89BD37A2E4A0B6BE71A47B6867E6E1E8110E70
0A8CCE20183026D4B921C473289CD30DD9030A473D2EAC2F9B94FA223C45C32D
38934E40372BEA4D6D9EE7F639C8B27C1CDF04115FA459787E0FE496F1978C96
E0C85D0BC622011CFAADD34DCEA7FA922750EF5EB14C7F4FB795EC4D0857AA5D
6620C95021DF41F224F2158905238F53B5565761668A6EA34CABAFA33A7E9918
A7850B543F668A1C36B35E04B0FBF632F92F87265997D93AE476AB1532414904
3E713261671835DDF16495E1F18C1B074589368AB6A358AC2E23291325A17D6E
E6FFFCE780D288565525B144C50E93B534704E462A4BE072BCEA52B0C480AA4A
7B456EED703C27AECEDCFF8997E29BDFA45070AF2310F00A2A464B0CB8B5EADD
629454C087768D1F9717B0EA1B5C3769FCCA065537BC8AB471F4C2FE513C93C7
EB2528CC8B0472B5A579EC88E8BCFD4007B9926C68F4DC15189B303BF5B6F8A1
10A06C64EF29D5166AC107F3AA081661CB91E004CEE7220A24C0B3DA940D54DD
FCF2DB627140ED8AD5DBF7D86C88CFEC3605B2E626F2383C1CAB8F5D9079CC78
A958BD37387471ACB38A6CA58290D557AFA6B2F76D3C2C0D7C2FEF328543EDEC
23AEFA3FDB17EE7A70C7AAEEBCCA32CB4A81C0C33A369B19FB70A20A4A2EC8E3
3E7203015795FA92D68349AAD50B17254E6D298C5297546C686EC196567A1724
9580730B8197C423312669E4B3F5007A5C4CD14A589BDD4F1322487428769535
26D119551A8B29CCFE9896C3160E22513C8895730986DBA9A8C89CDC8AA291BD
13379C2413F2D404E4447FD0D5FAF0F6B24BA46385F2AF565B9F8930F46766E9
766A8286FE92A63482FB1DF0FDDAA9EF72A2E4FB46159ECCAFBE20F35A8AD872
22C1735E5C26DE3A10290AE7E3E01879B5DC8375014D057C2796FDEDB2321F0A
36B1B1C0E935AC84696C5AC192C7D77DD804C5B83051BC46076F01E2D91BA27F
AF9AB7A46CD828D5BF0F0F1E39055E86180C7D70697B73BFADEAD0FA9A15AA56
10C82FE9B6F9C2CCBC0FF2E710146CB25F5F62BC2C28BD444DD1B0EFDA768B34
5284E25E562E973196B30337D68CCB96CF1A1E66A5D5C48B868606F17560CDE0
C06EC75CABA225C1F0C77675C4E51B28CFB55F1CA07FAA96E915A05B9E620FA3
E79A99DBD82BCE729B2F33288FC7CBCEA5FD6ADA0092FBBE484BC486E88E6868
7741DECE045D04609AB6D8219F7BFFBAFB1ACFC72DC7529D7C61B723DBE28741
8C4662FFA7BF5C5AD1A6C3C3ED21BEEFB8AEEA7C1D501FCD57597F8BEAD6D1EE
9CE21AF6B0ABB76EF506F35311B03D04368B732AC551462ACABCFEB394A8DD1A
1DEF7BFAA1ADB8DA405512AD47B3F7E3B797F5C36423E7CA3E06C3F92E6E3EC6
A48FD9DDA44CAAB29A0B42CFBB15032363EE4DD4F81964FB94252EFC994E554A
C7BD3C4ED91E57E1B738ADF6FDA667FA49AFF9AC22BCFD6A8C9F8C9BCBA80E75
3154529BF769547963E67794F7D6CBD74CECC29592E102BA3314538183580EBA
32569A83AB5B785EBE415BCEF0B1271D26984221B5BF26BD9161D43FA97CF3F4
2A867E1692C691C2BFC1728529D6654E4B59
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic10-Regular
%!PS-AdobeFont-1.0: LMMathItalic10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathItalic10-Regular known{/LMMathItalic10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic10-Regular)readonly def
/FamilyName(LMMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathItalic10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC2
3C0E2BAF712D9A4BE80B6E38C9F5A449DD2DCD493C0A130001F01DB02EE2BE50
8CF3C1EE0898661980578B4396FB3179F301761100231D260FCA63E74EDCCEC8
08E4BD0AB6545195F32F881C99FE3877DF3BC94657DAE2BD20767AE9DA7D582A
DF256F4A52C57F9D228B3E1CC5DC93FDDE8E791DB1E6FA18E0B9B2423868792A
2BC90B78D9F9640524C758D0FEFB713A9A0D66350CD78C8FC945A63D8C07C8FF
5D66E1D7D963B7567F270FB876D2FF1E76F1FC1AD80246E413D337A718699FE7
EC080448FCCD4B5AD8453287D86BC727C140A6B2C1F62439396AEDC897D546C6
F8241122821F88FE9BA1342B044AE9A33CE496ABD5D7F76B1CBCD331A08C6DD4
37A78E15453AE3B1AB6664CFBD92B9982E6C0F5AAD267804425AEC523A184899
3A2D0259E64F914D353ED128EA5774EA6F87DEFDD1BCA35A413EA5D75E42E3B5
66539B7414AF09F23C1DAEFD913327B6CBEE7B5F6258CFB98B288A2A2019D344
E9335FA5D1887F0A3E6CD430AA65E3A59B396F035C7E84875F5A5E374875FE5F
2B49567A6E8C851A51D8BA4F6AF388BAFFF88D02B166F37F0CE1D4D4201AE26E
047084E2ED3E3662B60089E355AEFEB3964748C5F836C437C042B64BE3AF79DE
75AC4E7255CEC0F20E6D9400D29BC8D9BC2FF1E08D8E020F33BDEA08A38A5E90
CDD238866C66BFEF1B3B61F2564CCDD80BD048586674B94291DB7268CF59686E
D95927FBF8CD3224572B687E01791F40D51A230B9F12EFD86A7F90A0978CF220
FA314AB43197FE6E7C4F22C4BF4C4DF7ACC7EFE7C6B152984BE0FFDD1714ABB9
CE834B59B859F89231021E34E2BEF6C78D5697E25CB5D72D2A5F8093158818EC
60233DE494228ED13DC8AB6685A5332341BC02AB2064AA00FBE26BFD27263C04
461327FBAA2D88B6D1477815F4188980ECF40CD3AD1E29DFA34769ABC993DE8A
AF8A0E27487EA582D55886C3B2F6DED5322AA7F265EF97187DDAE8237E4A34D9
C496BB1C04588AE85FA5B209321554AF2252858B319283FC9468887C282A8537
29BD1E86B7A26AC1D3470F561C13613A73572D79A8CBE1180F4C4E8BEE8EC0B0
14E2B65B5E8054506521227674339C79F366B6CAB4CB030073A615CD431B3DE8
E976AA00381C839090AFFC5C4FD59672140465B77C5EBD8D4AA4CC5301982586
82BA540FC6F55ACFF8DFBB285BE2E3F8D48E10D096AE21862F26B45F455DA8C4
DA9C56A0E7FD569B8EC19D3B513CFECEA47F4155680D6C4DF122599C3ACD2F03
3B4BF52C74F27EA8C593C0199D51F71320FE8FD6974E3644DCA15254E4741D3A
764D86C444FD2496EB79AC46A7563F62EE15EA2516EB04B48AA9EB9627AB0E26
1327FFC1A7860963C9AF78382DE47B7A4BB2FCF281C9D16411F6DD29248B3E28
D3AB62A7E4477E19372B598F27332F652860EB46530FFA0066AD0EF0E90A3AFC
BD7FA23B43FBE9F5ECCFC105A9DCA68D6A0A27C1C7FF08862EAECF9EEE0B5DE6
0D5237D9317A26FE9C3B3B55E82184D99DB8D66A2DD6B9715B8C279A06D79A42
D4113E2B48380BC661E25A8AA3F115026A794AB76500F72ED1616CFD46F53BB5
1352FC0AA4B2834AC6D144BF46DD0305777B9E897CD23656824778227DC2421A
8700EC5E7FBE7D946130276CF1BDD3BCBAF605897C3BE227496A73EF3A79FE9C
03E302DA2B429F68CB3F70C5B36F2AD8A73DB1720C78A4FEEF2595DB07A11011
F6B78FDA99BE4F9D21F0BCDBF51594F54ECE28ECE04EA5D5F9DF4E622EDFA1BE
DCDFAC91B4FE44C45B6AADFACA871B861B5B969A01856CD69996E89D8AA63218
977BC1E3DED4AC10C89C360C87D92E4E56E1485B1939D2D947D03951B44164E7
536C3CB806E95D640ADFBBC1970F1ABEE543C7AD659F4EE2D486B09145D685EF
397B41CFD13A2D0BD74192163FD5CD5B296D69AEB9BA6FE7ADE552EF13E94C01
47614600DEF12C19C38CA07EAB0D20C2FF795077981D802140EA7435C2F82E1F
8460
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans10-Regular
%!PS-AdobeFont-1.0: LMSans10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Regular known{/LMSans10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Regular)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMSans10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-420 -309 1431 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFBD8A43517ED5F05168EBF9D3AFE
25EC2992AF87F286EB5CBCB7AB5454926B000DE86BC7DC7722EA9CC5AF351D71
F88C22A045179501515ECAEDA3F7CF9A23FF4ED29532BCC5A2D9C4566653DC0B
F99B58B303B412848BFDFCDC0BB4CB9FDF30F98236F5A2863FD3E28016CB2182
2E10F5EC6419BBDF2A9031E1EA217B147A06BABF1F87C9585634C5265AD31FFB
EB313C8110270894F41E54896FAE4A5E1A9B04BB8EE53CB5F143D8A3B77AC1B9
96AEFAEB5EA99D855A53026FDEE6A856D3616D7EA42379EC96B931867D9E55CE
3ECD8877C379F6C2FB63E92F146942350BF980AF3D7DE17DC4C2E4B304AFEFB6
F4A34CB06164596B7DF119147C59AA2A1A8D448EB219B2682388F94393CF4D74
532926ED5F2B9D281EF3324258F963D1A460D08DBF08127EE66D40C3C74B98AA
22B9AD6BB84113F84B085EFD4982BFBC507D1215DF109AC39E0B12230FD6DF02
C4B69CAB0B3375C9924071A89A799AFAAC3EE2010B8FC82E42BCBDF021C9DF72
D2D02FBD2CD3E161AF409AFC0828954F2BF56A15E1ABC0815ADB9C244B0AED7F
4B9A54CFA2A286FB4D9DE215B8B5879444B3E683FCAA95D0F1520A716BF2325E
E76716BB5C5DB5600A7CAD11F019AD5B3965B61494D228A3473256E4B8B22A6E
08F055AA199E8E9FB2B6F04B01BC31664D95FE7CAE16648E0344934054BCB06E
44A33F278B8A2215F77018BE752B8FBD6518461CCFAF61F07032398367B284D0
B0AAEF9509F632534C7084BEA8B52EFAF676C38D4A720D4078C0B3B525B7178D
9F85BD44B13272DA283BEA7AC239A3E1A0FEAFD3E9F7AEC9CE3296A054919E74
51FDCDA8344A2E134E285D682648203E81A5343EB6EB96FB42F1034835DD0440
3968C3E86CB7B20B53F9CF8FCB188D635FE58370AEB11453FE69A0DB8341039F
EA654B8FD7323E5536E130FA10100643C234CBDFB8E1CAF1E0C1D9073C3299A0
24F2E4D71EA82005EA03B106986AF98B4557B8DAF0F445E3A884196DB28B1A53
18E8685614ED45AEB1877C4476546BB89CCE98E672DAAE41559CD605D3A0B336
908546BA19F7904806B40AE9F9B354C260A49D0F9A5A63AA4C14879041AC1935
1612FB0B1E70D87D202BB69739202BD31EDAA120CE54ED0DE7EAAAE94F94D991
D70B5EAAC7A6BE89AE12FC2E5B8795122379B1581BBC77A369F72FA35FCF1889
1D5C096DD00D9B2454293E83D46B10EAB91C83A0C09316FB0A6FF881EF3CF6F0
74AB70369ABE28B7078F57A4D6313458E50D0EF41E9F39098B65E43FD1227A26
F6FF812CE452F35A377FF6243E9B38814F9CFE771F4A5F8ADA32416689DE8852
D903268B55D5F7EC0111D574BA4192FAE8EB478B7AE71A3F43E960F8B52A4B88
828D97DCFE9C170E21B59E05661E646D8173A5BE71EBC504A63CCD244B0A8865
2F5A1EC5546FD4DEAA2A82A209E241743C65D91E8B28382FDCEEAA89A3E0A6CD
429A2A543A65852D1A5B12F15CA11F3FF558FB0F071597ED37918F90A32C4175
B6BFB279024EAE1B04D721A6C54683966B3EDE9EDF028C0019ECC8CAA5E07458
583101D0DF5B7963E6EC917BC6FE271EE6C23FBF532ADEE1AE68E21535FA1B41
FCC74614129FECD357C3BE8A00D25EF38327EBE4A4D71078881731C0445AFD7E
A2004ED5C54658E35E1A0E9807D360DC5F76FE4F4EEF7CE1B4DDBA614FD05F7E
2D2E39A8E797DC888B65AA9747C1AF79C1DBFA2B4E18761EE75D3F611D602F5B
7D433861B13CC921709810ED004944D4B18526D4B876AB2F473672BFFE79BB6D
99AD5AC62145C7A4FE583CD8078DA0D6C0E48F1D065844515CC08B55C960DAC9
BE031F7626389BD3E392CFB2EEDE173452C0642747A58F73F774021371EDC57D
CD18653DE577BF1807023434FCDE1C8E7526FB5F8CDB189CCAC92D86370D5D39
28D33F7DB0985F0A3C2E9D379189360FED33DD98194C891292AFECF8A055EAE8
1C7D2B8D845D3F92FC7759245BD5AA1A57DC0E956ADC19E19CA5DF2F8CD96237
E6FC9CE04E7AEA2C7E4A824F8054FE402799EA3A54190E9D909671965AC8849B
3B885B7DAA70ADDEBFC239980A38968FF9B815E5DC93846CCC8A07CED537B2F1
57E170E61E6B7F4B710CF03E37DD2CF0B50DBB782F63D89425977C174DA23731
89135E0ABEBDFF1BCF088B4875981B3590EB6254FEE152B8F789FA9C0919ADB7
99ACF711607ADA252DE7CDF57750DE134BB96083B0267E52474998E3E6319EBA
B3D1D4F44B2743AC7A395E0A83ED0A777D023E226271C826E5FF8740DEECE7E5
FC166ECC5C25B81723F35B6E2C376C4A455A085D4DEDA1E64E8F09431633C3E5
A1C1BACFFCC93367F1C389CD51E7B2BCEC765248C2F863BB5A3540DC67E7B0B3
618E10ECF17EE37A6267ADCB0646D4C2533C0356C7D6AB6BE4CCF1C2A978C9A8
DAA2BC544560980EFA1C84D5348740B8A4885ABE1FC79E8197DBAAA15C2BFDC4
46E8217DC2E35350718D28AA6D2D94B04F46C2A763DAFF6642ADC1ADB069D7BE
B4251CA8A1DBC399EB5D0F829D893986A2F003EB1A3218EB83BBD59F36683025
86D730EAD6B05AD28D44DFCDC6C77027AD5C2E9F99072EC12419BE377CC7ADEC
7DA555678E261DD2E5776BC8AD0B6155E5208D976A9561F7A2A4AAA27D75E801
6345270887C0AC4B0630AAD1FC0B5E43AC491292E94DB36DCA74E4BB24CA63C8
8C0A635E4B8E7C4743B043ABD659BC2580A685B2B8A33EC0C118155DF304A3D4
CDAC6B7AC4296BCDC0A475363BAE2998C2FD754CC7FA7A0F008D1751CE85D367
7E2992991F8911FC31AA21685EA394047116ED7629C74E8171EE39B9968333C6
94674855FA15F3DF491937181FF24CD77631FE7FFD260042AFB4E19A95C7D9B7
1C7D637420B70C1D851B93E01E80D140B1D3E84DC0A52286CE9CF86129007D4B
BE72C55874B10A1413621330BBFBD9CB1C59F5B7EBD718248AA3FA53B85D3EE6
DF698FAC50F4174F1592B0997E15984F42D4B724DDEB44FBFE435F9CDB045368
2BB3519205D57BAC8E8D1035C703855412B353BF98D2CCD6A88B0A67C909E66B
76985E7B9D061CB5F20B5D4A4856E5013EBDE652B37E911AE0E16B1750131E90
A5EED0AA43FB91DF06F288DEAB608FF4395B19AFD46F6695153F1A30638D2222
8B1095657A53E3B470A5800B4FEDC4A99823CAFF87E567B96570D836AC8F1ABF
62A78E43E123A0777BD6C4C11441997E00FB8A600F088414D8992ECDA0ACC39A
B210921D08ED2C97B53738B4B2ED56EBE617BEF17B9DF4F312C20A33C0E343BB
16449961F30B34D1933177E5EADA8AE094B48AE11662FFD3D82CDC8C6B8E693C
A78282A08BBA1FFC28AA0B2660C443D24320003930CD829A0EC1E9F9DF9E9129
E83B988B18A9BC4C44810607BAF5735486A45A6FAA91966B4331FEC05449AD7D
0EFCD4C7304FFA804319305B7CBFB2AEE28CE031D22460DCB25927B9001E6ADA
AB86BA6B2B4E28F3C65566EEA6A408FCCCC97F38EC859BB4944602BE875C0E8D
325837EE7475CE269618C727B596C3C119E92E26231D0086D6A0CA26D77F403C
06D65B7394BF1FC7D06D3682DF6B17216756AC75CB0A6B8FD43C58490E5807FB
5937EFF572CA73E4E558E2B016B13DD10CA06A919E2E8308B3CE320C7448E0C5
0541DFB3E5E98186970AAA6D68B6F7CC89EAAF585B97EE0A1885CA97B6B40521
8546E5322FECD2F1FF85CF470F1B3B617E061104A978FEBF5783565884B33832
E598350A470C355ED1D3A0ADDFF4C3ECD7CC083D70252227836371FF838F6F78
8F3539558236857EFCE58DA619324AFA8E7B0E01A2D369E9DD9EDE9AC14E4FD0
9695BBDBD7994FD6CA31284BA7C4DA696046756D986278D56C22EE0220E42A6B
C4B0B91385CDC9BD557E8A0BD7A9A7D9B6856E23E0B550CABBCA69BBD062515E
16F653C7F38A209281BFEB0FE849E292D6FA3E7B6584779D8BB0797C30E807AC
C6151DACB35708D019A7B9AF5B124290AAEE8EAE36D1249689B95DCCC0576057
EE2EB1058D670E11FB243E4876AD9015F71AC4F78C20D80F5BE8A86EE175A3D3
261F152EBA489EC9E5BB44ADFB7558DD95364412907A0811E8EC4075D24EB068
2E7602CC252BAF0E3503300CB5AB595D7C58123CE01E1590A3015450F9883520
451636E19BC9CEA795AF21EF3258E5238D15FD86F9823D235D1907954B8F5A30
F6AC497821DA8DD730A54885A1164A287A8C8C869CE3BAB8C4891D68A761D9AB
5E1A47585A4736B1045640800B0984898282CB81A3B8188093FF5CC9FE8D9AD1
6D04DE108727FD7C001FC63527F9CC772D4890F05058B3311810C6867550C0BD
F62364BE5F80E23A8F5206C817E75FD12153EF75A00DC599523AFB8D80C54177
E7D853363B246759EC16209E840889804C28E32FB3BFF145BDDA844AFE41C670
9E487288F926C658B30905B56CCEDE37F37167FBCFA2CC9AF629638CBA1EC08E
9F58EBD80322680FC4456E2E0FAC9D31CA1B8B7879B21FDC78BAB3C944BCDCD6
A65B67F3692C8A007FF162F64ED65962C52C7A22BF7AF3BC490D2046235D8EDA
64581718ADF5FBD7277E57E9919BD1055B0C3865852D1A5B12F15CA11F3FF558
FB0F071597ED37968F89385864B2CB30DF6E62F4C135D31756C2EBD239A0989C
705C3684DEFF82699C0F42B3D41AADEF9B66291911495B0944DAB553727A204C
65A18A0AFA2C09BA5901A21BC5A3C4E6BE9637FC8BD3E94D6257BE1B7BFB1472
55171592ECF80CDD365650AEAA5E1D52D8F88DD49EE66A18A785B966F2F87215
1505BA71296A18E04AA75B99F091D4876A83184F0F93C9A09C65A698455D1EAD
5C22014A05C3E613E093228678586D1590F4C85CCF00A967ED60FC7E9B9BF26D
89F808B05C2E483B9171450E4CF28EEA6615C296181A2ACD808BC68EC9476D35
40344C344C2B60468F2EF9010C645A00CCC95B68C83FCADF3F1D0940B1D86DF4
B2EC81023B5B9E354CFE201E2EF6220BCBB479309AE973BB998BBBFE4C486AD8
9EAB0D0C229C0DD9C17F15D490A70F55BE1A6C135C1123CB216D77DC5FBD69FF
F5A9A7B1874BC65B1F468763282BC437C5ADA4086BBB9BDEA30FE67FB424B337
3F37DC4B4FBB23CF81A92C6EF1F4931DE0B7C7E22A39CE53FABB454EAF6C0497
97CEA95428844AD4E450427A92DBFB6061F8B1DC1CFB1C157CA626EC056A68B6
6C652833CDCF08803C36CFF6741A5C45AE186A2F9E899153F7F2F9E5AB5817EB
28F9A81BCEF06D768E9AA488079366B9E331D0A01FCE02B60BCE7A4975433D1A
CFD965F3C47D22B2B8E48DD5E4ECEB25B18BCBACFAF313AC51BA6360C4F0BC34
6CF0AAC6E0FDC9A90A49DF2C1C539755080AA332B33481422D0D3FE03EE61C77
4D39E1F2A3D374AB25B33CD03825FF80B0C4C682AF762302005B0400CB5F7CB4
982A85E65A0951E0B20F41B614C43F5ACD9126970121B0F16C9293AEA08B8FC2
5115C2B59B1671AE16E0B35E28093CB8EAC2E6EE446E7F17182D266F978C8222
761BB99939E778C4B37430AF88A3F85132DA00251F5A4E3AD99E47E4439FB5F3
27842B7C07EDDFCC655BC55C28705A1140BF6D9AC356F55822EEFE030D080291
D452ACEDC5D0E804D136D99B130E3BF1663339F4CE8710E4F3D621652DD2C7E3
356119D1E4BD658E9EB5C64396D14E541FDA2EE73E38B3362BDE4FC9E600BD41
E30B56D88F2DB4AAA1CF706F141A0A108ED471DEAEC54ADE2497021A2B138845
2E5D5F195A0D61A2E5CFC76D816168B879E23DDA5BEFAE5601A9125A3B90CE13
1D3B48612958B389F643AB70F05A3150435FFCF92A7779C6EF4E98BF1D5888DA
C354013964E7B15772BF5D304E3DAE023DAF73D816CBDDA634BAD23DA4DC7FC3
B4C147A3CA6B939B4B19E81AB22056D6564B0C2F3B595C9F8B8A3106AC80DB85
CE6635AD8EC793DA7E638388619EBAB9C62CB51FA723C5F22B0532A91A1CB942
1DE1DD7BC5D109B52B7093D785F43D7EF1E43812D566927F29AB24C087E0F89E
AC202FC8AFBFFEB7B9107833EB41C864CA53EDD6880C3D75B079C63B983F451A
4DCF54441D2E2D5B38F8D4FF1997C6524E9964D7214CE3CF8764FDEFC9ED5DF5
588991BE92E4F23EB14AC341B307C9106E1820F9F1844DD2EC4C5C58AEE11D81
27C5663D02A3008D9542F00B3342404EE1EDA12E74FFACCEC903E9ABCB6ADFA4
EB07AC36443DC19A5900C03C00B458426157AE838C755ADA472EC3CD85FFE717
1CF4F92D539D3293DBF97C4E7FC581F54759C550CAE58B26ADF5E7524C729305
DA2D0F38669F0C1927595AB7CB3397338DE5C961B3AA70DA22E24F5D5F7DF0EE
61C18E2D90D46BBD8F7B95A7BACEF0F59D7A86D619FE072F92AAEC6CE3913A5A
406A455C4AE0BC827DEAB840570975FA224A7914720E92784C5E7013ECA08614
30BE54C47A22685D87B84ECF255178D2D2C4B7F7857E7F55762825505BF7D845
97813143C60D3D1A515D52CB8732B9E06BBA3735D4459905072804AFA49FD272
3E90E176A3473CD094863189FA8B4FFCBCD6D275F69EAEF9AA8C50D9AABEED05
25C116ACE245596D4CC442AB836DAC4807A66F6F1227D0D8FF71335393E9F72B
BFCB7462632EB4D32435A384E0F489D72EF60183282F5E586BA0F374357D84BE
CFA8DB75819D33B4F40A08BBEBADC84A7E00A389D5DB40B69F81A0737A4EA1D0
B1F0BBDE4C21E3DC108365BEE27362B2B9547B7F1803732D18A9B4687989E55B
AAA158678817EEA76FDCD8248221B5D57C11305FF53A443EA9334659FB1B8C19
15E83D18817B3CAD46646300ABC90A568A8D9E0D6C1CB168927E4925532684A4
29F690536B79F694C129336C40DC786D901579C497C3EC6D98BCE6B0497E4A4F
0F2C9DEDFC2C3D1C14EC30CBF83E5729F1C074D4F1665F35710D25F710E45117
68F708A00D003043473B837D9FF5D17B997EFF71C0B00B951A7570A341DBF602
CEDB351FC747926594AD9E1914F07F659282255057A4BD4A3191E6B9AFFA3E99
50914CB0781D5442DC61E235A20EA2DFA0726454C7D49477C1BD064D8CE9D646
DCB9085FCF3AB2178B4192782402D4F78C39F044ED6AF03CA44330F361BA4F29
1D8D47BF8B6976162610749242714C69C6FC03D28415BE077393D77C96B6024A
57B5AE20CA48D1DEB4C668AE63B11D15A49B6E46D8EC621225A259A61AFB0124
260E0A4B165539944EDBECC4B4B8D44609656A9B4BF36A724D7F414849B63D41
9F4B45BB03148722C1B3C1764AD9D987DEA45368072750CAD0C9ABC3F49233E4
97183869EF2B04A9864319494CA4A0C65C626C8EB38F573208788DF39F63343A
DEA9D821A658006E6AD135F28AB132EC69E9A4A7A08C2F5AE0174990833C226F
12A20DB04821702D0F93FBF513D7B85603C8A0F37E522ADF2D327932D9B3AF9D
FAD4E9492EEED55C4991067229F13CE376FDD5BBC9D27F6D857C35FD568C4B21
07E8BC3CD6A1DD200D31F6BA872ACBEBA94F1FE5920A18A7EB469BF2FE0868AD
5FEDAB9A24D99EB12F66F5579AD1B2607C2C1AF8F72103F1A7415F526A2CF3C1
6B800785F169D8E9C1E5FB3EBE07CB1ED5EA53FE5E6D9A09EB31ACEBA9F8E0AF
2AF7C74DB79A2B45A47D4119D363B0AB3AE612FC23069DF8D162A2B400EDE05D
F412F5D3AF80887F93DB3F8EA2A7E25B58685556C172074527E260514D6618D0
58D7B7A624A24E9ADD421346F6422F76D7CED18DDF69931B83B3329DDDD044BD
3C3C36FABC9898C3995CE530994176F942821D2B314893F2B9317FCF4A5AC193
09E617F2CA0C7D35F28EE7422F7CA31B3A514AE5641A7DE56207EB2E7480E120
7329949BFAA4259A32EF3F1D6911750F761F9907A438DDF4506C6ADBAE868F89
301460A0C3D4B521916C7DC880DFA1EE1E270FC43E31513D45928169754EFD6D
AA3219E5AF8DFD8B263DB06519EF5B4DF76423A7DB7ABF711BB0C7C703843BB4
FDBCAC9F30D92CBBEDE059D026A5A2D9B65246D93E36A724C65B40C79A86D885
8830DD50D4A0FF28CBF3E55CCD8018D117CFA1598DEFC33624D698D3FA83EDC6
E2540414C7DC4CAAD2542B807009054090770432D63B1C903E565807815E3EBB
14C6AD0EA3E77DEADCB28F65FD2288E0DE96412F82723A5B16FAEA0A235897E5
7D9FA6F817BA69AEF2259E1A12F791CF64CF7BD79623962FB0309E68ED1789EF
28815477997EEA26D31D194DA347C0CBC91E57A63F800271FBCCD9DFAAB5E93F
903A8FEC0119ED1E6E83C30EA9BCF8ABEE772BF8AB008463B09B4CD634C5E6F5
BAB41A286B113076AA924BE26082FC12F01A62B1C78D857A01BAA2C5C2C79D85
78DF1E5081EFB6EBBD8ECE892063E0D6B5706557B831934ABE6D113D7FCC36B4
D65CA1EF84B8FEEA425E21913CBA31E0267C2BD4636F724AFED7E0558C96A7E0
F31A48B1DD6F27D321F6F925E2E8FC4B58E6CD01B59C73A14DBFB287B7017F6A
E0F5CDFA61BF88C32EE1E82A65845A59CC7C1B147826CDFA9B35807713E38983
34BD99CFBE66C4FDBDD9B9180627976C0EA7D9EA5958819F5CE03BEF6B59B669
723240EC31E9F9EF398C700948FADE7A6E4B2335E903D3CCD648A76B4A70232F
0EF82F448559F8CB85DD9909A74AD69082D52D62C959A39542360C638A47B363
1DB34AB2DDB7CFD30739F5638F9917A41081B83612B3EB27C2D8530C61A98C7D
F0449F81590719B9A9284E841009D3C81A0BCE888D2F9A6B78E6AC615258E663
C9D255FBECA07BE5CF6DF749B1803E3C1EF42D935EFB4AEBC656854ADB4B9808
2A4E7C290926DB52258A8EEDC66700FB549A92821750897D004C5FA7A412AD92
4829C2BF2C24F464D9A27DF84D86071B06BF6FE1B4C2BDC611BA31140569566F
65860211D121430D11E87AA6C12083B29AAEA996FA91FE82C131611B0EE9A983
FADCC302B6E3FDE8F35C619FE7B82602E25624AE69AEF32464B022ACFB895544
3960EFA5C3E0FE565DDBD45AE467A782725D8B3E30CF0794B6F7FE3D52148AD0
F1C8B8B3873F10DD19B813E15DA410D38649A1B1B360921675AEF8F27C12484C
CE6E4530541C1FEF198165415498597436449EE0F9445B4C8063B612B52CD823
2E2BB8D40EE21FEC76772B068BE063365D8C1887BB13D0DC1902B31D1DC2CF9C
9DF2B07BBE645A556C0086C730D91093F42EB0554BE826A2F95A986F8A63D052
24C9DBA79A84DC57C2EBDA8E422A9550A2EB2BFC8BABC1AE4CB0FD382E26BE0A
83169B6C371950D7EA612922EA97B59C1D004F8ABF17246D4C8C41D27CD2CF47
040B5255F62BD2B6A93C68B79E9026102990E064176B21C5E43FFE8183B78BB6
C934338EF87C2614D35715C3E996E6DFC40960E118A3C99F54BAD880A38BF73C
252636CE6A7D12A16E34AD90D4332D31C2662EA19C6577035F9EF833A4B1B51E
56065ABFEF1036EEAB8E04F3244F52F4D7C0250D658C633D68B6FAFE895787CE
65A90AFCEA9F50CF9A75519684785B73039B66EA4D2CAFA5ADC40451308337E1
B50D361D971B735BF61EC499EBFC84988AFFC667D0BE39969DAFC31182DA4A93
9000AB06DEA5AC315C170F158632C17F42128EAE3004F4689475892ED9B8F060
B969D4438A98A52B02183737B9E9E6D3D3EA99366BAA2EB284777A24DD129026
E160A6453D3FAEA6ECE52E4B3584DDBD03B345F3ABD2897BC9C6E095B807D458
D51B76C73173263805C120912C4A40F9E2F872A02C4087386CCDA558F5050025
A45A1049C9625FC6050E6B829B614BCA4AB1BEE9F392284E2BD1043E43EE8134
5E182C07AA0A48FA9399449616273B7D5CFC97271C11CF090CF5F36B3DA0FF93
246A390879AA6AA248B850A3DF9DDA78F22714FB9DE80D3833DEEC7848D7C0BF
826C4825CF63C13B40CE21656E37A0FCB6836AAAC07DAFC63145B05E3EFAC5D3
E3EB004A689C295DB72601D19A5487884D04B679187879EE3F15F166F1E2367E
46F3F3E4E67EFB8C82885D9D7F74EC35DCFDB9D794CDEF1A995E730BF1D7F063
A8419830FC907CDEC4ABDB741828D147C6450EBF5E7AC5FA295BA0A76FF7FF80
4898146B135BCC304C5A1C35ED8D6BB55D3F5FCA77ECB3172F5432AE022F1580
43BEB6A6820566EAD71325D69BF3460E97C92CC31DC7139C3C3E760D058379C5
014882A7FB5165AFF0E95E988114B4AC5E6DCAAE568B7595A72DABE9FE776A7F
1428C5CC1E86F6821160698242C7566FBFF8DA17AA315E2E1C635618BBFEE940
CE89127BD552B9E753381828EFCB01B35A95D0E929461A4A0166B3AE0673BB53
1BB92A1356887584B94B00DABCEC84A5888BA907890E2ED2B94AC84E717DC761
2D6EC842A956F9884A40019536053E2BD0287A3C313E1F43F07D3DDDDE40C2AB
B4115710C6FB48E552AFB2C2BC452857FBFD3954795643DEA2FCEAFCB4B635CC
9D88D8EF06C084C8DEA328EB687FFD23BC99D34FCB2E6586DE317EE3BC34234A
EDFFB2CFB9113CC5A830B5C5D5ED73F2F7D159C45B12286875546A3537EC6DED
AF60D1723DF115C7FCDC57DBB593278232FAECB356174BFDE732B68F61B19CB6
C0D61EA8F1D7AE9BDD7E614BFFE78D628646C32C1D95C0DAD9F3530651DF4BB7
1BDB3DB5D7275AC8492ECF2B562A20068380A59B6F6E4940DFA3D1002523E04B
E24E0A032DBE31CBA82CBC29FEDEE39359C351BA8960636ADF062E957855C4E8
28D61D7937837DF89B62C6E21AB81DFA802A39C5FD642AD61CD0776567E48DD8
D9094FDBA1613FA279A4DA14E2A8D7197B0F7D204DE6A601E8C160B0436B0D03
235AF50043582A0BB588897DA22D5C20F8A2C7CDAFD6BEC1CCD81D28BEDE22CD
263C60160BEC9FA8BAB9A55EF96A710C206B78D6B9EB6AC39B6BD772E8E2779E
6A5588EDF2D3BC8D252111E8DB45FF21B84D20BF831051B61AE37BD4586C793B
4E7904D23627E2FA765DA5E53D4B81EC83D03F502E7DBF202BA558B4EB271C57
922DAE1F23415C912EF1F70CC3895F4598A5BB79E23DDA590FF50155377D02C0
0E0F07C97277B173AD9F901D26B25E87B1A441900C9DFCC0F7FF114C014E1DA8
00226FF9AE5D98FFB02D8E94207DD4475611B45D1F1026A613D0D2FBCF4D729D
7E131335C212B30BA91220BFB289D605B6A8319FAC5C83038807C1CF9869ABAC
639B076F9522A9188CEC6E67F64B36C58C36A88F60969A764BC3650E777F2254
B2B54A972B3583047D43D202EC047CC23B82BF62646A00758DF5D608B586C124
751DB340CCEC2DDC9D395448D09F8AE5C4472A15B636F7BCECEA17F062BE3DF6
FE6F19A849D53640C5E597BE394D55A8FAFF09FF9AFF3CE6F97C2B2459661177
AF96749D92671386A21A1746A71DD2DFD10FAB2CD911298790A1A918750549B2
0CCB32D2B7C11EF06056690527A4EBD1F1355C3BD6CFCF9E20C9F30363291678
A7D920F128855CDD17E51BDD71449A9B7E90D35410E9FC9BF1625A2C942739DE
B8C2E5E9E7530208D2A856AF05D418450827DDE99E776709346F4855121FEEDC
70965D0185F5E174F0758420612059AA4DC1FB491ACDD3A0CE09DF3D2AA01AFC
9DDFC009015756101446BA8DF32E30062BC9CD9533DB03DDFF8F03465B6DC1B2
450D42BD399CD6885317C80CB800A292BECE4041CEBA92D692FDB946D81E88F2
A0BFD5C81EC5A93CCFD1FF296038CBA5719C17A44F9B5F4E39D600BC97E27C97
0DB371D59A05EE148F4BF935435AAD1748882D199B9B7DF58324AE6E3B639DDE
323A6EEAFEA964B4A6DA929B90EEFB3B1EF3AACA3FCEE17C7835239CD823B382
FDD02424F0BB509687B0C6958967CF82C547CE1F1BA09D861C5D5F0BC58BC526
CBED223A031BB54AC9602270528785F331E02AA401E30A909608E8C4C56CA2EF
0B672289353980885FE5EF054D5AE538348F53736896BD7508ADAA2EF193AD1E
8F143823BA37E501B80227A9008E0DD8F572D884436E862A02B218564179C9C0
23B7F92E948EF4BA6C72E63D1DCD11964CA636168CD464420EA747724E5E7D7F
020BDE094D7C51D1278A614DBAD1D8A12F43EC67BAB7373D6BAB4F201EB91D7C
99C1349786D17C13D70004F43BC14DC87F654239C8074700361D4B61C441932D
CEE3AC33B952FDC3C3B9D477F6D1981B59B4F70B33D7B638D4FD147E22731F43
647559A90A7B4F21F4026AADC7808CCC49BDEABC4DD658E02AC0769E0426C313
F48E11B936CA8122B2B8DF640A796F4BE98DC43EB2D354D39C27111B7A9FCCEE
111F30567D294DBAF36C8A89B0D6A120A582344B4E77724339F27031CB75D9A8
D026BF41741F384965825276E2B0FE907671EF8B6F2C8648D63D975FBB6DB545
6BE27ECA9C560DEDAA4418F741BE6E4FA13DEAC6C4F0FCB8C870433333766A88
FE23E05C921096AA97DC56CB17517DF95D8D5E51D994BACE39AC902E2000C12B
3D31DE5E0367B7006F757508FCB5D653DAD14A83E2315D23CBC84FAEC848311A
E8163E5C84BF9A609509DAEFE1C3C16145C2EC24E3221E75291BF9E827F48759
855891196215534604DC2653B9108A90C99438F4581F17B6AD83AFF5DC5A2FD9
3BED414FD9C32FA545510AEC7D7CEFCAAC59A93214150E094DC78A584CF1F59E
6E13E74C5CFBB828DA384BA1943518C5D0FBE0776EA17C52C3D0452031549764
58922AED09E56CC6D3BF92770A027E6F9C6592605A206046CDABD9D54EA413DE
4E7EFBA58BDCD0B2E9F6600943B0A5587553DA49D92EF4318E28998E07D1D372
48BB4F3D06424B5EDC5A9B21DBDC65B6C8DA146FACEE8E49B98AC5CBE49D8456
87BB12CD0913F48FC834675E0F271FB9A33DB9F2D4862713623BF1092EA9A097
ADB7C0ECDD63B978644B8117193C4861035074D7D66B05CAFBFC59BCDA8D7AF0
6EF6B060A0EC53E187893C462730C14CAF93E7AE5638CD88A43C54F3095D6F11
5BD772CC4C3ED8EABFF2230567998B58154582EA334C8BB3B65AFFBD62E1EBC6
3C182EFEB487A03399B23134DA7AC5BD0F503D3ABE63C3D4530E353E5270D5FB
1C45224799C0B710586D3E3DDF28A5864D566F5C53255C9BC3EC91BA2BFA6730
6C1B77709912482BB9F187F1279FF1C6109ED956CFFEDB3AE7F3478503EE68E6
0D873979980A6D4BD4128A5158B9B36B65F5F83E66C2C8397D23A1DAFFE71586
198A4597046B0703EB144DED5218D1FFA5F4099812BCA61A501D21F6A8A812C1
CC027C7FEA0A1B3AF89372E08DFDD9F79AC2200622A13BA8321863578E15C7B5
9E6BDE2866332FCA9EC2E13B4460236900BA62BEC0438675C93BFB1714F93EEB
462770CE65BADB6959B750A71144AF1DCC06D9452602C6756C587166AE35A578
F0E3442BF983B90CDB16C5317E493B43F8D11EC87D3070964D4C686B65B808CF
CC21F32777A4165FCE5AAED1C763C7F5CE594CD93A26BD00C7DEB59D63753FAB
6F4BF4D7B35D01E3A198153B3549111370EB71799DADD1A6BE6D49998860482B
626C628499DF73338950F885151F0383F5188E09A9E1B8C023F7E27955B42E11
9AF4464083CD0B55B8BCCACC8D0360FFEE1824EC7F9E54E92E75E48291ABB565
C1F8644CD5D9F01A26BB879BD6062EF555AE24118F105F6770EEF2A57E3DEC53
3791CF0EAE32CD4DDBAEE2F40653E139692FAF964B9CA0BA5B54BC20ED3F9090
5703ECD2964718CE9B2A4EED730C4363D4761D025AD3FBF0D53A5374BFEF17D0
27F432B3E0AEC8A58B690AD1613D52526FCE3942BFDE611E4CFF66EC4AA486E1
88596008303B55B96499A11672380CD95B44F2A9B05C38909548AF14EAE3ACD0
9B51507B3D3CC39B7994AA043E4E44E7AD3ADC6C73336EEC461C81B8128C629E
F0E86EA18E1315BBE974AEA2DC5B35092957CD9F412B6520E48EC59AA2507B49
00AF3112637E5B60AE1CECE81C816F2426D24C595818B41216FCE5B3E61FC4ED
B48D99497A134DB1219CED437D0A2DA2EDED2A0B6E30A17EE78F5D095C49F828
D3CF9ABC2827A00AEC209962BD3406653A98653F419EAFBB18DF86BE789911C3
3E05D53C5F042E512B2E4AF08B012316E752486FD5CA9E865D7C3B977284E5F8
4B725038AAC6952E417835F42C463C6F1E62512F86E3D9709E693D04ABE2A2ED
A73E7835CD2CC6032BEC0A209FEA7339FA1C3DBA60758C37907319AA5E3423F9
BC866B6FBB910B766B0D3F90E93ACD646C1B9E0113A1C09295667F372F2176DB
8BB9CC0E8A5A052F4D53D6124E3F3267EDBDAE35B3385F8B4958813842795F46
3A942A211DDF7F5179A1F26394EE81797F629FA6B66BFC686A71E401C3D7EFA3
F6906B3D8C355AC254508F6207BA17A89280FE34639833E29C1EE7A88A2A8F73
013AD9CCB7B21C8C516D79AF9D3324976DFB257839F80773833BE29590B7EBBA
A4E3CAAAFF37BF3CF3B287B7836368903A8BDE9A3F340F55B5D301BA87EED52A
6916DE024CAF6669085A3618E4F19060455971B05B84B2E8A8A3BE438BB17572
42BE47C2EF1682A05ACB1435C456501A6BB2E325B32A178A1E5DB965018AAB7C
7884EB7CB4542043A31C6F8B4D4D32F2F7C002945F2928A218DA7B66FC13D706
C4D7F6CB65990B7D718F6A16F933DDDC891E9C6987D0EF50FC3859C0CCD704BF
425C64379E8F07D1B4F53F6F860FDB2BA4B97A09D1EEA744BCB83950B3B55DE4
5D887C483E103C1EF48ECA5CBEAEF0E30C9C97E095CC82B1865ED0E8FB1BC460
59CBF4CB7E81A0E37F669BEB740F13AADB74F675BC0693A324D5BD4C1ADC0DAE
9A91044DD214031FE8339581A9798BC43DB300B5113FB87655EC865C3BEAD9DE
F9F2F8521C2910464AB9A96FB08FD0F3114A13C2A8CBBE519A8F57C66E29E1CC
E364DA954F895436AD8E34AB6B32B5003F5D18F039A152A5C611A52AE12A4658
8DF13131F9DB8437558804DA9BEAA7E70B4C0C5CB3807EFABFDCF9F836D142BA
9DC9FBC9D6E6646AABBAA96BF229A004245E590EE6A9EDE3CEA40FD502ACBB13
9DABD34575DD1D97765E4F69C06E0E7854CB47132679FBABF1DF31D16F8FA295
CEEBD5539B635B544499D40AA6D343664B19774783F390D93E1A3971EC0CC9D3
D768CCAA5872307AB505D02D5C2644779E66C691DCCE64B3218933452A24FB1A
8C30FD6512D2EDCC7996CA18CEC5780844BAF1DE96AFFAA9A7FA81BC79FDEB57
0EC16360B75E6D18B57ED29D3BA29C7E6C7A2B0D86B7025004216CD9C9B0D14E
85D92DFE733657BA7C2104003CE178CCD75A3B1E3AC1950186E0DB76B4D664B3
9CB56007BF7CC083749CEB41151AC74059F3693861AC442CC827F809441FDCFF
973600F469746BE07335FA4632A25690B759A4BF191894977F894820E9BC22AD
9CF62C6CC4B4DC0B6EF3F945B1D97853B113E3D9AFCC98AA7117C2D597A3684F
43A22990EE76A4C6D50727B83A75006A44513AAB8A076F4A6739934FC130D357
20A37E511A043B25D4477B713B015A306F1EEFB6694C1311F0F4FF29D43DE342
018E67F6B116ECD19D0A6D59F2EB2C994C0DB80E2A3617825070AAADF3FC7112
1DF965136E5D846F2E9EC0646B0DD0094704C02E2FB6C5A1FDFDDA92FFFCF7B2
D6744C0F0A489FCA954A0C135B844618DD087768EC44A893A7EECB6D95C35BB8
7DA2B4A6F86A443A7BCFF3C4EADC91E9061F9EB6F8C21A2581078CF91CA4EF83
2E7D6DF3E9E03BCCEAD202AABA714EEFEEEB173B2F166FDA22E38A447F7408BD
9DC974B521AAF7B7EBD718248AA3FA53B85D3EE6DF698FAC50F415ECABF34840
1F4EAEA57B8955BA7DC58262E52A30CC96D2271A985F7377BEAA49275B5E62BC
871BCFAE9AB64225827FB951E69F5F24D03D05ED34391BF881DDFE353EDA9F08
8274216CBAB096E8804492D23773D92B41C75BAF27BAA2AD4F426E594CB35E31
2710D48AD36C39363EDA6BB45BAA486A85DBC2F45566226D9EA08B48360A2F4F
181909ABFC4713C309364EC9F6EA00BCA686611609FAA32E9099E2E8FD5A0CE5
50FF5EA6D00E3564015D09906F94563D4CCE02F844A9C839DFD377F7F4332FBA
5C0D3077FBBABD436AD86BDB2B16400416A7048A811626E0CA3AD54070C80AF8
2DC8CCC76C007B90466167D1AB710ABBE19B2C7C3BD37B2B6300A083E7D1A125
07FB48161F0D293A0032D6CF19AD21811FD0A4E11C873E88DFFDF2E3E5E7B769
96E1D85CB9B62BDE07EE8346E30F68FB69331E39FE966AC1214E4DA30F2D2AC5
15EEAC8E075520156C2CFFD8EA20EA384D74D11F9273358E7F80EE28813D66FA
AD8EF6D6DD77674A3480CBFA62794496BF3FE420F08D2A07B4F53B9FAD619964
4165A2747A198D86A78F708DC404283546D7814BA53FE7FA161FF626461E96BA
77319C3433A852EB0B3E5A1B0528FA9F8BCF9EB55B4E443CE79BEBA97AE481AD
4AB1DC86D8BDB89DADA06B87EE6B063A416ACB9550790198029F2205E51C059D
CE4E6EF6E89AD62D53F8A4BAC182999D231A2F0B3E70AAC7E2D3226CB034D1F2
61A00C76FAA4EB347390DD0833B3283B75010E5542A389EA2F787A4693E25492
1B8C3FA4F9F7EEE92BA769DC7E4C5AB3F50FE19F3A3904ED7C5543D23196B59C
4A11C5BEEEABF1FCA0E3E26DB60D88639B27CCDD74EADDD86CF9DF579B3D7234
9C643723C189EC1FB27501361CDAFC3655A9221EECD425FF9CDE81DB6A122A70
DED859911B0A0804598D0E3C90E3AE0FA61274A5062BB1CDB5AC5FEED5FB69E2
AACCC8CBB70698E0BC5560F2A9F926A5855D4401FB1F62CD6C9CA9EC7948776D
0EB6C3A88D10A1DEF8E194E095090958F9C7079255FE5C958B33971B67D73610
817762EFA48C13C3C2AE1C9E87321EFBBE2BFBE55769AAD700ED6BD5A013FC3C
7CD3F340209A802E7A1D33B7842B4B07436844D9F59948C99E8772503511D86A
08E1612EF010DCD9299ACEA7D4AA01770D98660F8D9620B7508B898B740631E3
60AA6DBA1E54991EC7922725600CA64C693341F7D4011AAE2D2BB797DBC6191F
8081CA1B6042715B72B4368D643CB7D82BA474B175215A540A6422D802CE1EE6
302C0AC1C7CA421B81B6DDFEA56902F018B08F868E7D5604DED821AE4C939B52
67804B0409836B6968F3F1C3B79341CD06E983A7CE9009A72B6EC01E7C007289
A702EE7999C2A97A199035EAB7BD49EEFBEB68157F979DC0DF7EE8E51C4BF6C7
0BC794C6BBE8A2AF2597F453C076341D757B09A3E3EC6954EC35AF45D1636BD9
3E154262B37BD16AF15612ED9AC48BF60CFF85EB4DDDFCBA1A6971678EA3492A
1641851FF8280D2C1BDD3B7599C24795854136B0ED501CEA8E19CBBF7C91D74B
FC107FB82A56592F27FC27F1D49D5FF4BBC0E1623180793E351159C5FAB5960A
2E3E913CC7EF0A07843E37CFC4DFCE94A4355AA673AA61555EE91D01EFAB45F6
927C79A86111E0D53472C70FC6A1EFB0C052CD7679FFFF591DD50D28C0A71C14
99CEF50F2E8C9742C8432AAAB19E4B6CCA656C805A230721E51750128367A0AA
72945C9494ABA8C58F6CA8228F29E7E73BC9CA5E20B1B2C5ACB701BB9F706F97
54F6798BA7B8225E8763679D012D9FB775AB1FA128C91C36EEE43CB41592BD13
837B9EC9735991A7EE6A4F6A047A230D44CE6210E275C4AAC7931329F71A25ED
5DE92278F31B2E573FD86696D98800443F32C94E2FE3839477F4ABB1565BF009
732AFFDD2FF708C1A3F3FA5CBEC411EEBD07899B755DAC1126CE5CF71C5BCE24
EA5CD771D0452943086457A0A9E830C0658485CA66A65554C5AEFF1640292FCB
CD73A9F93A2AD55F57D78667B38E110795251CEBE01D7F81D61317763D0C226C
1DF759FBA35B5D9288B8F54F0FB93B7AF74423F534302F11F0F9E782EAE32417
8B35316D55536783294509A4B1C135211F81404A39FDB273B64ED685BB2F05E6
532BB97E36C76B0EB28FD20AF1751A73E37D5200F5A884569DFAECD2F7F6618C
375D1EC39D0B866481D723779B37801F9AF7ACD4DC86B73EBA2F8F54CDC503FE
67ADDA409A239E153D16C17CD2F83B971005CA4FBAC0E247CC0DDDF00B36554C
29EDD3DE5931CC93B4859A21AFADEEDBAEAB31D735233093AAFA54FFA50A3C77
5B46790D67CC0BC63B05BD4B9621A6A1E57DFCE7C5DFEAEDFD98057DDC351E46
4C6B20242E8CD67888F92E655BA87F5EB2D259FCC4A764B4913744BB8C222DBC
80B3A27C2B2E9819048E9AFF58CA2C6701C4D3E39979022FEFF095DA482A48EA
00E71C0A4414DA781D49720DC88187A0F82B0BEE953525372CF172D46B6B9441
2E7CF8B2C54489E6D6A8959D3F244D8AE9FFF3F592BB136F41F11AFA8CC986D7
951B792DFF270E096FDD8292CA3859740F191992BADF5C684F561B4413C38DA7
401609733F47D9990B238122A8AF3AEE16B83E7A2DDB24B704DA1014F052E527
C49A2C9C840C2B0A3844C5C96C3FBDFD4730D55851D0844A43E24A5C47C34D83
5DB493AECF6389494276FDA492539AF25757A47A53B42F29771497E9F5AF68E2
540408A71377ED4273E07B8DF4BA5D60BD978A4104ED1ED365E7464A6E912124
84F66764A0D815C7E354B73B808F50AA314EA21AE73286559F73B1DFBC1D26B5
445FF5374BFD8E2D97B32CDAFA0C2270679A62DD349CB6F6A20E796E7203FE97
E71B0E19D074858D2BB30FEDEF6C34FAC4077DCA11296D37D0B3F10D8795B37F
4231A18A53FFE7F6E40840193197DD6640CAA6F371095A260DE5DC01B8DEA95E
C206AEAF56159B724B67EB2937B57178972ACEE54C5F8EA613685F38BD1613D4
5D37DBE273EBD4D52570D68DAC80F6AF3A9121D8EF4BCFCC80EC71F78908BDA2
269DE03FE1F01FCCC7F5399762D1BC994E94B6179B1A7FBAD1D309EA3B41E58B
2A7BBEF0F174BA9AD649486C799E667065BA09725BE6418C64C62DF43E87AD00
D2E826F97162E51BF95F2A67090FAF972407EBE347570AD63AF6A82E984B2496
11BEAEE180A4A48200CA7C3761CB4143C5E8B2EC957EA523BD60F37EE2857AFE
C47E25004E55C593424A1C0FC24255111255AFE2F18C1272626A0CE41B25CE1D
16865F3C7ACFF6ED4EA6DFDA17340E96A8E6CDB2F0D6755D8F7F5A6F1A68BB97
4C12EE5E31D9C5563A0A5557C1E0913B055F591F8F2E8A74B365795F7276E374
1C8EFD42A1792CE5A2B6C325C39CD88E4B559CC695F7D2F96BB74F5E3F01C4FD
8DDC8DEB238A2554A0963350F1E3F16FDEAE6A34ECDDB9C87ADD12BBA280B558
73F38C194C67DE0043104AF5E61366D0E9E9307B6301BEDBA4107593EDBBEFF3
B140B7CF51BD51B099045C8CBEEDD6C586F5C0FC8BCC3D355A4F3C7BB8FF0113
F134EC89F518E225C5ECBBBFCB7D5E1BDCF7DF04DF478C8AA46788DD87665BF1
43F03485E11FFE1F67FB6D16AB556EFAE54A5D3FD3AB69E247AC2F1758689851
A9537A6DAF49D0A85D7764EBB31166A29307F6343DCA5AE980983A41DF300A7B
3E985855FE521816004F7653175F8C470FD1FEED1FCD70B4A6855E2109A878CE
4621251A2CB584650B079CF9D096F0A14DD3A276916C2B7511F9848EC764A5EB
0BB4F2C8AE029BD1172B430088B5786E7D6C82680B06372211F15B3ED7370585
1BBD2AD9D78C6781F2932122CC04FEC35A0023F82192384592AD70FFB73ACEF1
2D16BCB3BE5B4EB51671AE9357176D5AC145011B77175FF02C58724CDB27DBC1
BEF92517B2A7265C3E602A8308B3CE320C7448E0C50541DFB3E5E98186970705
425583BE8D6250D70C0DDA781474A6E41A25F0C95B7B1B6DA4D7D31A9F6BE6F1
46D4A9DC78F419FAB7C9E2F027B9183336B45E338CBD396A3D7C0CCFFE26F87E
3AD1D4239B902891AAD7B57F2597B0570F6ACE63F4CD6CCF332771B58DFBBF60
7B969FE66E1FC555E83C6C86C010E5250BF9754AA7C5A07A5FA1B81349CF00E4
546ECF6CA4AA10D95E252D6475E36DB2A4461B3384EB9847E836B14D85F4AD8F
8A00E390D5F674E19ED86F205FA763D8FF942D8B488177A8C8F976CF1665CE82
2B4A6E09BCF9EFA9070614291B2B0E1276E86866650B00DCAF38B80F8C4872C5
A1A252445F61A49B5AC2746B7D099884D8021E9C8349EAE8AD6EB72B6B3497E2
4D8740D062C120BA087F61117F95536BA202392A840C03215E11765AACE17613
FB790982426BC1D4BE99E145B2D2EDDFAAE8997018DB164FF9257055F91B3581
4D90ACB1E3A4D69168E55656BC6FB799B95D5889EF9BAB214F051179E2EF5B40
210461A17DF138F374C1B265FD4D65092AFC970854436B8D5B512083C90B476B
73608413B83693B2E331EDF447D57414E52451C9E15AF8B79C03B5A165007236
EF014B547DB1113DFD7CFB19D059D34F9571BB8721A1B143F5DDC930ECE952D3
17A217BB46D660A5971B8B0488FF7B789D5597FE88BC0DEC2F16E6D8257DAD5B
E7A0300D34614549F7AD03D9D1C3CE7A4BE86E4A67B1D8D0BF702F517829D4A4
450EC385936F5D85031896D58E534234ED7E3C96AC75FC0B744A6574A0709BB1
DBA2AA29249BAED5FACEA56CBE6C2B3E31CA0860493707D07DC62F7707A6A3ED
98A7DB137EEF6F9B969FECD3B149C00CA28E9D7F6C6FB36D145C1FF6833D0F19
14865E009C6F55EDFD5801AF83E86C7CE9A38EB349AD42715D6B2D9764F28113
06D168A9E62FD42FBBA19FD5E9DD82F35C7BC4FE5A46D635A608592B774EC212
035244710BF5710BF0ADEFA17B56E2DCE6910787BAE7B4E55A023CACF650F8D1
21B14F3B8501FA7619F5EF57C5EB4AE4534C72B64FC10BA7B7F89D9D507BB697
F2675E801C13A3EA2142D8189FAAD93C0D3E5B44F34397C16353A36D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 17551580 15883623 1000 600 600
(media/cache/mscLiterature-figure3.dvi)
@start /Fa 207[19 48[{ enclmmathsy ReEncodeFont }1 66.4176
/LMMathSymbols8-Regular rf /Fb 255[71{ enclmmathsy ReEncodeFont }1
90.9091 /LMMathSymbols10-Regular rf /Fc 205[35 50[{
 enclmrm ReEncodeFont }1 66.4176 /LMRoman8-Regular rf
/Fd 194[71 11[45 49[{ enclmrm ReEncodeFont }2 90.9091
/LMRoman10-Regular rf /Fe 134[45 52 120[{ enclmmathit ReEncodeFont }2
90.9091 /LMMathItalic10-Regular rf /Ff 134[42 4[33 35
31 2[45 47 72 22 5[28 40 47 2[44 13[51 14[66 58 67[{
 enclmec ReEncodeFont }15 90.9091 /LMSans10-Regular rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 10 1
TeXDict begin 10 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (Literature Survey: Finance in the Frequency Domain)/Subject
(Lorem ipsum dolor sit amet)/Creator (LaTeX with hyperref)/Author (E. B. Legrand)/Keywords
(thesis, msc, subject) /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 1 0 0
TeXcolorrgb 67 -8 a
SDict begin H.S end
 67 -8 a 67 -8 a
SDict begin H.R end
 67 -8 a 67 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.10) cvn /DEST pdfmark end
 67
-8 a Black 1 TeXcolorgray 1237 6416 5098 748 v Black
1 0 0 0 TeXcolorcmyk 1237 6416 5098 316 v Black 0 TeXcolorgray
1237 5673 5098 9 v Black 1 TeXcolorgray 1237 6304 V Black
1902 6059 a @beginspecial 8 @llx 25 @lly 155 @urx 68
@ury 1470 @rwi @setspecial
%%BeginDocument: STYLESTUFF/TU_LOGO.eps
%%Title: TU_d_line.eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: Marc Vleugels
%%CreationDate: 02-05-2008
%%BoundingBox: 8 25 155 68
%%HiResBoundingBox: 8 25 155.6373 68.5352
%%CropBox: 8 25 155.6373 68.5352
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: TU_d_line_M2#rgb.eps 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2008-05-01T09:44:39Z</xap:CreateDate>
  <xap:ModifyDate>2008-05-02T13:49:22Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>120</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAeAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;VNbiB5ngWRWmiCtLEGBZQ9eJZeo5cTTFVTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq0SFBJNANyT0AxV5P51/5yd/KfytNJafpB9Zv4qh7bS1WdVYdm&#xA;mZkh69aOSPDFWDaR/wA5A/mt+Z2oSaR+WvluDSoFot1r2oObhLZW6OaKkSv4JSQnw8FXtH5e+RV8&#xA;paXPHcajPrOtajL9a1jWLo1kuJ+IXZakRxoo4og6DFWVYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq0SAKnYDqcVfFv5zfnN5x/M7zXJ5I8jrPJoRla2it7&#xA;Ovq6gymjySsD/cbVUGi8fib/ACVXjHm7RLTQtYfR4bpby6sVEWpXETBoDdgkypC1BySOoj5ftMpI&#xA;+EjFX1/5O/O78k/JX5aaNY6BP9avjbwhNDtInN7PfSKBIJiVCh2k+0zGn8tRxGKveY2do1Z14OQC&#xA;yVrQ03FR1piq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FWPfmI95H+X/maSxr9dTSb5rWnX1RbOUpT/KpirBfyC/KjRPK/5a2c8K8Ne8w2CXGo6olPXQXU&#xA;YdIon/ZWIMNhsWHLFXgH5hf847ab+WnkzVvMHmLWo9TvpmWy8v2UKNEHmlfeWUsxJMcId+I2qNyc&#xA;VTL/AJxS/JW61fWoPPmtwFNG01+ejxSAj6zdIaCUV/3XC24Pd6fynFX2RirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqX+YdbtdB0DU9cvEkktNKtJ724SEA&#xA;yNHbxtK4QMVUsVXapHzxV4c3/Oaf5VMpVtJ1xlYUZTb2ZBB7H/SsVU7P/nMr8o7O0gs7XRtbhtba&#xA;NYYIVt7QKkcahVUf6X0AFMVee67+cf5E+aPNMfmHzjB5o1/6sT+j9InisItPt0LcgqwxXCs/Qci7&#xA;nl+1UUGKvo/yv+aXlbVvy4i85aZZ3VtoUf7iGzaKGOZFjmFsFWNJGjChulH6fdl2nwHLMQHMuNrN&#xA;VHT4zkldR7vM07Rvzd8t6vqltpttbXiT3T+nG0iRBATvuVlY/hmdm7Jy44GRMaHv/U6vTe0ODNkE&#xA;Iidy7wP1s4zVu9Yd5j/NLy/5f1aXS7y3u5LiIKzNCkbJR1DChaRD0Phmx0/ZmTLDjiY18f1Ol1nb&#xA;uHT5DjkJEjur9ab+VPNeneZtOkv7COaKGKZoGWdVVuSqrkgIzilHHfMfVaWWCXDKrq9nM0GvhqoG&#xA;cAQAa3+Hme9hP5of85C+S/y41+30PXLLUrm7ubRL1HsooHjEbySRAEyzwty5Qnt4b5jOcxAf85qf&#xA;lWSAdL1wA9zb2lB911irO/In5+flh52u0sNI1T0dUk/u9PvENvM/snKsbn2RicVeiYq7FXYqg9Z1&#xA;S30nSL7VblXe30+3lupkjALlIUMjBQSorRdqkYqxP8rPzd8t/mVp99faFbXltFp8qwTLfJFGxZ15&#xA;Ar6UswpTxIxVEfmZ+aflX8utFj1TX5JGNw5jsrO3UPPO6irBASqgKPtMxAHzIxViH5T/APOSPl/8&#xA;xvMsmgWWkXdhcpbvdLLM8boUjZVIPE1B+MdsVev4q7FUi8yeav0LdafZw6Veave6k0q29tYm1VgI&#xA;E5uzNdz2sYFD/NXFVun+ePLd3p4vZ7tdMAuGspbfUStrLHdJ9qBlkIHOhBHEkMCCCQa4qhb/APMf&#xA;y1Y6kmnXMjR3L3M1swYxKEW3hE8tw5Z1pEAQtftFtgpxVPtJ1bTtX0221PTbhbqwvI1ltrhPssjC&#xA;oO9CPcHcdDiqLxV2KuxV2KuxV2KuxVLfMmiW+veXdU0O5keK31W0nsZpY6c1S5iaJmWoIqA21Rir&#xA;wf8A6El8g/8AV91X77b/AKpYq+PL2BYLyeBSSsUjopPUhWIxV9YeWP8AnDryPq/lrSdVn1rU45tQ&#xA;sre6ljQ2/FWmiWRgtYiaAttir0jUPIWm+Q/yUu/LWnXE11aWrq6TXHH1CZrxJDXgFXYt4ZsOyv8A&#xA;GI/H7i6ft/8AxOf+b/ugwD8vP+U20f8A5iB+o50naH9xL3PE9j/41j/rPpTOLfTnz5+b3/Kd3v8A&#xA;xjg/5NLnXdk/3A+P3vnXtD/jcvcPuZ9+Rv8AyiV3/wAx8n/JmHNT23/fD+r+kvQ+y/8Ai8v65+6L&#xA;wL/nK+KKb89/KsMyLJFJp9gkkbgMrK2oXIKsDsQRmnekfS5/Kb8rCKf4N0P/ALhtp/1TxV4D/wA5&#xA;If8AOPGg6LoMvnjyVB+jH01kfU9OgLemYy4UTwCpMbRsQWVfh477U3Vesf8AOOf5j3nnr8t7e81K&#xA;T1dY02VtP1GU9ZXjVWjlI8XjdeR7tXFWS+ePzU8g+RkjPmbV4rKaccoLUK807jpyEUSu/GopyIp7&#xA;4qx7yt/zkf8AlD5k1CPTrPWvq17OwSCG9iktw7E0AWRx6dT2BapxVlv5hf8AKAeZv+2Vff8AUM+K&#xA;vBv+cK7mC18mea7m4f04ILuOWVzUhUSAsx28AMVYN/zlP+YnkfzrrPlVtA1VNRs7Jbhb5o1lQRiV&#xA;4v8Afip1VD08MVfRvlf80vyVuLS8by5qNkttodm11dfV7aSIW9pHRWanpL8IqNlxV4L5o/Pa3vP+&#xA;cg9KvLbzTO35e2k1s7LG06Wu0A9UvCFVnpJX7Sn2xV9Q+T/PflPzjYzX3lrUU1K0t5fQmlRZECyc&#xA;Q3GkiofssMVUPNGk6/Preh6to8NrcPpZuvWt7u4ktgwuIggKvHBc9CN6rirA9f8Ayr83Xl5PrYFj&#xA;eatqv179IWRnMNtC13FaW8XCR7adpY0gsEWX92jOdxTpirI9K/Li6tZIRcNbTpCl1F6jc3cia1t4&#xA;EP7wMTRoGJq3fqd8VZB5E0zUtK8m6NpepQQ219YWkVrcR20hliLQr6fNXKRE8+PP7O1ab9cVT7FX&#xA;Yq7FXYq7FXYq7FXYq7FX5bat/wAdW8/4zyf8TOKv0p/L3/lAPLP/AGyrH/qGTFUD+bH/ACgGq/8A&#xA;PD/qJjzYdlf4xH4/cXT9v/4nP/N/3QeM/l5/ym2j/wDMQP1HOk7Q/uJe54nsf/Gsf9Z9KZxb6c+f&#xA;Pze/5Tu9/wCMcH/Jpc67sn+4Hx+9869of8bl7h9zPvyN/wCUSu/+Y+T/AJMw5qe2/wC+H9X9Jeh9&#xA;l/8AF5f1z90Xgv8AzlT/AOT98o/8wOnf91G4zTvSPr/FWMfmgts35a+a1uqfV/0Pf+rX+X6s++Kv&#xA;A/8AnCq8W08t+c7qdmFrbSW0zeACRTM5Fdq0UYqwn8oNS8g+dfzI8w+d/wA1NSsoyrpJp+najKqw&#xA;yPMz8QEc/HHbRxqgU7bivTFWXf8AORFt+QWs+RrjUvKt9okPmfT3ie2j0x4IpLiNpFjlieOKgeiN&#xA;zBpUcdjSuKs6/K3zdf8Amf8A5xl1C61GUz31jpmpafPOxqzi3gcRlj15ekyVJ69e+KsY/wCcKIIZ&#xA;/J/mmCZBJDLeRJLGwqrK0BDAjwIxViX/ADlZ5K8o+XfMfk6DQtItNMhvPX+tR2sSxrJxlhA5hQK0&#xA;DHFX07p35X/l1pkV5Fp/lzT7WPUIGtb5IrdFE0DkFo5KD4lNOmKvlnzV5N8qW/8Azljp3lyDSbWL&#xA;QZJrNZNMWJRbsHtQzAx047tucVfXHl3yn5a8tWstroGmW2l20z+rLDaxrErPQLyIUDegAxVJfOGo&#xA;W2m+bfKV5fXC2lg017bPcSsEhEstsWiR3NFBb02416nbrirBl8z+aUtvM1/5a1K2Swi/TOsW000P&#xA;1qO4+pTRKqxuHT90/GRCyk9ivuqjrvz75g0mFntLeHhr1xd6fosaR/DHrL3NIPVK7skqSvI5PaI+&#xA;OKpFL+cPnaKTU0BtxcQxatwtpRbObf8ARrtHFI8UMxuBVkAkEqqpL/AQKVVV/N35i+Y9K8y6voF1&#xA;rFle2sdndRQ2a28EkjvHpL3TC6jEyTwlpAxUrE8RjopYMa4qm8PmzXtFk13UrnWo7yw0nUrGbUdK&#xA;MSB7bSLmyg9SWMKeapC0/qVpQ+k/djiqe3nmzzDb/l9Y65dPFp13q11bhrmeP93p9nf3QETTISAX&#xA;igkRGLHj6m7fDXFUl0C81jzF+YGmtc6vHf6Zob6qLWWGFPQu5LcWafWAVbj6kY1B7diNg0b8acji&#xA;r1fFXYq7FXYq7FX5bat/x1bz/jPJ/wATOKv0p/L3/lAPLP8A2yrH/qGTFV3nrSJ9X8palp9uC08k&#xA;YeJB1Z4nWVVH+sUpmXocox5oyPL9ezr+1dOc2mnCPMj7t/0PnTSNSuNI1e1v4l/fWcqyem21Sh3U&#xA;/PpnY5cYyQMTyIfNtPmlhyRmOcS9wh/OTyU9kJ5Jpop6VNoYnZ6+AYD0/wDhs5c9kZxKgBXff4L3&#xA;cfaPSmNkkHurf9X2vGPNfmCTzBr91qrx+kJyBHFWvFEUKoJ8aDfOk0uDwsYh3PE6/VnUZpZCKt7f&#xA;+VGi3GleT4BcIY5ryRrtoz1AcBUr80QHOY7VzDJmNchs912BppYtMOLYyPF+PgHzf/zlY6J+fXlN&#xA;3YKi2GnlmJoABqNzUk5rndPqs+bfKoFTrNiAOp+sw/8ANWKvnv8A5ya/P7y3L5ZuvJXlS+j1O+1O&#xA;kWp3tqwkghgDBmjWRaq7yU4njUBa13pirNv+cf8A8rb/AMtfk9Ppuop9W1nzEs9zdI4IaETxCKGN&#xA;x1qqAMw7EkYq8M/5xh8l/l7r/mHzD5X88aVHca3bhH0+C4klicGBnS7jAjdKspKGnWgPgcVewfmb&#xA;+XH/ADjr+Xnlhtf1jyok0XqxwQWsE0/rSySHogeZR8Kgsd+gxVOvKj+ULj8gNa1Hylosug6LqOn6&#xA;ncQ2M5LSFhDJE0hq8uz+lt8XTFWD/wDOEP8Ayi3mX/mOh/5M4qlX/OZn/KU+Rf8Ao4/5PQYq+qsV&#xA;fJPnR0T/AJzQ0oswUG408VJpu1ooA+knFX1tirFPzOv9Z0zyZquracljPHplnc3t5aajDJPHNHbQ&#xA;tN6ahJI+JJTq1fliqE0/zvptlcNo+vSwtc28psp9QtLSaHTI5PSEy2plkaVVf0qEjlx6L9rbFUJN&#xA;+bXl5jYtZWV46SXaJJbvp9ytw8VxYXd3bzWsXANJ6v1QioGw5cuOKq9p+Z35eXV1bPaiST9LtZwt&#xA;erZTelyv9rSO4m9Oil2+AK52bY0xVbL+Yfli8lin022Ml5eTWkFpd3Vq8SXlnNfwWc8ltMyr6qJ9&#xA;ZBG/dWoVNSqpal53/LnWNMv4b6OcWV/a0WX6tNGdStPWS3C2jqoadHluEjCr9r1BT4Wriqb2f5he&#xA;UdQuLrTZHkt5LZLgXkF7byQBRbQwTXEbeqoB4RXkbEdwSRUA4qn2kyWFxplldWMPo2ksCSWsZj9I&#xA;pFIoZV9MgFNqVWm2KozFXYq7FXYq7FXzfdf84UeV7i5lnPmS+UyuzlRDDQFjXFX0FoWlR6Romn6T&#xA;HIZY9PtobVJWADMsEYjDEDueOKo7FWH+Z/yu8ta9O92Veyvn3ee3oA58XQgqT7ihzY6btPLiFfVH&#xA;zdNruwsGoPF9Mu8fpDFT+QicqjXCF8Da1NPn6v8ADM/+Xf6H2/sdT/oUH+qf7H/jzIfLv5Q+WdJn&#xA;S5uC+pXKEFPXoIlI7iMdf9kTmHqO1suQUPSPL9bsdH7PYMJ4pXOXny+X67Zzmrd88i/N3/nHTRfz&#xA;K8yW2u32r3Ony21mlisMEcbqVjlll5EtvWsxH0YqwhP+cIvKYdS/mS/KVHICKEEjvQ70+7FWf+QP&#xA;+cavyw8mXsWpW9rNquqwEPBeak6ymJx+1HGixxKQdwSpYeOKvVcVeN/mX/zjN5Z83a+3mXSdSuPL&#xA;PmKRhJNeWi843lH+7TGGiZZPFkcV6nffFUgs/wDnEiG+1WC988edNT81RW5HC3lDxVUU+BpJJrpw&#xA;ppvwKn3GKvbb7y3p8/la58t2yCy0+ayk0+JIVAEMTxGEcF6fCp2xVin5Pfk9pv5ZabqFjY6hNqCa&#xA;hMk7vOiIVKJxoOOKoX82fyQ0r8x9S0a+vdTnsH0b1PSSFEcP6jox5culPTxV6Xirxv8AOH/nG3R/&#xA;zD1+LzDb6xNoespHHDLMkQuI5BESUfhzhZXANKh+w2xVlf5TflzqfkTRbyw1HzFceZLm7ufrBvbp&#xA;XRlHprGIwHluDQBP5sVZN5n0OLX/AC3q2hTStDFq1ncWMkyAFkW5iaIsoO1QHrirFLz8n9Du/M1x&#xA;rEkq/V7u4a7urP6ramVpnhELAXZjNwse3qcVavPvTbFUw0TyNqFlcWM2o+YLvVv0bLE9lHPHDGiJ&#xA;DZz2lKRqvJ5BdF5HPUgbAYqo6L+WVjpVpcW0d7LItxc2F0WZVBDafcrcou3ZytDiqhZflVBb/oqK&#xA;bVri4stASGDQ7Zo419CCC7t7pUdlAaVuNlHEGNKLXYsa4qluqflPeRaDDb2OoTajNoVrHb+VrOVo&#xA;rUW4gure5iLTrFN6kkf1OJUZ4ytF+JfiZsVSyP8AK7zTrGkOPMrqdR1TzENTv3jlQtFpxsI7Ce3d&#xA;o44kf14IPSZEWgDg1YpXFXr4AAoNgOgxVvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -76.5352 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 76.5352 li
162.638 76.5352 li
162.638 0 li
clp
[1 0 0 1 0 0 ] concat
38.3853 44.5191 mo
40.8775 44.5191 42.231 42.8643 42.231 40.5425 cv
42.231 28.7007 li
47.5318 28.7007 li
47.5318 40.8072 li
47.4791 46.1363 43.2105 48.2291 38.3853 48.2291 cv
33.5601 48.2291 29.2916 46.1363 29.2388 40.8072 cv
29.2388 28.7007 li
34.5396 28.7007 li
34.5396 40.5425 li
34.5396 42.8643 35.8931 44.5191 38.3853 44.5191 cv
false sop
/0 
[/DeviceCMYK] add_csa
0.764706 0.0470589 0.00392157 0 cmyk
f
82.9195 41.6587 mo
82.9195 40.4117 li
82.9195 36.7281 80.8331 34.1285 77.0591 34.1285 cv
72.8453 34.1285 70.8824 37.3902 70.8824 41.2867 cv
70.8824 45.2105 72.5806 48.232 76.8482 48.232 cv
80.0298 48.232 82.3619 46.7222 82.7603 43.6998 cv
80.1099 43.6998 li
79.8169 45.6343 78.8374 46.4029 76.8755 46.4029 cv
74.3023 46.4029 73.4488 44.1143 73.4488 41.6587 cv
82.9195 41.6587 li
cp
73.5054 39.9087 mo
73.5235 37.8331 74.7798 35.9585 76.8755 35.9585 cv
79.313 35.9585 80.2662 37.629 80.2662 39.9087 cv
73.5054 39.9087 li
0.858824 0.850981 0.788236 1 cmyk
f
88.4932 28.7007 mo
85.9732 28.7007 li
85.9732 47.8355 li
88.4932 47.8355 li
88.4932 28.7007 li
f
15.5054 47.8345 mo
20.8062 47.8345 li
20.8062 32.4136 li
26.7447 32.4136 li
26.7447 28.7017 li
9.5669 28.7017 li
9.5669 32.4136 li
15.5054 32.4136 li
15.5054 47.8345 li
f
28.2388 19.3843 mo
26.9458 19.7901 25.6119 19.4654 25.6158 17.7359 cv
25.6177 15.1001 31.8082 12.8902 32.6666 10.5865 cv
32.8794 10.0123 32.8921 9.53956 32.6177 9.5542 cv
32.4205 9.56592 32.5748 9.85206 32.1412 10.2867 cv
29.5767 12.8521 25.2798 12.8482 21.983 14.3248 cv
19.8208 15.2955 13.4849 18.2769 14.9439 24.9273 cv
15.0132 25.2427 15.2017 26.3013 15.3951 26.3013 cv
15.6197 26.3013 15.6177 25.6724 15.6119 24.9087 cv
15.563 20.9488 20.2525 19.8443 21.7779 17.2574 cv
21.9605 16.9478 22.2759 16.5142 22.3511 16.7154 cv
22.3873 16.813 22.3638 16.9566 22.3023 17.232 cv
21.8248 19.358 19.6011 20.7222 20.231 22.2418 cv
21.0474 24.2144 23.4048 22.7437 24.1285 21.4761 cv
24.3228 21.1265 24.4312 20.9039 24.5611 20.9488 cv
24.6587 20.983 24.6548 21.3834 24.5943 21.7437 cv
24.2076 24.0318 23.6812 25.3169 22.0064 26.6187 cv
21.4712 27.0357 20.6285 27.1226 20.7388 27.4429 cv
20.7671 27.5259 21.1304 27.5171 21.4195 27.4878 cv
25.8785 27.2027 29.608 21.9449 30.5962 18.5103 cv
30.6998 18.2691 30.731 18.0416 30.6216 17.9566 cv
30.4869 17.8531 30.2916 18.0914 30.0923 18.2681 cv
29.5826 18.7154 28.8834 19.1822 28.2388 19.3843 cv
f
116.254 33.2491 mo
117.648 33.2491 118.218 32.4322 118.218 31.1822 cv
118.218 29.7178 117.359 29.0718 115.951 29.1133 cv
115.25 29.1133 li
115.25 33.2491 li
116.254 33.2491 li
cp
116.143 28.7007 mo
117.772 28.7007 118.699 29.5391 118.699 31.1822 cv
118.699 32.8238 117.772 33.6617 116.143 33.6617 cv
114.803 33.6617 li
114.803 28.7007 li
116.143 28.7007 li
f
121.949 31.6558 mo
121.901 30.9888 121.543 30.4878 120.829 30.4878 cv
120.155 30.4878 119.798 31.0508 119.743 31.6558 cv
121.949 31.6558 li
cp
119.73 32.0337 mo
119.743 32.7686 120.08 33.3873 120.925 33.3873 cv
121.413 33.3873 121.818 33.0372 121.921 32.5621 cv
122.354 32.5621 li
122.141 33.3873 121.626 33.7647 120.794 33.7647 cv
119.764 33.7647 119.283 32.8785 119.283 31.9371 cv
119.283 31.003 119.798 30.1099 120.822 30.1099 cv
121.976 30.1099 122.395 30.9551 122.395 32.0337 cv
119.73 32.0337 li
f
123.549 33.6607 mo
123.137 33.6607 li
123.137 28.6998 li
123.549 28.6998 li
123.549 33.6607 li
f
124.867 33.6607 mo
124.867 30.5899 li
124.172 30.5899 li
124.172 30.212 li
124.867 30.212 li
124.867 29.4766 li
124.867 28.8853 125.106 28.6172 125.698 28.6172 cv
125.829 28.6172 125.966 28.6661 126.089 28.6929 cv
126.089 29.0225 li
126.007 29.0093 125.918 28.9957 125.835 28.9957 cv
125.272 28.9957 125.259 29.2779 125.279 29.7715 cv
125.279 30.212 li
126.063 30.212 li
126.063 30.5899 li
125.279 30.5899 li
125.279 33.6607 li
124.867 33.6607 li
f
127.033 30.5899 mo
126.346 30.5899 li
126.346 30.212 li
127.033 30.212 li
127.033 29.4766 li
127.445 29.2979 li
127.445 30.212 li
128.229 30.212 li
128.229 30.5899 li
127.445 30.5899 li
127.445 32.899 li
127.438 33.2139 127.603 33.3863 127.919 33.3863 cv
128.043 33.3863 128.167 33.3794 128.277 33.3448 cv
128.277 33.7022 li
128.146 33.7369 127.995 33.7637 127.858 33.7637 cv
126.985 33.7637 127.033 33.2071 127.033 32.7398 cv
127.033 30.5899 li
f
115.25 35.7872 mo
115.25 38.9957 li
115.285 39.8965 115.8 40.439 116.617 40.439 cv
117.435 40.439 117.95 39.8965 117.984 38.9957 cv
117.984 35.7872 li
118.431 35.7872 li
118.431 39.0025 li
118.417 40.0674 117.819 40.8511 116.617 40.8511 cv
115.414 40.8511 114.817 40.0674 114.803 39.0025 cv
114.803 35.7872 li
115.25 35.7872 li
f
119.723 40.7481 mo
119.31 40.7481 li
119.31 38.0748 li
119.31 37.8077 119.289 37.5328 119.276 37.2994 cv
119.701 37.2994 li
119.723 37.8077 li
119.736 37.8213 li
119.977 37.3951 120.369 37.1963 120.815 37.1963 cv
121.941 37.1963 122.031 38.1924 122.031 38.5909 cv
122.031 40.7481 li
121.618 40.7481 li
121.618 38.522 li
121.618 37.9239 121.275 37.5738 120.711 37.5738 cv
120.031 37.5738 119.723 38.1441 119.723 38.7618 cv
119.723 40.7481 li
f
123.371 37.2994 mo
123.371 40.7481 li
122.958 40.7481 li
122.958 37.2994 li
123.371 37.2994 li
cp
123.405 36.3023 mo
122.923 36.3023 li
122.923 35.7872 li
123.405 35.7872 li
123.405 36.3023 li
f
124.477 37.2994 mo
125.665 40.1783 li
126.813 37.2994 li
127.267 37.2994 li
125.898 40.7481 li
125.432 40.7481 li
124.023 37.2994 li
124.477 37.2994 li
f
130.2 38.7418 mo
130.152 38.0748 129.794 37.5738 129.08 37.5738 cv
128.406 37.5738 128.049 38.1373 127.994 38.7418 cv
130.2 38.7418 li
cp
127.981 39.1197 mo
127.994 39.855 128.332 40.4732 129.177 40.4732 cv
129.664 40.4732 130.07 40.1231 130.172 39.6485 cv
130.604 39.6485 li
130.393 40.4732 129.877 40.8511 129.046 40.8511 cv
128.016 40.8511 127.534 39.9644 127.534 39.0235 cv
127.534 38.0889 128.049 37.1963 129.072 37.1963 cv
130.228 37.1963 130.646 38.0416 130.646 39.1197 cv
127.981 39.1197 li
f
131.835 40.7481 mo
131.423 40.7481 li
131.423 38.0748 li
131.43 37.8077 131.402 37.5328 131.388 37.2994 cv
131.814 37.2994 li
131.835 37.8077 li
131.849 37.8077 li
131.973 37.4566 132.282 37.2095 132.626 37.1963 cv
132.763 37.189 132.9 37.1963 133.038 37.2027 cv
133.038 37.6011 li
132.955 37.5943 132.866 37.5738 132.783 37.5738 cv
132.171 37.5738 131.849 38.0132 131.835 38.6729 cv
131.835 40.7481 li
f
134.721 37.1963 mo
135.374 37.1963 135.922 37.4219 135.979 38.1509 cv
135.532 38.1509 li
135.49 37.7178 135.105 37.5738 134.68 37.5738 cv
134.294 37.5738 133.903 37.7247 133.903 38.1304 cv
133.903 38.6392 134.569 38.5909 135.503 38.9205 cv
135.861 39.044 136.088 39.3536 136.088 39.7247 cv
136.088 40.501 135.366 40.8511 134.638 40.8511 cv
134.04 40.8511 133.353 40.5694 133.339 39.8067 cv
133.786 39.8067 li
133.82 40.3223 134.274 40.4732 134.741 40.4732 cv
135.181 40.4732 135.641 40.2676 135.641 39.7857 cv
135.641 39.2916 135.099 39.209 134.549 39.085 cv
134.006 38.9542 133.456 38.7969 133.456 38.1578 cv
133.456 37.4434 134.115 37.1963 134.721 37.1963 cv
f
137.298 37.2994 mo
137.298 40.7481 li
136.886 40.7481 li
136.886 37.2994 li
137.298 37.2994 li
cp
137.333 36.3023 mo
136.851 36.3023 li
136.851 35.7872 li
137.333 35.7872 li
137.333 36.3023 li
f
138.705 37.6768 mo
138.017 37.6768 li
138.017 37.2994 li
138.705 37.2994 li
138.705 36.5635 li
139.117 36.3848 li
139.117 37.2994 li
139.9 37.2994 li
139.9 37.6768 li
139.117 37.6768 li
139.117 39.9859 li
139.11 40.3008 139.274 40.4732 139.59 40.4732 cv
139.715 40.4732 139.839 40.4664 139.948 40.4322 cv
139.948 40.7891 li
139.817 40.8238 139.667 40.8511 139.529 40.8511 cv
138.656 40.8511 138.705 40.294 138.705 39.8272 cv
138.705 37.6768 li
f
140.903 37.2994 mo
142.064 40.1846 li
143.218 37.2994 li
143.665 37.2994 li
141.761 42.0669 li
141.308 42.0669 li
141.83 40.7481 li
140.401 37.2994 li
140.903 37.2994 li
f
147.546 37.5738 mo
146.714 37.5738 146.385 38.3848 146.385 39.0235 cv
146.385 39.6626 146.714 40.4732 147.546 40.4732 cv
148.377 40.4732 148.707 39.6626 148.707 39.0235 cv
148.707 38.3848 148.377 37.5738 147.546 37.5738 cv
cp
149.153 39.0235 mo
149.153 39.9302 148.645 40.8511 147.546 40.8511 cv
146.446 40.8511 145.938 39.9302 145.938 39.0235 cv
145.938 38.1163 146.446 37.1963 147.546 37.1963 cv
148.645 37.1963 149.153 38.1163 149.153 39.0235 cv
f
150.115 40.7481 mo
150.115 37.6768 li
149.421 37.6768 li
149.421 37.2994 li
150.115 37.2994 li
150.115 36.5635 li
150.115 35.9727 150.355 35.7042 150.946 35.7042 cv
151.077 35.7042 151.215 35.7535 151.337 35.7803 cv
151.337 36.1099 li
151.256 36.0967 151.167 36.0831 151.084 36.0831 cv
150.521 36.0831 150.507 36.3648 150.527 36.8584 cv
150.527 37.2994 li
151.311 37.2994 li
151.311 37.6768 li
150.527 37.6768 li
150.527 40.7481 li
150.115 40.7481 li
f
116.405 43.2862 mo
114.803 43.2862 li
114.803 42.8736 li
118.431 42.8736 li
118.431 43.2862 li
116.857 43.2862 li
116.857 47.8345 li
116.405 47.8345 li
116.405 43.2862 li
f
120.61 45.8287 mo
120.563 45.1617 120.205 44.6607 119.491 44.6607 cv
118.817 44.6607 118.459 45.2242 118.404 45.8287 cv
120.61 45.8287 li
cp
118.391 46.2066 mo
118.404 46.9419 118.742 47.5601 119.586 47.5601 cv
120.074 47.5601 120.48 47.21 120.583 46.7354 cv
121.015 46.7354 li
120.803 47.5601 120.288 47.9376 119.456 47.9376 cv
118.426 47.9376 117.944 47.0513 117.944 46.1104 cv
117.944 45.1758 118.459 44.2828 119.484 44.2828 cv
120.637 44.2828 121.057 45.128 121.057 46.2066 cv
118.391 46.2066 li
f
124.073 45.4439 mo
124.038 44.9146 123.702 44.6607 123.131 44.6607 cv
122.499 44.6607 122.107 45.3204 122.107 46.1041 cv
122.107 46.8936 122.499 47.5601 123.131 47.5601 cv
123.667 47.5601 124.038 47.23 124.073 46.7564 cv
124.519 46.7564 li
124.409 47.5464 123.956 47.9376 123.172 47.9376 cv
122.142 47.9376 121.661 47.0513 121.661 46.1104 cv
121.661 45.1758 122.176 44.2828 123.2 44.2828 cv
123.908 44.2828 124.485 44.709 124.519 45.4439 cv
124.073 45.4439 li
f
125.612 44.9083 mo
125.626 44.9083 li
125.866 44.482 126.258 44.2828 126.704 44.2828 cv
127.831 44.2828 127.92 45.2789 127.92 45.6778 cv
127.92 47.8345 li
127.507 47.8345 li
127.507 45.6084 li
127.507 45.0108 127.165 44.6607 126.601 44.6607 cv
125.92 44.6607 125.612 45.231 125.612 45.8487 cv
125.612 47.8345 li
125.2 47.8345 li
125.2 42.8736 li
125.612 42.8736 li
125.612 44.9083 li
f
129.15 47.8345 mo
128.738 47.8345 li
128.738 45.1617 li
128.738 44.8946 128.717 44.6192 128.703 44.3863 cv
129.129 44.3863 li
129.15 44.8946 li
129.164 44.9083 li
129.404 44.482 129.796 44.2828 130.242 44.2828 cv
131.369 44.2828 131.458 45.2789 131.458 45.6778 cv
131.458 47.8345 li
131.046 47.8345 li
131.046 45.6084 li
131.046 45.0108 130.703 44.6607 130.14 44.6607 cv
129.459 44.6607 129.15 45.231 129.15 45.8487 cv
129.15 47.8345 li
f
133.828 44.6607 mo
132.997 44.6607 132.667 45.4712 132.667 46.1104 cv
132.667 46.7496 132.997 47.5601 133.828 47.5601 cv
134.66 47.5601 134.989 46.7496 134.989 46.1104 cv
134.989 45.4712 134.66 44.6607 133.828 44.6607 cv
cp
135.436 46.1104 mo
135.436 47.0166 134.928 47.9376 133.828 47.9376 cv
132.729 47.9376 132.221 47.0166 132.221 46.1104 cv
132.221 45.2032 132.729 44.2828 133.828 44.2828 cv
134.928 44.2828 135.436 45.2032 135.436 46.1104 cv
f
136.554 47.8345 mo
136.142 47.8345 li
136.142 42.8736 li
136.554 42.8736 li
136.554 47.8345 li
f
138.884 44.6607 mo
138.052 44.6607 137.722 45.4712 137.722 46.1104 cv
137.722 46.7496 138.052 47.5601 138.884 47.5601 cv
139.715 47.5601 140.044 46.7496 140.044 46.1104 cv
140.044 45.4712 139.715 44.6607 138.884 44.6607 cv
cp
140.491 46.1104 mo
140.491 47.0166 139.983 47.9376 138.884 47.9376 cv
137.784 47.9376 137.276 47.0166 137.276 46.1104 cv
137.276 45.2032 137.784 44.2828 138.884 44.2828 cv
139.983 44.2828 140.491 45.2032 140.491 46.1104 cv
f
142.605 44.6607 mo
141.856 44.6607 141.54 45.4166 141.54 46.0489 cv
141.54 46.6802 141.863 47.4439 142.618 47.4439 cv
143.408 47.4439 143.711 46.7081 143.711 46.0342 cv
143.711 45.375 143.347 44.6607 142.605 44.6607 cv
cp
143.731 44.3863 mo
144.158 44.3863 li
144.144 44.6192 144.124 44.8946 144.124 45.1617 cv
144.124 47.23 li
144.124 47.9175 144.158 48.6387 143.395 48.9961 cv
143.12 49.127 142.935 49.1539 142.611 49.1539 cv
141.987 49.1539 141.245 48.9415 141.245 48.2261 cv
141.691 48.2261 li
141.74 48.6387 142.227 48.7759 142.667 48.7759 cv
143.203 48.7759 143.698 48.398 143.711 47.8218 cv
143.711 47.1753 li
143.698 47.1753 li
143.498 47.5811 143.024 47.8218 142.578 47.8218 cv
141.54 47.8218 141.094 47.0313 141.094 46.0826 cv
141.094 45.148 141.513 44.2828 142.563 44.2828 cv
143.065 44.2828 143.423 44.5235 143.698 44.921 cv
143.711 44.8946 li
143.731 44.3863 li
f
145.174 44.3863 mo
146.335 47.2715 li
147.49 44.3863 li
147.936 44.3863 li
146.033 49.1539 li
145.58 49.1539 li
146.102 47.8345 li
144.672 44.3863 li
145.174 44.3863 li
f
96.3882 47.8345 mo
96.3882 36.2837 li
99.4605 36.2837 li
99.4605 34.5318 li
96.3882 34.5318 li
96.3882 32.3834 li
96.3882 30.8453 97.1285 30.5816 98.5621 30.5816 cv
98.9839 30.5816 99.4097 30.6363 99.8335 30.6597 cv
99.8335 28.5689 li
99.2437 28.4351 98.6421 28.3033 98.0308 28.3033 cv
95.646 28.3033 93.8687 29.4986 93.8687 32.0455 cv
93.8687 34.5318 li
91.273 34.5318 li
91.273 36.2837 li
93.8687 36.2837 li
93.8687 47.8345 li
96.3882 47.8345 li
f
100.908 34.5318 mo
100.908 36.2837 li
103.188 36.2837 li
103.188 44.7613 li
103.188 46.5313 103.213 48.2315 106.954 48.2315 cv
107.536 48.2315 108.083 48.1768 108.677 48.0738 cv
108.677 46.1392 li
108.267 46.2378 107.749 46.2979 107.35 46.2979 cv
106.449 46.2979 105.708 45.8448 105.708 44.8941 cv
105.708 36.2837 li
108.782 36.2837 li
108.782 34.5318 li
105.708 34.5318 li
105.708 30.9009 li
103.188 31.6958 li
103.188 34.5337 li
100.908 34.5318 li
f
55.4874 30.9786 mo
59.4068 30.9786 li
63.8296 30.9786 65.6646 34.3155 65.6646 38.2691 cv
65.6646 42.2227 63.8296 45.5567 59.4068 45.5567 cv
55.4874 45.5567 li
55.4874 30.9786 li
cp
52.8326 47.8345 mo
59.4058 47.8345 li
67.5894 47.8345 68.4483 40.9083 68.4483 38.2691 cv
68.4483 35.6299 67.5894 28.7007 59.4058 28.7007 cv
52.8326 28.7007 li
52.8326 47.8345 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 11.0
%%AI8_CreatorVersion: 11.0.0
%%For: (Marc Vleugels) (Studio 3005)
%%Title: (TU_d_line_M2#rgb.eps)
%%CreationDate: 02-05-2008 15:49
%AI9_DataStream
%Gb!U'pNem4c7jQ^J9rDmFNF)@)Ej'*V"[3+&/&.pHggY,nQl$Slm\M16Qkj,c["*JIRu@;>F&hX9:f6:di#TpNHRJ6q+icg7H:Bd
%jV9Mm7:NNS`^R#uH*/E';&5geOAJ>F+>%Z*b-4l]%naN1V:P*J43^O(T8[C^.CZ'"jZ5LQ8+16<B'8(!9XA""Nl9A$nnXrHX;*e0
%<d>6V'-+m-=7YX!+5VS#nTP=(Cfd(CC97Ulf;aTXGhg=El7;]/Z8NO"MD-4baCJ*7O'+jNm=Zg%)Yq4e^T+.3rm@"OMd!gA+8!^.
%7]63t8k6Im[CXWRTLS&ob&Tf_`FtbX7.Q6T@(ZRT+mg"._2GUV<(ps4[,Vl]_8utF&is[6\&hYI=/5KXA@.St'>HRZ'I[hH]tn:?
%It.fn`$[B9f:oQ'-NmFMkjs^@Zdua+2[4BPksM$8E71`:RKeT?;J;AY0HC#2_ge3P+)PssmaZ(T=QWA"Lf?o7FbMWCSISlCnisOR
%4i1@2f"UG)&<u4f,U[g?\4&9(-M/^iF)mN.,rI/#A/I0RM:U<=\q(^lK`.8?W3C.c=NRmUUY]Z3j,sNZj#"?eqn5JL?=I;&NW):W
%PL,]sFn:*?0?ehuW3n'YjP/4$VhJXdeqmsGl.a!"btafnZ[O8t@(9X3U.YE64mbN#7N6?'S<>8RCT0=I8,L!FY^>%%kX8J"e]rLn
%>/ERPmB\_Kneo^ELAfH^<N";NNB/!qO(^3AYW#roNuS8U#5<%[oW,^4j^thrn!1MWNJ_*;50p?NK&.M.+=pHpB(nUj[!n$_o<L\R
%l%c,,Ok%"g)l#puVtJn\2Yo#;@g6EB5)pjqTpiB4[;U1Ts0N@g2Z@7h7sC9"I=TOPQBjf-m=3ZTSM!9!$W:kDUUT>k2lKs!m\A14
%!`^k.NBtfqkYA1:dQ`'R=mdKddus,1fKJU#LrW#(S;CV"kn=bfK7B=4q)=AhSU\,j+44V0jUk$]*]=8LX3o2@EiTu3LhpBU5`F==
%-=$0o@S/g6M=/Ld\;5Yj:^%_ZJukX':jA)P+A6r#`<iGW')B?mpd5^jkZp6d=^q$k+8Fk%Iea&l^S=^!,l7;[7B6F%]82PWWfbP(
%).jQ<MF9B(:\[Ln"=1571R9GcEYIM@NQe*g*XSaj&A`h6""dLsV2R:-g%-Hs:k\7=WdA>G)Z43DH&b(_q[0t2Ige#Qj8oO-DW#90
%fN`\uNl56_c+efIn?5:bWDW*^6iXk^.@u.N,_)mH</n?%:6u(H]H1AS:TN0'#''R=%4npp4;N;:J,ZWlF(dDWURR#mVW74)T<@^+
%1YqA^r@hp8#3@<W5!8uFmh#7q\^r7E2pnkps#2(jIiX=E9e'u4D(;0;B!k]U)f8hrb;9?uen_o/#DhRJH*lP$9<qnoTnlq4IsGHi
%:W\GJ^,$hTQ)/[([5.(Z3j#N7`XL/0s6_Y0F7:deH'%r*\EO#9pA\>ELND)R_iDLm!gl'RlR=!u3*O!SLpP8(pQ:?(KpN[GS]Z/Y
%3duPF:-47=rtjj1@fMd"0S(eMDr*#gM<(1Rs5W#:f/-mMfr4iK6N*%'>]tk88r^crr[[0m7/<I[-sGT>c&5c9q-V&)s7e(VZ*WEg
%bGOeO^M/)H)YMGH(?p>3_O/DkVtKLJFmqD7<`[`E^M@!Wo%mN_G6VFj(2Fuo)He%E_<>L.e+rI#R<J`4,t\qpdf7@1m-GG2N0%ZR
%%u)ndZqDM3I+4$\ON;ON=Dl`Gja&L^l?%ee([I5#9"eECf)&N#H<'jg+I]Jl#3GSKZS=.%ZQb$DZ3J[Njkeq/;smY\'g+p@o$O%C
%d#DmFn(#YXNc"Z2EJ?#8Jem-@YRq`,P!NJlgNS_Lp,6ut/j:BLb3aYe%-q*m#DR"nU]&44fLj=4],p@*]<r\BC^ljZhF<ujS>FoC
%dFiKc*=ee[jo1q(C]"]W(q%[t%.n)N4"%H8kEn1fa82:<'Q$+9nt61CY7]Z*AE3,:R.;7_Y)`$\A%Osse>eL:M])#Pg%g*`BcObc
%.0pk&U5\!ig(KQ7AtZe&Gh&U;[G+6^YUqdQI2Ah^mXH0d<_SBnb>m:;8KUFN_a2>;T"4h?Zba08LP9c0[#=sb<Z(n\]U,,LG/_)E
%N`Ua?bso;\*Pbthf<RX)FhZ,6cNc;01`K_.8IX>N#PLM*a>W1?Y.<j[s/Pb'(`;Z;PMI[605Jgbnc0H1fVt+)\6+1MgeUUJD1Ql<
%hI2F]aZdGU\/C<A5(^2AFF)J@eVd7Go<^<@jKZsYS$jHqlrAE2"H<Pp/U1'tEkC-F=N%"Oj(W$:[VmrBi>?LN@Cn:l#q/Um82\ng
%@UK+12rV!&4hX48::E8(e"Aq.LJ#T9(L7K3(IpFJ["7BEPd*`=A[Jg'$^#R\/O?[(AXpgF[-Y>-Wj7+Aa+!_fq(>tIdAmb:5d!-%
%0k0"qoWqf)okL9!C\#!cbCbq:J9D#-!ufjiKlWj4C'MFrm91MeahL;hp>3SJBM:)[n_1`mc/;>\g4MeCptd)I0l0a)G'b;O947R8
%)/[q+o>r[FI*#Z4I4&4[hKQa+nWBL<F6MaLgH>nkHI1o2DVG:-hW<jF)M<F9<S^c4B[1!+U:#\tLpdep]k`[GM95BrmYt[nCtE0W
%+icG,Jn<\MIrr\iggasUhh4\ABTj"g^^4(X+/kJC5LNmUPK$t#pH`<9oL+PK#SL/0d:eQo@b@oGVl!tX3:qu5X%KRa(k@H]RWs9C
%#i"u%Q+"4@KtoV&B#WEqR_Mt"c-":7ia3k`)3g+2S=WPgeQ;NTlV=X$p)3$n4eYE(3i_T1BUX$)rPiNJ_cF#@h9SjbIgioe61$_H
%#,\_dl*/i6=;KONB"X+@C[02_B/!d6@7si"q=>Wrjqr.?>J)m!X`E$q14rbo=d8gUV%??_UH.1GpMPXm7l@C!qMffJ*4`];?@qrc
%,6Ss"oEdjd?Q1:A8[Eo%CW8im7W`5MQ'J]j@-(faHegMU"0VB`<m\"#3KFXj+_thEoA(X7HU^T*$$;>#27@U[Qk8r<9l1W=8O?6P
%Q;Y$V08H*ons+jSUe7sg7Q27S"7ugmUK+d-%@3@5bS\`B(Yg/j_>W'Z4$rGD`>qe@3?jM/LSsN6pOPn]nf%UoEjJ4T.,4@MZ6DZ'
%O-DOA7r9>bN7/NK7rbd(@*FZ"JW\UNf<D_jn:\&Xs1?Y^RG%Q\-g/iMJ5'DFS_m<-*Ric1g"?BJBTt/U7aG='Z6N%QZmh`UNnKV`
%77T[Y,6KgC>Pl*S("EG4MhZ,$g_8uo)P5ToTj`^M:tWTLh$>61ffiACS'.I$")X@C+@F]c10h%LL+n0#lsW;hLM)6Lm>`3QLc3s4
%Z@TU?0/=6mj_qN@S,GVSIY\;0T=,uY@cW'gN:VRJ_S5GZ%MdL#g`1i"Q6p>u:=NI7W&5[0pXmKFI\l^uZ)o9Y+meF(>rU<D-7(M%
%?Y?T]I.V/<6]@-GMkBK=8aIDH>.\^lUrT/>)STu/*_7GX1Xa:hGBGaO3Za'2@B9V?0t&fFp/-FcDCboF0Wgi^bJ?Mi%MgDN?st5h
%(+/$K@1j%c*#q)TB:FHP?Or]Em,D;'_2j"U!p15&bWD74"ZQ&L\S7)d+dlDN1@M`m'/2']`4SS8cWKVs_fIIq&bki0EA'Ngp[XMe
%0CRh*?;!h`jD.s]qR:`P#9g0^ij^p0N'*-pq+2EkG;8Z%cK*f?4Bc"\Tc'8jKTZ(%(mtb@A1V=3bJd_20'4M?@W!ABjsK(sDA"Sa
%**fT9$!EC=,<:e`-fea^bJhWV5pkN!cGdbtfogDtn^u,SE\TKZ(NV,DO"c#4SY=`ZoS="3hbgJELcURVg]k2mRGoch^b0:t"aV-M
%ZcFK1=U5r5l-&GPTdJrqh^[49`7B-tpgU8<H8hHX5,ruE<mQJAl6l2/,41r7mAdW>=5Bl&@r:f"emZ>b;0XT$QO@m#O.6Td^3B1_
%aU-4CSA)K_>c!V>B3fdZ=q?bJG5SJh+e?Go>Q+3Un9QD:I]rL*GBSI>l/UOr6Edk&DXTN&^>:Ya-g0ad7[nnag>d+Ygd6.NcXdWY
%Sk3#L]0"i9e/&qIfCqH6,!dIe$\?G'M!VdP2nGnWWFNWVWuZ$6-46:Kkp@%dpRWG9gdC'"Wj%]DWVGGYgKgf01X2B*V7+.bSdK7+
%B:Hm@Q1RuBUV"[d-kAal0"]g`DfC;kT$MeU?</iSLQ<W1lFD/=Aa>uAoa/`YcCdDr]U[Hce(e[6.b@KgA*(GJQO:"cb"I2s0.o\&
%9L"r'CoslUg/l.KI_VhOf@JLb]eaC"4F+?KF.n!TT)*R]+Vo3/I<U0Y8a6]^';4?EQItP>qr7"o_?^"L]#n$>mW/RjDk0iQf'@2G
%+*u7;V)+-mIjOJ.1Bu[uT;9*FieHopch5LJi1Pts[5g_]NPo)>ih5bRQd,2-s$9F:WsdP8B$kPDrkaSVnJa:t_dO(!cdh`KhctN$
%/ah3!.VC,XKD(%<ad'9dp=u.pTNm'&gEqR4Y&qui=]j1^54j@kn"7,,<T`(\VXoLZ13V5.\SqubUQApY(HTM8!\4Z%7n)[\J'b=s
%Fml:R*9!PphDLk='k?fB3>-sQiu=Ri9ePiPK9hgi?)oG\WV]CF.)2'scT;A[mQKI??ap;o]l+=KI$Ln9ohF=0?fG.bJV0tl+.(1M
%K5T#;pA2o(54Fs.>YF@?ahOE5qocVGI))EGkN[)b[dP+K7PS'1H$t%?jdrN`Wb$J77i@on%E]EGcSGTS.LRt6PP9mopR/((s2l';
%=',BRmP!uZ'l0Gn^4YjGCH&C^aXECh#>=Tt`$ZQ^s7BT9&9rZ3^RX$Aj.P.u5n@:+o$:L+K0d&XHdLd2kqhZu3p_9B`AL^s:*^nY
%#F->c>d8FSq@@m35LbSb(!RdV&n?YZCXrss#<bi[F>j7*I9bqfMa'T/6''!O8?>oAm*5@Op$/c$(c^a@M/r8)1h_o]iEgVQ:m_VH
%Cb`YC<IJ0-nf@AbAZ$V0kfl`e[2UqNX?LhIhokf@[?t=99kh;Bn":11="f,WIa)471\RKWA*gEq$MReS>PB63oXaR`N1Fk]%f5a:
%pDQ#),hAs^XjdI8qK0Tfjbl/!5mu<Br8$</cu79;mkhad%/MT.(3<*EK6;So0@E/0o7MIh<(ck=@[=ntG<LSMmB$5ujR5u#W3YY+
%'I]:6gi"%IId:dP6";!to2Lt_R="q[.3:+Or9<6*%_CiRWMf:*[^]=h6+?Y\bY@#Cr[U8>h-8!>\4#:rF^<iKK8PT/m'0Kef%,&P
%dmkB7m2@eoK41%tr6G8W!=YG0?%^E/RBo\!d,]Jh2:JbS:B$^m\p%F23lqbQbL^B^kZ$L$K==aEI4bq3F$d22:7cg)%[Z=rC9-\#
%<!'+=G?:rXShcJD#OHEX#^H6\`9"JSo(8p%(3nKjMCDCF:VGcd!@0m2]\&F"Su9,.oiMNHRcR<,DRH.8H1%bSG[XFmkP6WPRJe00
%]`#@V?/@-V"[,S!=/hAuf2J/JO"toBpQP)rH[Ce=%Hg^NWE2t<E&ZBi47oM!Rn8Z20Zm*Q^)-FSaPAK6l(FrPgoZac#!FPX%h%[/
%8MT]*0CJZ(@4gF)-^B&XqUc("WcKiF>GCG_9sLT1pStmk!H5aHpr(mk*:U>J_Wu-W8\if!OHt9+l(ns`r/s9.T0E[->3YOSha/RG
%Bm#]Us#OHnU6tl,^=q9^4SZZCoLj8KX%0)KWNa%IEo;>6SkC'!G3MpunlZY?#0j\ql0+%NSrKpZbf9%.`%m=IPEY@2EctC6c9EU?
%.c%8[meEr6YkZ2Sp*p61Ei%::ebKb&keYPEm[MO72NM`s$albQgtqnhPnour)T$FiV:=X83=?nch,C$4FpfCVikb?.I=*]UXW0tV
%E#-s?gM:N.YU8]DF9^a[]Tu3\(JaN?c_m6MAODi_&,9`3-22DE'/r^IC+<W$#-4@s+.=DA]+kmj+5;>uX`fcag<D;(mEca^C^Fu]
%W#hecVpXn5\OcH<Hb=h6g$U<U>jbrcp@oDL/lebpf,'n?X)tth*Q\r8)Xb=7,7*3P?eXdGRD5(`ndh"XO3P\iq^Q"m_d!,A?!(hX
%GV%\H\R&S!?-qbgjdjh;Y-sWTr8sWjet]3r(KuOZa-#Mj,kiIDMo<E#h@W)I`t`^ae4)(k3Uj4*>/H1*\Oar"b0OL02dbcA@?B7$
%Ge7B8V-rq]CFe]538/5q,m'2r*b3PI/r)]qf>$15$\@)<l8a<)H[JJgF=6gg86YR'f6j)/?m3)>i3?^U6"K0Er@n6m:EdmHgWl3Z
%p7OkpB(]`fC7@&J?r4(fk<]SL='p!l<W67_O'X>7?eQVbT@mQ6PZ%AQDKPq4DL<8+WPe%L\Ld'r7f>=!X;"\Fn*UJ*PiCFJC%Z$i
%!QNm6FsNCP<"HRNj5Zbjq7NNilMGd.@<mnqjEOu08r9MPFL2gL%Fb'/WuBXYk*H+db;Gg],C.nF$"8:kVD11sm:pA2AH1qo>ith*
%;a$JW\DFHBJB>9,ruJ2=A;@+heFmd(JW`Pab+'-O)=Y3iJVI9aOaed6_J/,Y(^3Dl2j]1kj"\TXA\JM3Be6AGV@ea>s5:tH_ZOtu
%G>7-r5EXSOdITf0]XW@ILE+<uguq=FA'lh!6Qh/"Pos<L0dfY(Dn\@MLLI+(*L-#538F\gFNL[B-7gce*>`@s)OL%REX%S!ZPm)N
%r-E3rUqPh88fcZukp*OTE%^V^s&h\k/=V%a.4'u!#`b_VC#ruU\$XZDWlsN%jO9*uNu-"HDf(S%Q,*fGfTuGE2+J\49W+N9r2f!h
%oH00k[q'6.b@/V_aO1H4S0O0QqsFmGRJYq*mp-',+s_SpG+f6+'ghm&N.ft/>MM%<U_9P?GABgXl?fa'b<KRo1mYbCH7=rqB_)I-
%q'FAMTDSM\"LH3L[8LIJ\%B6-oi_5UY5YnZkZk6kcWZ;Dn4\l[=?1Qt(VKT!F7i=Ns4+lFcb%edlb6nXenQX#IU!"R9\d7j3gg;n
%p.MN,CUq#EjC,jR2S*5&A>&"Kr$.?pgVP+1Z6YAB.??Od%@mKqf,d4,&dq1/2RqVNN!N&j>]'^C9ZT?[8#%NAU05-t@.l8H`#TVM
%A,"P)_7R0=?i1d'Qgcc9>Sq<Y74`jp=]\(RqnYEZ%l;77<m=MtaN<M-`(*:_k>1kmql[9>j!P_7KJq+,#Yu.b-f3[fa[hGr-[s!/
%gb=*^[iOWAX#nKmNbMdAlhmi;-gCbnGA<,MO2anCZr.DXjd<UF,OGg_HX(19&F?LG<YdN@*-c^E[,j3Sa-U2G%BR;$o_:Td_GVKi
%B=(bPf2hXZgY&FV_mgN.Fn+ahC"MHnERsI(%X&qC\Loi20I@6K6BS2Y9CX';rj)6%l\2ZL7u/Sj/BM"3Y1EWeSU)59[e5&-PV4p$
%.6Wh)8SOd0q@GFc.Do;mA6hODHQ_E?2Y$Q8;PH;iX9`%<5Xd)3mU!aiQfOd[GXY_!n=$V5^(D:W?=O*"!_[QaB9rk`a^Me$(VZrB
%\bhumS"Gg3n-a]fh#/dYVc]VhCf>-OkBSo'p6+SdZ_5rd,2@XPrMcHhEOE"(bsWuUqoFTCKJ$RR8fu5@G@^BEVireQV+<.";TY2Z
%8PilTC*/ppYhL8#LOB5#n)>gDn3e+Qbc2_"7UkWJKcODkDE`L%SEgp\g;PBpkh\pLn-^V6*io/$rBkZApEue/JCb)S"QOWnhWr,D
%Z,h3\D#]l#=Nu%LhTYM4ZE<>hB>R;?YD/#V;J\\Y13,6m""G+Xr+T^R"`e:,G9]6E5CI[ehfL+%f(V*H["CV:l0H\LLc,\C9l#-^
%/O"c:EZbC^IL3hF5.3tr*b]nVMgBU2M=gf($#^i<#ba[RKK>-j%\YVTDaodO6+#O(d.[7pA^Vh:$P>cG'gc[VKa=B+UtCnT2!S0%
%jGntG6*s5C<C_LB(tN9h\/mqMOq8Q.0>U0s6*s5#:.Kd!8,UN\OcS6.aBAN43,7F!DN."OEURY(,=dQPR.h/sHgGl#"(P9iUA*[(
%p%j9\j87(V--p(r,@%*/(=pfa*g]76Wf9P,?'c\9Ef=53(i$2HO-]o":S?@clAR,LkLIKLEQ^)K%:n5mNVeAf/5"K-Jr.uNN^=;R
%Vk:3iAK78\*h3%u=?.pI`sTi9d%'22nI@[dHKbW<kU</Qg:38"8%!TG\fUQ!-Vt<c3HfU,j(#,@XD+s^hRXQiVZV\6GAebNr^F,P
%NQ$r&RsjjfA=Lis(%R)8Q:HA.?cXUbheLdq*#ZGHE>_h@VrPPTZ'f<5ZbQ5@GV&47#BY=G%Q'Z;@UCugLrPK&T`^`;T'NnCnCY5Q
%Va,_50jG)01*bWs"%4L'1$G]X"GTAL6pOiVK,Q&_fCD[5_UQ!>8X&V?LkNs#!&ZcrH=J-E=hi0'5NW=mg-btWL\<89P:+H05n$ES
%o-G>Cp1.^8I(JS?o!mTEM]ku&CK$-*P;`oN-cA%9\G;9.j@o2=s*K0_1Og4%D/G:@XZ-fNa32_C+udQ6nq9O[n8V`qMJMpj0o]J/
%1)$*9EG&7piU2GR.GaOThe5a"gCrS<c@8+bGc"UHLncqnSTEg1;>_`n2?KG:ag,fG2fbL"fCAJ(b>:XIpf.Z^h]e69iJ`"tA+[m>
%_rD^)aj;(V5&7sEN&kgKC:QIA^DE]3DaUJb8[:Cn<W&[sp?J"8r1,oD@k+kpX"Qr^`&8r@bN8Qo"[<DYVkR[hoBBn.[EP.A4-;Rl
%hU4?.j/+Vj#RSdpZs&L._J_Ve55n3_m)NVmI'+pKnh%t:o]1)<8hDDl2MbOs`-h-dZ@M!.jK;XY=sbW0T(>=9J69+$TL57SALiB(
%kZU280?KWaB^b@S$(>,hS0Lh1pKr8'f)*Q(cgf@-nLAac6Imf$C'mc7c4pNijbX5jc6oU5QZFA%P)NJ+ad'fs^$hTVC/q&6+0rT*
%NJdSGpHq@I,,#,4Gi8)G<)WHq(l9SMmQQ8/`UKk&cM6&jXM]p=qG4'6iUL?qqpAh@Vg\r7;@Uei=sF:,A'X2m*.:Ej,"7@8/e[d#
%iu,s#j7iP$\2\tO[:R;:E0T?^rdD-$9"->@:0MNF:M^upY[JplK'phIoleYFpR=,'=)unp6!m=!'WuUPGu?V-\CsmMae`@TL\u;s
%?sFkE8Q<"Kbi\FVTRHl^aX,HuIUR-]1;6M!17qnAl'5IoCP`:Vlb>%5.bWNB/ogSf67UiR!c.b82tr\RWY__%T$=)b2ng(/YOd*B
%7:mgrlgqBQ[9CBuq[5@WV(h;&(HYo(44*jg/]kt4+aRDN(@('+g4:4oE,/m.j9cdd/6'6^N-f+8\T!7`e&sF.mOp\-LRZKdIdc-.
%),r,e*T4%o:ZDh.IB/<d'.^M?p,mJ+F*D"8n+p)VH@-=3r4/-)?0g5?0S)+8pL.gDqt#M&(Pl<A`id>Q_8TOKP_Icak0<dJjN<M*
%qI&sh\RZ!"p%n?VL!dt1N&'Up"m((.dVa`5h;K!!*7cN.@Ne@=Bjl,WU"]?3@C13d:h->5fQq?hHb=:\/F9$G20s39qAj'4$bORQ
%;X3E)C.N>0m/t&J?1*=La30PcUssS#Y[G6^[h\)2lC32A_qo?'2.UiDB8l-hi+P+:GGioCpF:^J2!Sc60c)I7+'9Z,W\\an=[oq8
%3p"VlCIT"(>N$:#P^\CZ"1bM&`\-<rVJ4@[%Dh7^:#L5lmk_3V:QHQ`COB-$JAXfr83A7IUFUCT:Y0@qqWD(;>n-6/MJmd_cMLcj
%9[PUUJt.Sk>ks[foc:%fAM%`?11B>Wq3I]\kaQ,Oc*p(RL*NASBKJm6f;P_<;"Z4]#\`Al3s%]%KAG>`M>!)CQ_392EBn)`rol+I
%9PI1+mi^DbB]oH@I=*Zo$h@oaNXb47-Vl9$UtClL@!H.<FidS6IedR.n[QNC81Z;i1HKg-]3NWqkiC/Zj!0GVU2))rj,.k3LZDNF
%geh]>jaq:B#3M##PE@#L;'M\E;P;'3G;34PaGo'p+&(<k[kh$CRD`NeT<WYoTjl50B51Kn:5BL,^I[=mesiW#FL7:-(#8aB4kcH\
%/<b0m@<sl^A6#`!*eS@rECEC8pDD2aFRB4gfmqecjdhiY$0,RaKl^PlKitU;X,:m$lf)Q_::Di!D?BBi>*#[b%V<,(&5eRW<NeMC
%iF^MQjflJO"Jd#?cGW,Q-Ro!(A\j,9k6afF8QV=IPk=%mXU'X)h0h=L&_7I>GKf;sV6;(rTrMP(l`s63Im+_9c$?W$K"SP>or;GA
%8<R[tJW6r4"?fNH4HDJ*"H!Z*g`\AC@S=&%fP&[maAa$]FrX7>GYrMWaGA?!5&qc<b^n]NlIlek$<JRb`amg.+r,"a48nK\]5A+q
%j@4A=1?29GpJu=J81`tnS&:?>gc1jDs11L$Q^,5(mgMLGi$)=m'b.l9K7uT%OW.qt=MieAqd\p#<q;r-Dig1McFQ%.EO1/,)MjnZ
%($APsiN37Q^P0\LTg:'T?\ai#d*RLb<O<b6EY,-Wm$7+<V=`RCr66!!5sX!$)0,7YBEF2)Tgct@N*g_iUAg\mYWZ/[INc(*7s`.n
%jEsLbH$.6=mDOMIq;]HIPcWN&_T/5u%Xt#`H0!]6^TN"eMFf>)U"IaHFPb!X8naC>pZq*<G9q?-#]6kPl_@gAd(HiY+AuXK1IIsQ
%_<1Sk-HNV)I37G>go%3MM`lL+P0e45:Z9WH]#T7@hsZG9_rXZ_@Nk]_j(YY_n6,_Nq8t7OL:bKL\7&QuKr`:RKIK!SqC2VoRW(Ba
%@K_:G:E!`Ybq7u>1gr*cQ2Eq)@,9kr>_V)rYsR&Z3QOP-!nEPibO+#nJ`k*V<B;aP3G]FJ4IdB!T3#94q;i=rhV0j#9XHoG*AH8c
%^f[0kMg?R0)(E>'c:%2ciaq">6f5N*7Mdpe:;2DamY2pnhHi/<\!>h4Xai4T^8+96j,`_S6]J2q,%!eFW[GA%MCqS^<VRL=W_;#2
%fIE@EWPV^MM+m("_8+jZX"Y@bH8/t,6YYdh_1'i>XC*CZWhBQZl*qTKh*K^)=n2lSWR[JH-\l3pYbCX"CR;jnd^'4!JN?guHZ"f?
%eZDPKf=)MB-_'@YOlc:+3.E5PY^"i8oo-J?@,1[g6J$:=d4a+X3V,1SCsmsrnT#;aB$8H7;k@?&V>enMpF.f$=9$#3bJ]sERSkIm
%b)@bJY0M:SrX0JJhh:OL_IaA[N\e3]$HXX>k$C#F]KFJr$(5pg]J6jd.X6EDO%bFjB6#pFWV#&;*KPnQb7Va\)6&p?_O`X[ok3f^
%Y?HDO$!,5OTGgi_LWSi".b0H=f#9WIo(4_J[<ubjj[a4a9,U;IoLQA0qCXWN>KqT8oWR[\,Ki4h[7lIE/[[]@KS1$mHd4<n(bHB+
%epBHcbjsE1eM<;IW9)Ep_nT3p6^Lu"Xo>BINW2qUjl?b-?GD0jL^6pUl17a[YEos/o$_'+]@lLuB_NB"2`@2_^C.7>_pj+Kp*-c`
%.mHOj/Gk,e7XF%p45MoqBdDk06<8Mqh>8Gg>g7N!mtCqu6p*0gkP*ec^o1Urmj;EWl]g!9ptPr^7`9sKk@:\G!'(7:$$?PNporb)
%J$ui4!JX3[rA*NP!b8e0kEgXC?%MJ$^RsH@`mNBQ]_@8.4XP2,WS5KA2FGFY_lG@n12t,+dm@5d:=XB?XhD>GZMV;pg(\'M,<e`%
%IQW(X\VJ&HASQ:J.HYt140O)TWo!!QXXj+#Wa26r2UD,1r1RlWB<&(MW7cWug=;3[D"\sNG($66r*4^DU$C$HRFR(m?(\+)4MKKt
%W7k7m)i=O8LT4XPW<R_900WA&67roJP7L[*OMfWKK+Cto5#^jI8"SOlWn3e!b-Wp8jr^UHIAV>=Y@E@c:po34Z"O*1C=dG6F*#MU
%5?.#hR`]46`MWQ0Fbhj_P&WGX%omtjBJ<.\E/;pYcM5]^?[Sg+Q+kT4ar,Z,g7Bo'd*/_Kf5l0L-JrjD%orMg>L*48ec,B1Tg)Ks
%^1<WpcjlUb3SB1f6f_HHrLrM\ouLQ+<#q-Pj=I:m5%5"-khoP!ku4*hbN*#sB87n\rr(FdXRb]hmV',CnWDqd^W7Ao7<s'4ip<Wm
%ed\,,1?O&b0]gt2:IV04cONgB4n7p:hX^#QnIm6N@>aXB&B3?%<G<,3B8>-Q,HB1(Gg!4g?`#6tp1a\*EOKfB`M?RcN\/O'&n\`G
%lk%.h,AXBtf7f56cAo-"rN87E5[gtsNVfGl3#cu[L:.lpFa8.dibX)`Atnk_&B3>;=dO(LR@Rko6Bl+Y\1YNIcONgB4i8q$O!r:s
%hV7Y&o'?p`A53ee>FljeP\qH&(Zj<nMR,ZNf1p:'RU:%mqI3BhB87n\*lhb6b-OGH,;O[m[Q2)7`S$hTi>LKhAf#)U:U)V2\.(m3
%M-Y&/Kl5He:/RT'U,[KnF`!N:ljtQKeg?&'cONgB4_\L+.&/i5387s7LV$P'B3LOk_TpZ:`^^kidsjG@1-m@)W,H>GQC[m%=?4*e
%4bGe"T1o,r'RfJ[ZdFMqr;4&K^Rac6:(Nk6\8Q#@.3#b]?3@p54\gQ^qf[.mgDe/_;31Tt[dRLmU["d*PWE<gNGa,,HSu!0HYhcp
%Z[YD/:K27;S:@n3'XhIuFC*k+.`TA;%Sp:`mT1i"qhjn]I$H-K`HYLB9ij'pgid`1G89/QXlc"P@XMElrG66"%',H=N;m2&3.;%H
%HW3#kMXa5R<hEY=Q$N1`S&'PN0g>.LP*o=/:QTKT7E,$)?ceh4@bgA>s%UK-e<T\_Xg=Ct@XM/Ckj0e=_rQhQ?SQH>0iBh,G89.J
%=+;P3j,mHRrB"<(\>(\@cRQr4W_3\)0g>:XMO@G&1H`,BG89-]G\dR!j7I]X=#9kg]sD0qqJXr?W>N*]9E,@ffi3nl@nM5N1%($_
%r'eT7X30Rc.`Oi%(/n7m:\oe#hc5X4eL&MS@XS%,k/1/WLXn+W<K)9Lbbm;B'a+8#`Ai=/D9TJ9B2C<(M0V<X3;\U'd!'Y-<AFI\
%s5b%3j##='.+W$10oiY(B$L,.<K'`Q:#Xu/N;I8Cc+7A3G!%\J0\,:TrDCPDcYZj8:bg8F=G9Yr^T/4GdkA&2(oK=Vrq>ckYSH35
%\4c3*(#sjh6d;uI*5>u@jTTfN.`U:Obk[`cEIT%![9?%fCt=RF?,_'8(I2S:0og<0CW?CW@Q_m/?DjtDs,Gm-]OH8IhOdZa\:*DR
%C[^^A`^>(3;c\iIQmMR?MK'8)*rh)o.4`CcqL[\0/&o8D@0OHJ.`S%RpA@q0GW:b&g59n=(YSe^@XRh8VR*9>-T*,<c1hFS1L\7I
%i81)'`V;',Ams)$7)er^e`##.``g_[m-gslm<4WEhc5H84)9*@W&f>(>\6hRm[D<@<JMLpTJ&.<;Ym`bE4_PT4MF%\%_%RqdF#_.
%%_$5ka&^be;'#(+=[2fKE;%N8n#F:m1@7X!n#F:m6&j%`5H,.%CVuS;?tWddDX##SLc^BA>oc,g9A_P,%_$5k6e!@\\iP5MHK;<\
%iSj(@VQC@&er0JqFa/]q(s\d8S3;5t]BX@I[+QgM0sg.a]/KRg);QI:_aA'Y:K8G'cKP7sl>V5+C"ChnFr'=u3X^R`^TS,+anq7A
%Y@RW4FncZK#np9n]6r[(WXcM)M>EKe;]S%:`BmX]gJM2;I"1;/iHB)5Cq_8\/cladHfC5jLYMfG+N7qh*H(=PZMK&M*H(=Pn'*Gj
%Wt)US_^"SfHHr`Ugtm0Ic,e,0_ekG'q.f`LWl&](iVh'Cm&ItjY,iK,+&n$MrV>9E332=`]0AO+@TM%<r\i!%X2BFn/sB@lO'@t(
%</7gGnorXCj/Qp-;]Y;M;Z!N[E1<)C<LbkD%X6Y]Io@@OoD:.dUW]$q?^%sr4siR)Yko)Uk]>\Vq;)Zia:3/M#.qdW%YAsj^HW+U
%%jpr9rJdcYPVA\-;a4=:TK^AbnFAJX=!%.%Er&Zb>`Qd20=4M9Nagrm=r<-VqG-J^eaL-K5R6/2eN"*g5;PG*8j6)U5\e/Sr!&p,
%R-@Q,'!U+$U!b/lV&jU*KuNALS@O`Xlb5:W6&8b#-M#VW7I#4H^s`6Dr6=mNUV=V#Fsf4Do?Cg4?j[d*$SH<<\=I+/-sUH)oK7r?
%h2nj,7mBZ2lS+jr'lpm<ojs2N1t<DDK8_F,AUVX<T'$=:mR&k/)]<jdaE.A[R(DjWWI$f#$P,r*$#nA<AA0fT`CJs0K@-Z,Ok?HK
%jO9=fi:\N,g+i>eN;CQ@*e2ZM15Ls<$mNGg=3)6F*e3OeQt#'.>]MUJ3gsok..fIA0,fY)8Ubq#Q!?SZl&/mXMTmJD'PjU0>PNF"
%8-P5AQ@J<L6HMH1*0H[]?9Fqb![)S:ca_<6OOEfp&<jShB7aU%]AVlcf'nEp8ITf"E?(]Z2%kdjp9+3F0u<?<:.((WR#Mk6b1JlN
%]5d[KV9e0p<Pq]ck.(n8'#qBKlg#Tfo3FR.9('@s'`20-r^9bdSm.\S854N-KDQ&CiThih1Kf.L1J4b]G=7PPfMKUqiQ<s4IS%cC
%6jF+;K/B`(NeK+4\=BK[,;QtuUXTY@V;9P2Q``O'Ff3*HLP.+pp//Ff&X'C@n"-I?"0M)*FmG_bkrc[pSO?"\n>0EcC46"/:O)8"
%H^s$:#b/lS-BHcmC+I,%7T>^tK$1[Wgn(a!/<2Zt1;e*j4m&%d`)0'!e>&YWA:-,[A!l^QNpP/s#c:,S&p0Fo`O7SEA?]r6k^SBe
%$MCod@W.6`n(nR^S*H2*2<%ArnQ-3*:Qs)^]N(a,*NEis<$=.=Eh24PHr@?ncK^7>W`u+(2V$/-Qol(+o8P,`k:"At/f#W9_*p8c
%giO@TYu/#&>aNm;`$A5!bJkNLmt%+h&8(r+b]aC<+fp!k.6_eXI])dEciNk5VC0\b1,6EPSTcfkWdAiif`^2&c9LE>CM^Lu2C@36
%P8#=E>.:4:j1d!*mRuseA';*no2mVE>%*L?j1ZCioGHj[iCRq!Mo8FH%n<P[Vk9s=ZEl$?T+>^CN3+LOW9%Cn'4*8Ort^@X]fgp]
%q=^.ifgipKo:F-#InM[u/[K);^Y4';[6@VCLPh2?0:bn4Q<=S2ldisWg#Iq^lMY&;P\M*%f12fO9!L(HJ:;5NlU+Q9CAH.Ub@@>Z
%8@AB\P:6%70=.n,OB`YB/ouHM3a;jcH^G1L-IM_4Q*:;T0R=fpr*Bf(D],GC3[fUU92GJn(]O?KmtQ!5m1Nn2+^lj%*IAl,QmUja
%YYdWkL,\m2Q>@b0AfDW\F3MW"b!jCQj:E+[guGP!R-;04j"kYZ0\e%Wk]`pskcj&pfW_*L?cId7hts+bME^%NBCBIHl>0q[k$l)[
%^J/KSeeG)e+(8KFOfJf=(@_=U3'Y;@ObjRb8u%P^mN)F*YSfI0k#>Q[^C*mWFZK?T@i4ZWgit_n=#h)G(S+Mcdo;B4gZr,4`Mis$
%(H4VJ(KU!O/,OtNDS*,YW:H05&,VoY_HV#i]Y;#,[2^WmmXE>k9suc:eb1iV0fYT\\>s.L\`:o'=EkUqg;a%?l)!0*GEks2*=[a@
%Qr-t31s@8k5.>l%U&R+XQM;$t_p_'+anp'el_D!t05Th7KjJ[faR!4thlk8Cg8[!=SE(#uCRrZ?3?`ZnZG+j_Amg)$eGAk.k;&Ag
%m>>.7c_n:ioCE!l^G3CZMJD:9.m?-r\<F=LK"KfAQ=9G>?hZ>2p"+PU]30$$E]6GdLV)dl/TS=ImlBh3m/*/s*[L0`f>Dj&HX"+<
%EGsSbX1dA(I(@j)5:aErBBcWZ9F`-@$f0#s67hC`\T4fo8a;;uf'49[q0/+c\Wc>Q9Meg5bI,d8c,8*"@_9*P=;%F]e)e'^Uc*^F
%</Iec'hZZ]kM%it.6Em1g3heq!qNDbS^$p]p8t4#SmRqsUQlRAE.?0pDq*BF^OEP?SF!e,@EZ:%7pNR.oh^%de!9O-9>$U3Q"7Fo
%YIrsioIbamp$M-kd[/+0MEn'cmd4QH49UMl[ji#4_!UN0Kr`r0\%dG-lh.[?C4CN6e)c7:muRBUr%cY=^<I*G]$`$>UM?@TdG!Vi
%-Ec1EqX]EYpft#m]GWeHS6R<Y0,o-"bDj,/qP*q;$r)$oB,i!=AG>1G'$JijY?j$0>'e6E^C57JrnE$,F(V]LejjLk0n$d5?)4[,
%^KuFhT+YrnR?nZc4'!RS^T5;Y_q[VQG*cF3%eJB:rJNc!1g?MHD%="8;OdXM<^C*f0'."MiX7;9H[!5MF8(n_;!-W.BAj)DZ+W4*
%\(hGdI?=?amW\3`Mf&CZ-dt-2PsJlW1i2"uPiM=Yp2g1@+gk=?l^>!;q:+!ch8ahZ,;q*S*#p"LMlQcMQXY/A&3]4BGUK;+JmII#
%;ouY:#1Br?$>!)`)Q0bD]@EfqC?t(&VKR>L+H@3b$MUTTS1M.U+$6*km&0KE,B%C:%!/o2PLLiDs..HEZ;^NYaF6<RL6:+hmAbF>
%`)I[8"$L^+l8DPU5tbG&Mt[tMlp3<>\?`VLaF/KLjXY+fQggo_PWM',0(\VDppKpqGYqR'k$km=YFiH6HanmMP)X;Ge*%2OJ@1>Y
%ZGiI%`I(*WPqse+2t]kN]c>@0MDs.W\Ct7[?feF,F,/#Pf>:/CNR*$k+4$V#2[OY5Fb%p90&8]nqlruD6t2SQi`E>QG-[pHkATbu
%d`8i+SP6@n>tn\^go]]K%ke(!F;-qhjA0[#_VE/REjej%jKZ;rVi^k%hC6*"Y<F_TfSd(t]XuBh2R_Y.=Ltm6EGDepE8=dLduC_>
%^&.o*^Fbm.EAa"DbI2sRDKaI1:9b<Xh8SsR9<B$hM-I47rRC92\ih+kWNs&676&,"FGp);XMEg0Q?.c''$/;9:XL0I5s&1>#Wf-f
%Bt!Q.Cr1:4LWh#tK,_W!lCs8hUEk,E8:G!7;:<TJh-S.2%n2_"nbgC,ALGr#2$_gge'Vt1rG$?&7SfAZ?4Q<d[B$4LD<?1Fgor-4
%;L&!kjpVq+jBJU#AZggSG*6Q'<k8Jk'Sam"pmNml,<t*A*Z"<2:Wh8Y"02:>Z[$#p@khsr5J*ne'jdIm*U;JMSbjaikds.WN/q?*
%4X@RnIN_q_T$tY%F5\qD[FEIAokeG*^0JmPhsYV5`BI>omh`+L_UCfUQ9NK(mW6F(F#TZqFmb(Tm*84Nj"1mBmYf\r_Fnb9*gh$I
%2##D^m8CnRDI"l+l4<&:>9C`qDW9]S<4C2g;mQQ0SD@^gALP4YDg,:*Kt#TC%SR<,beW^f%K-2&HK/G,/7d(54\.$P!RP_&&c+\-
%j0lb$:X;,Ka8*tb4hgKYeeBu=aPC3?i8/_>KY^\-j@]AglR5]B/aW0)980jEq_[/L2nU>9p12U<n\p^Ya\Foj"c6&)p+tmpB@iPD
%Hh]q(::pKNk24MR:5HHRlm[/Ug&-O\0_Wl`I5>*@h71^XSG-Af/m]@bHk1Vcgd_)EEI<T*2TsiJaa/=0)DI@VEjbn<AC,3hdUBt`
%:I'RJ#DLchRj8nrkA1:I%-*a*[Wi/mE_F<H/)cIKNa_ru:_F^#(;LVI2Jc?d3KV]+=+r03!-I=K-^d\905\Cb-?t$_/\Z4hBu[<Y
%ZLrNnc4oOS>.u2qXf=>)ikE*ge=6'MX%3YJ[*"*irQ"lRlg!LbJL41Y>7FE<g'9au=,]9O_rkcocJs@is60nLBjPC0C$@$eXk]2R
%2e7c-+YRoE]2d7CQ2l0QHj`#W1uPjD*%^.+-.P[FENp"&_"0$jT-`E:.:62Vm6.@/T4_r:2R"6%^E/@B8e-Ob-0iUgc$-1sheL$>
%*3HrF_^;MljLLn&&Ag7X:#PX=I/3.JjD1Z9T/djTqcgI=XDN9eQK_fSqi!O$(MriD75"],mA\:NV2c\[D_jU:T`!D^laeWaRq=p0
%%j%5\jbDmF)*HR)"-'B8?<"8W7gfQH)c9JGM9hej76qr[DE?b3RV,%&jsps(7.OXE%]e>I94JtXZ5HLbd='g3=(If:l>K\jii\UC
%oekjK\npMj[)DiMY0prfpB2@n_N\J%I"sTZ\K[cuAQ-D$Q<#tRj/2s*?eadf[c;:[%Q+QsV5AGp5LPmNmP'(eYc8;t@pg,?mjHIf
%CTdt):Z<sKQ-OhZ/"*a&nd:7.Y_6?F^CM)4p(O+?T5HBe%oqr<dFS^:VSa:B%F5=kQ9_'ZD"=gk]?lruJC(>MJF$T+K(](F!k[TD
%-%42-Y2q1k5<?j"UuOF6K;]9e4<HiLVrkf:6Tu[F&+-ITXu?VpaFoEAN4Gqp&g6B3?P3mfU+55FX/`4kqm:mgC9.D-gaD=Tq+oWr
%nRQO"MFZtSE1(K_d)EtOqY[_oQ'U^QMN\4H=T^]fldCd9p"u'UQ-ALt+hfSB5$i&D4QN)aa)W++@gFK0(YcEQQ)3Y5rr)D4QsVKn
%p)-s$WOc1ZX,eqU"MiS2I<BQgV`,!KVle\GC*Q[QRI;$A@WB+h==lCnW;"i3KC%?:Ah@)2)a4sB#G97?Z4JNj&*?0R4RZ/cnt=L)
%EZ`WJ]T!_6?)/6Vbmg]NLkVu?NX%Y"fB24#.[f/qR@Mj;NoT9uDKNZ4W"0:#<cS9o;[fVScWl#`n4HK*nf(as!@+3qX=TtoQrR//
%Q[97dYX51fj8<IiM(bb&X*=/KCqaKVlW,,*e]YJ__+,Ns>ZNZ'#(MCk*bE(]E[=e33iV;o5@5IN#JQ>IJSdQL4n52-.6_kA?sU54
%aX9pCT8Og::Sh%]oU@S$orm6-UVTQ%KRIg-AuclK)u'?AI>jKM=8nmkj1rFd`$Pk"XaD,[K]>X*^rb4HF_@'%:;I9"h.K?jMtt6T
%I0m!GCj[%pi8HdNHlCi;3;RojNOO,EhE%-KZa8*8C&g]gF/bf(67TCV;6?!cX,)D8n=pCfCkL>P]Fo9_=:do/?&6[l?/3X#c'=ja
%K5_NFV@0PpU-7Y1CM1n`l_p4$$ZiSs@W(7#cQ+sQ"jN<-6Tfa4_8adn9LH19m\27>\D-1`O#AH"D`5sr.td(-qZ7(V)N@8jo?mH?
%9A`V@WBM-qb#e#gKM:uNZUGn[,?`/sSk$'TQL%.r'jXtea4ECYgO7dlCa=5HIX0:=\*(#AhmZrVo&-3H*NQ9f[[UViiOQ5dZ-dp>
%<c;kO[V@Il:K"`\?C;:`q*%XFSQj<dI%96+CCLd_r2rHIE+=g\qj<"*RkM3fAds'Vo-r:=<JD=LD>$mgX?o,tRG=:?(>GF-;sq8Y
%0Boh&_#p.tkCki</Xnl2^"'[os5n-bgE3B%N1>g`OQU6&j6Qp@:oOPC82#T@Y4O/$`a++B_WDXM-.&7e-/^LBU`OlUBml'u:s/Ga
%8"eAE5'<P%Sp2*J^^gdFPHqEk?EB_&U;Re,[nBDt_C>7TY7%=?5Mj515KL%#G-8WO3F,:E>*nnK[W7KfYGB[%Ch"j!mQ2hDojP"q
%4'Guq!)AhtKa^#]>l(b`^'(=e*'35K'&i*?&@BU-STdoNc'lL=XdN$a[m0A"j.$aiONrCdj%FJdf#.'LGL.W(:Xm5K:E]6t@cLKm
%W1Wr!'r0j/!2>YPYsaSih!C<;>q6Sa@&%SO\=Tk904$b<Pg7mhT)@6a&#Df*6g5sa8A0scBnPFJ;-I8YH[I.gJ_m"%.<4fkE&p!O
%Ok<&m9nX.V9!"',q`t;JQf9FShT$$SMu+m`rKKhu5AnP.iQ5..RN&P-%9ge=g]qZ:kH\li]B00!DU^kj)c?96>lBQ+TQg+p]2mNc
%I9b[,9DG1Dfu)$kUTg4@E9gqSFCq#'gj\Z=Alqg"TgEb$/pf)5@&hQ3n!T'H7[J3(G-[g>Su1Gr+?<_Rr?7_$@^Eo%m'bL>_pttD
%\3`YF$gb;d?`8#Hh0.pIO8p[EM!aQ;.qiI'_nOY'eT-.grua+4]AC"!Ud4%,FG^Z!^MXEd,Gfp10/<h>WP&L;+t"+[JN;@e`t6rN
%R&&L=f_g(TjS%s'jm:%UrZ^^'Q,>gHNWI8j%%dC=E=C!#a+;I,*61J&#;UdL*!<814HTB&iu$Q)NWY\63KAs7>R*$6EZ>/sXRe^>
%:QAr+q$VNlo-_R5)!c5_aSa/"%*Z\9+S-u$1&+`qa+;I,*63SPiB34tPN/&1c'&b%5itiHNVK%Gc29O*A?telk"h"IkkPU-+S-u$
%0gIJVJW.op9I>%Rh0ae4pO7M,:.:i=drPGYgS1><d(1/_5P(FMre,,?`JB8a]mkFe/$,kS2?8[%/LZ>M"V\3I%5uYNZh$Rp.sG+K
%\T,&&@5TWb\ad@Hb9%Wf2892hNR\W0K[jh(;d3Oua*[<`_V=D0%j8I_L?U`(RuR6lP,5]r%i-d@[`gCgS@.SV"H$\^/bNrt8/OdC
%C4PjdnAbLj"\JAA%PE&d(jnR2$>[hu+ZZ\JU/6,3^>@9S+5a,ef)!fXmHf)$Me]ed7,<24jPl6dp(7L@FB@edU%IqLg!;%-eD0Ig
%FWIub]W^C)763^5N?Ou%3]7d^s.jF$QnOtI%ga(3QtHACQ"G:L)ne6Ojl>RZg!Y:/*"?q\/q)WTIQm%6P2U)NgFntod'.N;"srF_
%/f'6c'7;uar:A$C7UB)@Y+1gFjaKohnq2HsW'BEZq7C2\Jt4H3gFBiN4!Jo@o:MGjEN3s@4nH0-H(#W-dac);k^F`Ir=c@N<^*l,
%4M?!cSB&3VbXRdTp%M_YlY)cOhiIMN,K7"+im(a\1$meKp:2*1&%IVk<IUou>HaFk=?[;D\i<HcQ6EJu9'/'NF!$hE4llSU'H[Rq
%TrE4DdC=U#?!V-1L"pG9gfRoHrKc/$a<h>gN<sk'!Cu>QlparK<"cj<7Q!rga=j#!_e-#pen`bSmH@#M/$bR,jSA+b[8Z;>C0.hC
%%!%o]YZ5HLU<2V2qD&Ec*i)K+;lrJI>c/[/%m(YdlrNd[jJq:"2#IZZ;hdIaXbTH+*#+R]@(`U*Q=-nlg[FgLk>ZT5gtlu+I(a1L
%:<q>QNAggL[E%0<,hFN44a;92cQ'RbMe,-qN^mX^7!@G9)r8u<e?RlfeIK$+'8=_a"PuM[p[l8_*X_XCKq7j2`=F&RO.0k7'J?fl
%IJ-WB><:O2A6/hng4`^dlS`u4BD94&I>i__?,^\%7ota+^Z-l6VT`gsVa_H^F(%&;nbI;d[rM#&TA)?9]pi5_Qfj@Pc/%h?YZ&Nh
%>^UT!7[[It1jA-BmIR6doh%Qk^kV1gfESUr?o"+#\5iF8/&XjXDZ+h*eTsB*2uXr$>0(=<k#5UpC%*.21X#O!f2H^3CrQ/3/\-3V
%]H1$25fbOq_!-0r$JG'UCtMulUK'5CQ--t4gJ8H:K*=C7>,_/1X_OGJr:4ScI9B\o@_U_o]$j4bl1)31f^fl^%kJ/hZ(u^_bt\;)
%_@CmAL5msY_)KTo1[Nsu$ej<@9bf<!LBmVbA5"bE3DV:X)/6>S)!(AFK26ipU80,>SCAY)@5JdJ\`ClDpkX<:9TXJn3YqrDlnSO6
%"DbES!Jns^I,]@R0=/*K4$Gi)iSB3@h$\[[`H!>nF/N4>0dFg-<PegGS!3f0+'.p)8[VWg*-MAR/`pR[V<oM+_UK4aDf+$YqsVbF
%Fo035Fb]X1Qt1?2&b_k$+$g:cHb#3^`RfKKiHroEW6gSr(=lMFef!)aRO!ke$8?:n9p3/+*&HJ"(Rr2F:H`fmZR"o<"S/Za>S^_D
%q]]-^X)"eT[IF$`&i6"aL+QY34+M*iJ[Oj[V:k;kaBK]F/BQp4p$+<Oq]"S]AS7Vq,O'ejU!DKG@2eE.mc^df"@gY]ZQ0Q"rYG>k
%J*IN[](k?ac.X1i;1.r`B'g's@Xe,eZZ_+3=8M!Uc.X2Dn$)^_GK<_;qBt\BAtjSBdq7tWOh#`-dq7tW@;`S65Af!)Bjb6AjJU6`
%3t8Qa:O_$!Zd[9JnE-Xn3]i>fI8>=GXL$Ah7)tjj2XB]dbi&!QVp.7a/`N7l2XB]dnEPDldq5/A"r-[N:RcKM)O8G4r3TU>Vr?M,
%k,6Hb3t8<3DgpEAZd\,TXJ9gEAs&WR^?b"):RcKM)Ms(@kA8Bs3t86u]_Q9Jc;#V\`KQoPlg-H<^UWj`At>IsF7I@JRrrlmiFG`5
%g8qX00Fr/8kobQ!+J:65o$_3ASH]cIT2%(_G+'e*Mr^e\3]eo+o?0q!F`s4%]$BH9brRrRGBo".AuF%Ve'KO!^J'aZcU44FFrHs#
%9pl>(,!-5knrtSE+]-%^@W-_LXL$Apn,G.KG(T';bS'L&E\ks8,B4PrIbLm0du;ff>2L3/Vm2ci-`Ndb4"V*B'8>FD-Wh#tR]1b,
%SHa+N7)mi[ZI><^g!!6]F`n\[2\=@'%("D:ei*oD^Y>p2XTef_A@'ER6]-0\dq5/AL:3p;5Af!)Bs95MY7$^Y3t9Le`a0H8F`n\W
%r*uo<Qo[;<V<-@q!iF7<6S14i\q$cddir5'$^`t:%5S.-?5G;<G+*E:2#=e6WO(&m=1[tOJ;^ecnF82VfP3"B0(k..9@fH$O+QTu
%r@!^coJ#>!4h41A@@`>o&LV_gSQ#a[4M)Z65DsjkZP2r;7-UO#Zc<mH1S-ZQB.8Sumlmg%hpAK^(GQNjS%3G[Qh_C0li%,Ae\s^g
%_eMBEH$?F&;"Ec6Hp<_qQgKEj^&3?Uq=up!mTf,thaS_V^heuH4E,SfI%RJn.eAAGo>94]`fgrfOYH#pGN[C<H81ItScGsJm00#.
%.T<N-+#B2-C5EVt$Dm[t-Fmd1H'"[].+O+N6hP,F*]ZK\*k?9I':P8mr._r^P1no5(<Hk2(dtu-69?DCN6G,tpo)T@O6@G^H\\G[
%hdT%5N&-IH%#X6FNaW"o>oKLlLPq'IfFN#h4102k."QJXFQGf&Z*s]1T[g;="&LIeA;=_\LDRG!AG66P,UBg7*i*&&6Q5*#'G#(:
%bpPYgM(f!Xp,d60iJ6)q2u0&Zb$KR.RbEA5jG2$E,ad(^CH$#MT+p]L9f[B1rn2TB&Q@]q:>&m(ILbgfS+E[1s'@fmjb3EO+FSFg
%5K]MOasE/9q`;Ed%3K!?-9`p!+!+>7N?S6Q'd5+%\M.^XC24XW)*qr%-tSB6!;Itnq9fqDXOj'](bIbUCCtENS,8auqn;o>CCkf$
%Q&]LXl-a&&KH;[BbaJX\.cofZ,86&@9M7#L77Xud0_LVJDPoS,QUQhQN1;a_h>+Tf2.?%:gdc\$KSo3;<.p7:WKoWlGS6,pOsX5A
%*A_A(g-,I<`sg/b%7&.r_`'_G0QQ2tJ+/h6RlSk-c7]ibeB;@J.a$WM7;s2AoiGAfrE)@%OKJq3CP`9k]M48ood_n7/(gaKB:2dD
%dqi%I_*H[XoHq`:/`o5T1X5RR7^3&;RenpZ=AqC_4G<N<c6SG2STlDlSk>s2P0uurgE43r06KcXpD:TYZ<s#nlo5=q-_P_;Xa/qY
%DVQO[3M&cQ5l/U?!^J,-h9-j$2.X&_p0(X!DSJstlgtN<rjnDX*k5YT.c"5`<Sm:=^0Ft]A0e_B-1#C-ls"19h_=#p!E8^"cYTjg
%rQ1;0r'OLe]RC!J8p2,m*:19t5'qT]50k6dG<"5Gl1rQdl")0i3''&c)_=>t?qt8kp62[,G?_<Ipl!p>3NkItHX9<M-.4Y]ZnaeI
%@*UK]O*>i-?csEoXa\^I2rjZX0dKqd3>nM\T)WF^Z3B$&aRcV2G*PcaMo9')\Z?6p?#1XuAnq!.]3,'1er0#pqB#tBiP2B6jTR4c
%a>*fV";fr?/'Ui&ZPkF(,I,kFFDm7V<!J=W]A392RRGNY8b)X2(JRAYL0N%?5_OK<V>suB7(65_mPVjMe+!Cn^E^W%B8d1IrW@Wi
%_(T-qqKGnrSjXZm\S)^^?GJdF<Ct9+/4<\SJkq&$KS1PLK(BMR=cn-1(g1RV7b;8&NNN7Ud_4nWCIb`LogBCuS*:5^;0:6Sq)^Do
%FZ'l>KZ\9aD.W_*D'l4g9pB2Bbl#B59MlG6U5?7Fq1mYI^k%oM!TC+,-3?j['4a$WLM%Nn+M3ar37GqOfo7g7!>[H:2DRRA,G()4
%JgbDN.gs?Rj/%FK#nG`B(t20?&u)*NNb0VsBdSZCR1gl:1D=@Z_qfALi=`.7_&s%Z;L/2VM)sHj#mIPd+.=bFdCXEee.SK&"'$Tq
%+nNbo&j0,nab!%b9FN<N5;bkBmD$2b/.$>R)_iKoZN0Z0O]QrsfKTUC2%_*b</F75@8RW20H5T+E+COD#^Y"?NW*4?LbN1ij"6([
%K<rJ=Fr(Dq29d2='!X\[/gAM57#Lklb\==)A*0MUcu_$c8f9ST.Zoe5)Ctk"(WO?78:+@c"C%Oa,:]ja%'pZ@K[+;Ad1@S]dYc,R
%@T8U*Wi?0D0VU18EYOgE;aKnVJ4`5['-]*`&<0<gMSbQ@'LC1cJ2'g<4*2&gk+fJC-7!\>8':E074("I+>+i-]E7D1JOCfXJgu9_
%&DK/U$8dAL<Rh4"lb![W&V5$:n>b:KhU)IgTIK01PSO7R(,SIrQRn4l)$5,H2,9jg/cql3*g4OtJ-sBA"=G>:9FtS^._J5q6PT_)
%!NO"F[ph\OFVQkP?K*tN[m<`aX2^o2K#&06<aF6`Q=N3.$&O:K>Dlnk!+XZaS00M&`.TCM.U`e=o-+8j-sZ9T*EQb<)E'9#LmF-E
%d34K,=D66qbq'EgG-J2>qaD1Jo_(^S>rGg$QK&$a)2/[i72mKZ^]^B`+J>SW.D?o[!075LP2-MN?aEQ_5ts"5LoR*c)jgkrf-Jil
%0VU2A'Ef%:J>M7NqPU.)N[+TBW6M@L'r<[A!<fA-P$uUdnO+G\L-3BVO!5qQ)N(9)](-sF@)JbPJO_1B&V)h^()R'5l3Em&#(23u
%$@d]\TW^lf$8J'TXCDW@Pt29W(<@mdlmL5X_=&M?A5uJU-J/NA(!-AE!:m\9-ZfgY>o_@L-qMEB0NCj*1bp.=#Fb1u@@DjdJ6j^e
%)VXJ>Lk6.d&QD..g2];a"aET?22!W(6r5DL_&uMR+R6922gIpPM6O@VcoE=B<C*>ZhAD&@)I,f:[Mgi]Nbf4j"^-r.$>C+a$>-*6
%W^^#[OB!8+-`J6MG[+O!-@fE"AXrg3*aaLN/JHh=a71p1#s]CI)?A1c3W**t8Rj-P!!GQq-4WF4"Uq1M&IChHB\2MUcmh.DQ\Yu:
%QY\Op5iPf?%d6fIbYd:E.4P>.3CtH4<(V`l)A4Y49dNd_WWuTucj5FD&/co?M7c+<_?$)*O;6WL'7#?=!s6=s-NK!H,,2`hGB?D!
%!&?<T8`3R9@)nt,"mcq_V[G)N3!1]lNi\$<Mkq:i!p]j@JD:oO"_Xsa)5r(g5QE96SY2r.U4EoPW&t+&!\=gV:#tM219V<sQ&&P[
%QSd7FHghCH#on,I"@q"'CCYA>.`.M#;:#=7aukG0$QpXV#sZ<96pubWIrZ1cI!dPs?G_CB.ns?41kd\".VAIFRKrVJc4^2UULkZt
%C5.!VCBA??GRDBK7ar>q"g?m&FNYcUo0_%"VTBA6&N7&4(_gZJJ`orKE=Fu4-DVfuM=BF@#fn2F'Pna.#('\gnNEWl0Rc9Z.oCXM
%'2i7T9bUQ<@(,"f@bNY4!.6!3`!?B"9[\nLJ/Ke?+@Ju_ES$qL'*Xt]32SrL0MrR7_2^bf9*>;s)+)\di@$F*?6k+,KoncVNr^ad
%0E[$'(XXR0RqR)0H,-'S<A^3od\Qr*,Z'r0M?Y=/2?s/U,UDp_+hE3Yb_,s_KTu_4D$?Yd8&b]<-c2l+6mqOH"hd606STljO<T8F
%&uR]N;?WE5$Z'sCP,aGO%B31B_2i&/!CY:nWK99^5QDHA%3-K#X<Q(`ePU^NL;ee__/a6JK[*Y#AVFt);pj"!!f/JP4:<n-S+Vs"
%i[M1H%0fmEd).FBj#ETQWPQ;8Lb+Ac5Qh;19iGj6iW^eC0kdu#k6/,U3<LH3b]$],'F]/q-6Dhc253K?<hjlJF@RP\;$Uj3%F9ZS
%"_9H"]>;Xu#`SO$(9GTm"H?$[,4hrZb^A#SC@h\G:(Wq*=YR3_^f2]p(s$&I&1.C*%%-^j#6nBCPaCB_TgT$<jomT4W9aKl5Tg%1
%/5R:;$ROimn]k/r>%Ii2+KI"!:=F<;!WqIH$O.eA+:]6>E=*F+^bQT+SYr:460Js^R(5,*+s7_R%',@1UZ[]@TLp%0Rhu]uXg7Vg
%-9B6M#e2<pK.J3&DgGh#1Un6A$nI'?6e'mZl5LtW#_HGEX%mIJQo,K<>n;m*"4[8^>m*GpFU*kR(L;&U%YRup0^j<rBO>Q+(a@cJ
%!\^9!!c>j^Z6;UNJO"`)(eB>ha[m]2LfWOK!8?uH.1i?j,#Mj=KrGpVTuchg.AB7"UZ:U%@YeODblSe%WanIF-gP1#3a3Jt(=>le
%!MGNBiei'6Ebb$HFf,WY6!:TtR'A^]*NPl".=uOL4-aJl<S'\)r$1TSZl4d>8-'H7*(ZgB1MqY'P4%N<+<"*kp?o:r##[m!0M!B+
%"26JEqgr@qN"?W"W"Kt5j3;NRH3OjI$&%"I`4ohd8Z%\iojl`O`c)EWMF#E[;asRs2(6hV<Cntt&!8Zb8dHn%+<V#HStQ7`@bAiQ
%o,<>(a;+oQatuX7i8PUI!Jui*YTe^Rfp;^QNH[\SS*b=J#T08YLDgr<SA#7=T1JW/:NX8N0l-uLPLrp7oeETN'B40,#?cik*hd!V
%;4(&a["4#Xkl\d]"i1KHc2g;&fF*9\;&$fg<2o9'':Zjh:kJcQe<j8pAT29T:&pBm[UkgpS6e[SNhWIK:UEQHTaSeJ113NdAojI?
%Xrkl4QWRGn8iMd>3MFF-)#D)l10X<6+GPY6]fF=LalFCV,d7Bt4N23Si"lfm"!4DA?e#Wa=tko8Wk&9Yfl3,mOG$YcmX3KCaXm(`
%Y&Q4Z!^$ZM=qmil<&/-m9_=)gnqQ'iQ]t!i79)_pK'W^pY$qYWg'XBH`=T%7@0/-A1MA;$GU^L#%)`8`#tQ<r-[%VsfJcd$Tm\3.
%P!eN.,33=,D2"]PU`rf?E!*<U%O9>c#QrPS77L:W-F-k4E8t':J8/FfH);>%Kdop:AS3+iIBu*o\%DsA%uC;Ep-caSU+i"eD<Zne
%(k.Yp%<U(0A#'.(%SgW4JNYNF#,5k"'6L(1nZk><\@bOp,*J]K>NQ#Y,-5O#Y6ABG5(VsWS0ef-QPc,D@`V&NjElT@aG\>lARWEr
%I"[V!\J(j@L2N),B#90$,%s)E>Ck6P6kPqET=E,I7>"*j+D.(FZYOFQ_mCM:W-T4KibM!2PqG_Lg0bVQoVKV1ZSFM1Adi=T+,3Ki
%<l-ZadqDRATn8#M8Y)rTCOI$c-;#EF3C_obg;tK47%'S_GT6c\#F=iq![/-di#A(/[Ldt"H5^;/M?G8?3h6G6Jr&VSam9]e^f)&>
%'9us**UF2Fe2cR16kqB]?pcahI&"Wg?jas_d^uSgd)FMO"AR0L6P?c!W+u`;P:/fFNYBeR;lL0<APmV;#R:'q$,Zj$N[LBUMTe[=
%S=[gE.69W;4D-HRJZb+=\jA0p7fj8[.Mjs;0mQ@@AAO!8#u'B%CAitjOf1N-<KpUZ$]?QUW^AW'3bY&![K?Cri\M2gRZY9s6?('c
%2-j?%M(9d'dkuHk#.oZ=S-g"(-97tK1T&24)R;Pt0aL'[!J6iiSIf+.<Fa#Q%%SV?,+X?\Wj9k5B&O*7hI+nH0lEI$n>dn"$.rjF
%%C8b;lW##<CNL*oUbX92Mh*V2:SI:\57f?`gq?FacB5i2A-a;XU!agTKqd5(U(_-I_n>;h.<rKk@MD4G.0a??@s/WHGuqIDVB=%!
%KmD8X"2t^J2IW+q4tCYaGGBd5l7?0*e<=u.5K74[ak99"2$9Qa[aOC@%!Cq?o0!JYC-$:mDn8e&<fL^Lin3(;K"u\G'gbA&M.9_W
%KZ3nf'-UnK)UGsE#I?V;aTusEZ\>3sMA!E=\4X]tdNg"m8</8$3L0[VIhgR590=72X5rcBUPU`3'2an'@%-"qn;q<'k?M^3H;jFD
%"R@]KRVfXDS1ktSB3kX;98<;<UrGM*\#G1]erm:(NE2_46q9a*^bc`WO@He0m`(DcemOFk@A.5@ZI$%+E_iiIg4X:'6p7saqC:r1
%R?Bm4C>pL-"."Xl0G@i%M?5\oh356,=E9g6#\G3ZMTiLqc89PnN1LlB24auXYVLR20mCsI15g+Zbg@sE`_*X(N19pSe$J??R*!V>
%]3^jV)f6F\9]W]$KU%\?6FJWNkXiJp_6[VmN+>@g>Oh@4PsFj*#9fh?R,0SG)XeOtKcXS8#u$Fl$KH4s-#Z[aNs:P6roQ`Wf`4tW
%hQjr(5RU(:4DrBDU(*'D1mrZ-2N/dd@)R,6+Nu)dqlU099,@7W:*1XtF;9Y0`!DgKZPdKnN'0bN<%+"a/e-/2_3fG/7#E#cZgp3q
%>l8!L]54iKUBs>UF!GX]9Q3KT:S^!8]#<&295rX!;@?&:_Z5b!agqp9@R[f[lrF1*D2e&e7%f%Y@q$,a(eUQs0Q>VX)ce4IBf$KZ
%kt+,b$6e>5aohf]fpNCtAh"+maL8s)W^q2>3#V<?C^BMh:X+)&#"G^ECLkEtR@](eJ2HTr-E1NCk_'[J;41HE)4:V&Td,+6qcXP`
%^f_bRgIHZ/\BnsH'KNgA&X_)p3OqU_E.h[54TQ_Il,4>r+I!XL<_.$WF&$aB&0uSgCb2qJ>1Nq2fpq\cq5tXXBG)@Wd*jpmD!<cu
%SfHVHYlW0EK:`!\\mo3$!0bCn$G2RR-Ya?.;;ahXJjN-d?F)nc0%/@1N[ufhL1@_3m2?4.>BjX19U(qa0X,B3G;5F];f%g5B]CqE
%-V9HAE9'"2AlhAcjWt.1$YHQ*h28*D\!bs)fM$/"9W#h$<+7Udr$iV9)4%>N#?D#:Q"2./!<g:Fbk-kUbk`kF)sno]9f0m(Ht^?T
%FpbMa14kl=L`t`-.!PlKju"m'!'rVBEFOm4NoSenWgOSm:(T916r?tU4Tf:(9+9Sf2<>3uG<$R;A76Hr*(TP;!4M]$J`[rY;<\*1
%N2a.c/E4_r?ciBL"35f6J2(`Z\9L=?bgn08]7)Gdr6n/a_:k,U@^\h?&/9^(CC=aq1C"=f,j%N,#d7'\_IK#F8[T-Y0s+qX*OE_,
%)cgM>0`!P4MNMsr0q3%f5E"2K#3lcr(lbA)AN$l'1m&dIfWFoO0to2F@fRjV=Wj1FQuF3/dkhr0c"S_fEZ-9EOo0N`LG6Lnl:qM5
%'9o&.dNX[mBafN2>1R=,fjGmC.2YXg7*N#?QqI=,N2Mb28R#S2N(Hj:\f0UmK#T\]5V6sWgQ;ZEV4%k2UeB]mRiPYt@?&:.RY?sU
%b/2oua?;W.?Xe@=P=I;2X"17e[SgI0!b+nI"*%#MJuOnF.lM]/<=DMR;\*:V:tAd=#j8!t)VYo-Z,X+X(04I3(?Y&\c,<sU+%@"`
%q*]jJQ85e6hLaGOaaVhPk2f9Y,'@?NgRMuq/;D$_O!(]$BBCYKS>jA16jNal7LlQVP6GACD8@c`Z?igdc5Mc&9a`JXQ&W?-P@o>&
%D_aIZ]W%T1TWp#+;/]cP\\NeVAmiF`Nj<u:\;m8M`LBmfb\Vt^!KsB;4g>Q>4<%m@AbBSBm[i<0GZ2Iq'Mc(o#P*d@_oAc96'u1r
%%]Y9q,-\)i!Z:d8'!Xa@67b.t3j0GTdBW266,PPr0dVn]5T7u\M+Gt`iY]c\Hi]C^ArC&1#>ak99V'4V#89uYd55,R]$kBtrjsH'
%8e:FT,UYtkN8_Q[e;<j6^l/PjW/E3u."E%97\V*='-(*S`E](Yg1hlO8T#BI_38W>"MA/ZP9`csSco3W=b0#t0Hq@$UmhE`,I'.h
%7Yn/&&1q$B>XkcDSgFn&X['M`#!6mNqSYWQEZrNDHNjlo=X)Kc:V=J\D&c>kmVG9`O^tn_LhE)E>o;SE9Fk,;V`W".gFs\/[@B^^
%5:81C^-s9HZHOeJHg7!>K;Y"n7);5q(P0AFeO[msH;Y1.-$DH53E<I1'Ouu0@E]_<@Wqi4Od(,F0K_+Tkq8&+QeK704hHUCm$N#V
%L)jpoA0iCV7b@_T'8n-s.;?BWgtX=8A_@AWjN+nNS#8f3OB$?DRP8h7H,ZJu&4;V<_"Qq\0?DMSNp+K$<oN=G0rAII<HDhU$O#0]
%cpUbgK_7Htj:@De6",n$d0CrDU5:3!ib2&TXr7H_,iK5HX_Tau@K'Ph!5qE/1Rk'%Xj\OY"VZ6*4?O3iL*N'4Qnr-$"RJoOG7m.B
%<b``_$oK)];C$f?abm<;#b]jC-3+7jj$n`:!iD!P)9J<1rEB9G]1+k$`jS,j.54t`*;]M^CpI4tH9o!ei`S-:9#fiKL<9qY@UW;e
%49nJE;e:Fq3p6p39ZFj^HE<,<JJSaj/ts->Ye3J*C^=iK%aub8Kl*Y`3J\4fj/NA^BW@(^6[mrPfJ&$U,#&-6R7\=['(PT8HH2C'
%!>$g_!)_/Z)hKKr&Vqd<XY>L3;U\geCf:O)6mTUa"L40lrM/mt!6eV>k$:1g8!E<\e44(A%hWXq^.U6U]rP;3AZ[AbAM@ge6"Y>C
%X;d!R2G5HsfiUI4d7gQZe;:R5,-C736u3,5=*-T?F^c,d=9FtAXGr6Gi8VQaYt&LY@lf?:PI,I4ZVX_&)q9fpU2c]9JeU#I%B(H@
%YfCR1Kt<QIL@teL8uiVi^,"=Wej(RT@\[FbMI$^LVS"e*CGA1pBumcajGnt>4;*R;b4XIgYM<gBHBENgr3';2ghq<?j[$!V:SRMg
%XZu%AC=3#nkMHPr=3Tg3=T5B5q0rDp2qpF~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 4160 6042 a Ff(Delft)30 b(Center)h(fo)m(r)g(Systems)f(and)
f(Control)p 0 TeXcolorgray -600 1412 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/XYZ null null 1]
/DOCVIEW pdfmark end
 -600 1412 a -600
1412 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -600 1412 a -600 1412 a
SDict begin H.S end
 -600 1412 a -600 1412
a
SDict begin 13.6 H.A end
 -600 1412 a -600 1412 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -600 1412 a 348 464 a

 348 464
a 348 464 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 -113.38724 0.0 moveto

 112.92896 0.0 lineto

 pgfstr

 save

 [1.0 0.0 0.0 1.0 112.92896 0.0 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 117.22249 -2.3485 ] concat

 pgfs


 348 464 a
 0 setgray
 348 464 a Fe(x)348 464 y


 pgfr

 restore

 restore

 0.0 -113.38724 moveto

 0.0 112.92896 lineto

 pgfstr

 save

 [0.0 1.0 -1.0 0.0 0.0 112.92896 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -2.87 119.34372 ] concat

 pgfs


 348 464
a
 0 setgray
 348 464 a Fe(y)348 464 y


 pgfr

 restore

 restore

 save
 0 TeXcolorgray
 0.79701 pgfw

 [ 2.98883 1.99255 ] 0.0 setdash

 7.08669 113.38724 moveto

 7.08669 113.38724 10.28679 78.5185 11.51587 69.77875 curveto

 12.74495 61.03899 14.71597 54.6064 15.94505 50.39716 curveto

 17.17413 46.18791 19.14519 41.9391 20.37427 39.44139 curveto

 21.60335 36.94368 23.57437 34.05424 24.80345 32.39534 curveto

 26.03253 30.73645 28.00356 28.66792 29.23264 27.48518 curveto

 30.46172 26.30244 32.43274 24.75742 33.66182 23.8709 curveto

 34.8909 22.98438 36.86194 21.78558 38.09102 21.09573 curveto

 39.3201 20.40588 41.29112 19.45148 42.5202 18.89886 curveto

 43.74928 18.34625 45.7203 17.56525 46.94939 17.11292 curveto

 48.17847 16.6606 50.14949 16.0156 51.37857 15.63882 curveto

 52.60765 15.26207 54.57869 14.71678 55.80777 14.39745 curveto

 57.03685 14.07813 59.00787 13.61078 60.23695 13.3373 curveto

 61.46603 13.06381 63.43706 12.66335 64.66614 12.42636 curveto

 65.89522 12.18938 67.86626 11.837 69.09534 11.6292 curveto

 70.32442 11.42139 72.29544 11.11177 73.52452 10.9285 curveto

 74.7536 10.74522 76.72464 10.47128 77.95372 10.30823 curveto

 79.1828 10.14517 81.15382 9.89928 82.3829 9.75328 curveto

 83.61198 9.60728 85.58301 9.38716 86.81209 9.25587 curveto

 88.04117 9.12457 90.01219 8.92577 91.24127 8.8069 curveto

 92.47035 8.68802 94.44139 8.5071 95.67047 8.399 curveto

 96.89955 8.29092 98.87057 8.1266 100.09966 8.02788 curveto

 101.32874 7.92917 103.29976 7.77805 104.52884 7.68748 curveto

 105.75792 7.59692 107.72894 7.45854 108.95802 7.37518 curveto

 110.1871 7.29184 113.38724 7.08669 113.38724 7.08669 curveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 117.42175 13.24242 ] concat

 pgfs


 348 464 a
 0 setgray
 348
464 a 0 TeXcolorgray Fe(xy)f Fd(=)d(1)p 0 TeXcolorgray
348 464 a


 pgfr

 restore

 restore
 0 TeXcolorgray
 restore

 save
 0 TeXcolorgray
 0.79701 pgfw

 [ 2.98883 1.99255 ] 0.0 setdash

 -113.38724 -7.08669 moveto

 -113.38724 -7.08669 -110.1871 -7.29184 -108.95802 -7.37518 curveto

 -107.72894 -7.45854 -105.75792 -7.59692 -104.52884 -7.68748 curveto

 -103.29976 -7.77805 -101.32874 -7.92917 -100.09966 -8.02788 curveto

 -98.87057 -8.1266 -96.89955 -8.29092 -95.67047 -8.399 curveto

 -94.44139 -8.5071 -92.47035 -8.68802 -91.24127 -8.8069 curveto

 -90.01219 -8.92577 -88.04117 -9.12457 -86.81209 -9.25587 curveto

 -85.58301 -9.38716 -83.61198 -9.60728 -82.3829 -9.75328 curveto

 -81.15382 -9.89928 -79.1828 -10.14517 -77.95372 -10.30823 curveto

 -76.72464 -10.47128 -74.7536 -10.74522 -73.52452 -10.9285 curveto

 -72.29544 -11.11177 -70.32442 -11.42139 -69.09534 -11.6292 curveto

 -67.86626 -11.837 -65.89522 -12.18938 -64.66614 -12.42636 curveto

 -63.43706 -12.66335 -61.46603 -13.06381 -60.23695 -13.3373 curveto

 -59.00787 -13.61078 -57.03685 -14.07813 -55.80777 -14.39745 curveto

 -54.57869 -14.71678 -52.60765 -15.26207 -51.37857 -15.63882 curveto

 -50.14949 -16.0156 -48.17847 -16.6606 -46.94939 -17.11292 curveto

 -45.7203 -17.56525 -43.74928 -18.34625 -42.5202 -18.89886 curveto

 -41.29112 -19.45148 -39.3201 -20.40588 -38.09102 -21.09573 curveto

 -36.86194 -21.78558 -34.8909 -22.98438 -33.66182 -23.8709 curveto

 -32.43274 -24.75742 -30.46172 -26.30244 -29.23264 -27.48518 curveto

 -28.00356 -28.66792 -26.03253 -30.73645 -24.80345 -32.39534 curveto

 -23.57437 -34.05424 -21.60335 -36.94368 -20.37427 -39.44139 curveto

 -19.14519 -41.9391 -17.17413 -46.18791 -15.94505 -50.39716 curveto

 -14.71597 -54.6064 -12.74495 -61.03899 -11.51587 -69.77875 curveto

 -10.28679 -78.5185 -7.08669 -113.38724 -7.08669 -113.38724 curveto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.79701 pgfw

0 TeXcolorgray
 84.81549 -79.93906 moveto

 84.81549 -79.93906 76.75537 -71.3383 73.96529 -68.31764 curveto

 71.17519 -65.29697 67.08208 -60.81094 64.70638 -58.16812 curveto

 62.33067 -55.52531 58.85497 -51.5917 56.84283 -49.26996 curveto

 54.8307 -46.9482 51.8965 -43.48485 50.20424 -41.43454 curveto

 48.51196 -39.38423 46.05493 -36.3162 44.64612 -34.49274 curveto

 43.2373 -32.66927 41.20592 -29.92815 40.05042 -28.29228 curveto

 38.89491 -26.65643 37.24507 -24.1859 36.31804 -22.7026 curveto

 35.391 -21.21933 34.08783 -18.96446 33.36899 -17.60168 curveto

 32.65015 -16.23889 31.66306 -14.1524 31.1371 -12.88054 curveto

 30.61113 -11.60866 29.92264 -9.64285 29.57822 -8.4349 curveto

 29.23381 -7.22696 28.82526 -5.3445 28.65477 -4.17441 curveto

 28.48427 -3.00433 28.34955 -1.1587 28.34938 -0.00171 curveto

 28.34921 1.15527 28.48344 2.99516 28.65346 4.16447 curveto

 28.82347 5.33377 29.23079 7.21788 29.57477 8.42583 curveto

 29.91876 9.63377 30.60712 11.59901 31.13278 12.87057 curveto

 31.65843 14.14215 32.64482 16.22795 33.36336 17.59044 curveto

 34.0819 18.95294 35.38487 21.20757 36.31154 22.69049 curveto

 37.2382 24.17343 38.8873 26.6432 40.04219 28.27846 curveto

 41.19708 29.9137 43.22746 32.65337 44.63531 34.47629 curveto

 46.04317 36.2992 48.4975 39.36679 50.1891 41.4168 curveto

 51.88069 43.4668 54.81577 46.93028 56.82726 49.25136 curveto

 58.83873 51.57245 62.31204 55.50365 64.68648 58.14563 curveto

 67.06091 60.78761 71.15143 65.27327 73.94063 68.29298 curveto

 76.72981 71.31268 84.78911 79.90965 84.78911 79.90965 curveto

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 88.82362 66.77995 ] concat

 pgfs


 348 464 a
 0 setgray
 348 464 a 0 TeXcolorgray Fe(x)400
431 y Fc(2)460 464 y Fb(\000)20 b Fe(y)599 431 y Fc(2)663
464 y Fd(=)25 b(1)p 0 TeXcolorgray 348 464 a


 pgfr

 restore

 restore
 0 TeXcolorgray
 restore

 save

 0.79701 pgfw

0 TeXcolorgray
 -84.81549 -79.93906 moveto

 -84.81549 -79.93906 -76.75537 -71.3383 -73.96529 -68.31764 curveto

 -71.17519 -65.29697 -67.08208 -60.81094 -64.70638 -58.16812 curveto

 -62.33067 -55.52531 -58.85497 -51.5917 -56.84283 -49.26996 curveto

 -54.8307 -46.9482 -51.8965 -43.48485 -50.20424 -41.43454 curveto

 -48.51196 -39.38423 -46.05493 -36.3162 -44.64612 -34.49274 curveto

 -43.2373 -32.66927 -41.20592 -29.92815 -40.05042 -28.29228 curveto

 -38.89491 -26.65643 -37.24507 -24.1859 -36.31804 -22.7026 curveto

 -35.391 -21.21933 -34.08783 -18.96446 -33.36899 -17.60168 curveto

 -32.65015 -16.23889 -31.66306 -14.1524 -31.1371 -12.88054 curveto

 -30.61113 -11.60866 -29.92264 -9.64285 -29.57822 -8.4349 curveto

 -29.23381 -7.22696 -28.82526 -5.3445 -28.65477 -4.17441 curveto

 -28.48427 -3.00433 -28.34955 -1.1587 -28.34938 -0.00171 curveto

 -28.34921 1.15527 -28.48344 2.99516 -28.65346 4.16447 curveto

 -28.82347 5.33377 -29.23079 7.21788 -29.57477 8.42583 curveto

 -29.91876 9.63377 -30.60712 11.59901 -31.13278 12.87057 curveto

 -31.65843 14.14215 -32.64482 16.22795 -33.36336 17.59044 curveto

 -34.0819 18.95294 -35.38487 21.20757 -36.31154 22.69049 curveto

 -37.2382 24.17343 -38.8873 26.6432 -40.04219 28.27846 curveto

 -41.19708 29.9137 -43.22746 32.65337 -44.63531 34.47629 curveto

 -46.04317 36.2992 -48.4975 39.36679 -50.1891 41.4168 curveto

 -51.88069 43.4668 -54.81577 46.93028 -56.82726 49.25136 curveto

 -58.83873 51.57245 -62.31204 55.50365 -64.68648 58.14563 curveto

 -67.06091 60.78761 -71.15143 65.27327 -73.94063 68.29298 curveto

 -76.72981 71.31268 -84.78911 79.90965 -84.78911 79.90965 curveto

 pgfstr
 0 TeXcolorgray
 restore

 save
 0.65 TeXcolorgray
 -85.0404 85.0404 moveto

 84.71635 -84.71635 lineto

 pgfstr

 save

 [0.7071 -0.7071 0.7071 0.7071 84.71635 -84.71635 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 88.87567 -97.26245 ] concat

 pgfs


 348 464
a
 0.65 setgray
 348 464 a 0.65 TeXcolorgray Fe(x)400 431 y Fa(0)p 0.65
TeXcolorgray 348 464 a


 pgfr

 restore

 restore
 0 TeXcolorgray
 restore

 save
 0.65 TeXcolorgray
 -85.0404 -85.0404 moveto

 84.71635 84.71635 lineto

 pgfstr

 save

 [0.7071 0.7071 -0.7071 0.7071 84.71635 84.71635 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 88.87567 90.99689 ] concat

 pgfs



348 464 a
 0.65 setgray
 348 464 a 0.65 TeXcolorgray Fe(y)396 431 y
Fa(0)p 0.65 TeXcolorgray 348 464 a


 pgfr

 restore

 restore
 0 TeXcolorgray
 restore

 restore

 newpath

 restore

 pgfc


 eop
end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: media/cache/mscLiterature-figure0.dvi
%%CreationDate: Tue Jul  6 13:30:16 2021
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 204 272
%%DocumentFonts: LMSans10-Regular LMRoman10-Bold LMRoman10-Regular
%%+ LMMathItalic10-Regular LMRoman6-Regular
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -o media/cache/mscLiterature-figure0.ps
%+ media/cache/mscLiterature-figure0.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2021.07.06:1530
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
/color.sc { } def
/color.fc { } def
TeXDict begin
/TeXcolorseparation { setcolor } def
end
true setglobal
/pdf.globaldict 4 dict def
false setglobal
/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setblendmode where {pop} {/.setblendmode{pop}def} ifelse /.setfillconstantalpha
where {pop /.setopacityalpha {.setfillconstantalpha} def} {/.setopacityalpha
where {pop} {/.setopacityalpha {pop} def} ifelse} ifelse /.pgfsetfillopacityalpha{/pgffoa
exch def /.setfillconstantalpha where {pop pgffoa .setfillconstantalpha}
{/pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath
fill grestore newpath}bind def /pgfeofill{gsave pgffoa .setopacityalpha
eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}
ifelse} bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /.setstrokeconstantalpha
where {pop pgfsoa .setstrokeconstantalpha} {/pgfstr{gsave pgfsoa .setopacityalpha
stroke grestore newpath}bind def} ifelse}bind def /pgffoa 1 def /pgfsoa
1 def /.pushpdf14devicefilter where {pop [userdict /bop-hook known
{userdict /bop-hook get aload pop} if {0 .pushpdf14devicefilter} aload
pop] cvx userdict exch /bop-hook exch put [userdict /eop-hook known
{userdict /eop-hook get aload pop} if {.poppdf14devicefilter} aload
pop] cvx userdict exch /eop-hook exch put} if systemdict /pdfmark known
not {userdict /pdfmark systemdict /cleartomark get put} if end

  /pgfwritesamplecmyk { 4 index 0 5 index pgfcheckcolorrange 255 mul
round cvi put 4 index 1 4 index pgfcheckcolorrange 255 mul round cvi
put 4 index 2 3 index pgfcheckcolorrange 255 mul round cvi put 4 index
3 2 index pgfcheckcolorrange 255 mul round cvi put pop pop pop pop
} bind def /pgfwritesamplergb { 3 index 0 4 index pgfcheckcolorrange
255 mul round cvi put 3 index 1 3 index pgfcheckcolorrange 255 mul
round cvi put 3 index 2 2 index pgfcheckcolorrange 255 mul round cvi
put pop pop pop } bind def /pgfwritesamplegray { pgfcheckcolorrange
16777215 mul round cvi 1 index 0 2 index -16 bitshift put 1 index 1
2 index 65535 and -8 bitshift put 1 index 2 2 index 255 and put pop
} bind def /pgfcheckcolorrange { dup 0.0 lt {pop 0.0} if dup 1.0 gt
{pop 1.0} if } bind def /pgfchanneldepthcmyk 8 def /pgfchanneldepthrgb
8 def /pgfchanneldepthgray 24 def /pgfcolorsamplecmyk 4 string def
/pgfcolorsamplergb 3 string def /pgfcolorsamplegray 3 string def /pgfrangecmyk
[0 1 0 1 0 1 0 1] def /pgfrangergb [0 1 0 1 0 1] def /pgfrangegray
[0 1] def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651115F4B236363899119C3EE8DFE85F00B3BA
FBA940412ED8EA9263967542F91CA3C82ABF723570D71786AB04B97EDD31E91F
9D0922CBE43C359DF73BF389B468FAEA7A34B378881D05DDAB231758BD413E30
F940C99C0B0869BBBBD14E58A5711D0C1D877583370318746A27283D70A4C54C
F863EB2B214AA99E1741F6A188F824958FAE0CABAD3A3E384B6993E86567C1B6
F9DA250BE4C9917F3B35D43FA75D54070C7DD73514E1E186F08F7ECBEF07B3B4
47F7AD43BE46363E2130C0EA0DF460C5472E7D58C1874681ADE7F897DF81CCB6
AE7B126C45B8FB860925BE565CF385FF18BCF6690415AE872823D8DDFFCCCF5A
CAA82CBC29FEDEE39359C351BA8960636ADF062E97D716EBF582A3D80351CADC
60B733E50FA695EA1AB37B3EB75C4DB38FAAEEAD1FDAA01C73B0C7D5DCF94DF9
DD076DDD17E49F3FD8A4278774EF42F36DB750674C755ABB7172E970A6A9D7AD
2F437A6A02C12A14E7ADE3BA67931A5909052548D3A596A6C6C6AB77CA6ED3B4
77A7342D64AC059315DDAD1A2FA1F4E8CC6969A0F3041269F715A374FA5F0478
D6FBD7F0835871AF9E2CB5CBA1AC1BA45DCF4EEA6EBDCD1206243547DBBC8A2C
24D781EAEFEFB6AA49B036F3A5D6B2E57ACC7C6B270128639A86DC6412958577
C144591984D9EB78565BA5117DB4AAF5E956EC5D20F1C64FE1D7838D21339FAA
84C30BB2902C2C710F10B80FB6F4E4F6E15BFBA2D9E6EA42F2E2E88E8C66D0C7
6B2A404F1C741ECFDE3192C650FCD7D1F86DB03C401E6EEBD0D40E0422621DEA
CC953EB5D4EE5C195C81DEFFBE1E3A1E43E92E1F61DDCAF0E017BF689AFC47D6
23761A3ED83762817731F30F60B22B808E0102F0F13104AD66890A6DBA3AB39F
C05FA6C191F7A83C324AF0629A2698B0328E0BE0453B6A0E16138F3FFF582E2F
392CBA9CF35F1E67BC40979F9B86E0222012DCA626F8A2147DF3E2E3C1E93F0E
88DC65E5264BC96396BA0413FC301BEC63DE800C385269992EBD01C7489EF0A9
56E5790AA75E44FD7F6BA76157167A214F11C228BB1F132176C290B203FEC93C
2A55B85A45990EDC7897E3FD03407C4A4B362143F510C94C26647858F142DD38
0FC1B343AEDD72B66B8DFF757D05048CCF86D9C2503E2D5D0BAB9B7921775DE4
9BC8132788B2E841F0256A90F0A583D9394EB39CA2C53DE6D7F9BABA3201D6F2
423D50243B70B07A7F9E0672714E2AE73E4139D9E1510C3291053A42460468F6
A1700953700663A852293E0F843E980BD3D248872563E9160E4EB16BF9349B83
6657DDB50EC74C20E497DF8C5D90DF2EB6F0AC1522A2BBBEC8AC451239E34711
ADD347782194D0FA7B888FA3E04E291EE8E9E19ED316C9751654A3CD885FD9ED
1B6D55333607CD127CA1A62547D23D19EED0D64035410A8D02E2EB73D4E7D573
A06A88806F4661B0AFE8F60C7ADED39431033CCEB5F4CC02D42B0C297B9F077A
0E966156DEA6E2F7AAE463C634C4DE83FEFF833140153608AFDA850C48AB8977
B7C0726022D0F92B53918A719C5B27C4DBBE2DD951ABFE4DE5DF820F1875949C
41999FA96E8674AEF974C204054B3D7DDAC8678EF6CB0C009BA7E3C884840A95
B9429D488242784C7FF9FF20D50D96B41727A72FF76E7DE651DE14AF581326C4
450B4AFA8AFB0FAE8E8F1399304DEFA7BF24F51BA75F725249C5FD6FD166C835
E1CE79E47B2E4476BB68783B63BADDD3605467881F7CA534E44902D5B92E0D08
B03A114275D2FD721D8FF2CE1C8897D6E34687DBF7EC1ACECFF6C2490C6C4635
24FCFB9E47381370D560276298242DDCFB5B93FEED8AFAE28D55B3D96924A2CE
D91A65032FCA67033ECAAB246290EAA7941732B8C31799B4E67102E1628592D5
D67BC8132EDF4B0D7C712C1367086F0E83C9A242C22593968B06DA541162672A
62617B5C7D69D73B3D107D4E9FF26D68298CD26E5B9EF345BFA3EC2911E2B96A
0B40AA55D380E0A7B36DC2F7D2A4D6CC0937BF33358AAB8C5AA74E181568A10B
536F68B7A029278712C34ACFA22AFF0F2D9CF2B5EECBF408B54C3E0E0F292CC2
10EA48CDE557438DEB07F64FBD7B73D99CAAD492FC6BFD4A4468BFD7E0747745
A81FDC2505E773E0925B683E9BD25120B0F2CD2815C6A4C22518A5D3953256B4
996D057BE93BEA6B23FA0D592C03BA3BA078F55FC5DB755D4B754C6DD160206D
BA83310D820B6904B356AFC378DB7E7DEAAC1AE5F0C5AA20C9489CF6BF32D2A3
DE23621CCEF7854328220EAF1027FD08EC9C500F772E98343439569D3C8C08E3
AA6B8EE9211460C2E732602474BB912A3900BBAA22F86ED74A7ED142E5F944DD
A0726454C7D49477C1BD064D8CE9D646DCB9085918FD34E749426FA209CB1FB1
24D9546B7812BA06DED3C9BE917105F07880B030AD1E9BFF5F40ECD773C56FE0
04F901644D3A8A062AA13A9AB0B05CA3B0D563012015D3A8B5EA02CD10C45038
FC6C4E8FA08109D67635C7751E074BB831F91F7CC5FE7EFCFFF578C1F3A0EC47
8A5E8B6E99DE9C6D140A175FB46282023C5995608B75D86D9F7C1E986C2DDA71
CBF33FACEE6751A6A23D203D3190EE92A37D3CDC54F6D4A3E47A532B6FDB0537
4C2AADAA24486F9A831BA1179B2EA36024C25D82EBEC804D15C0FEF51E81E636
03AB1E9281CF515EA969F0A1407C8FEDAB69BA3EEE3097D5B123CCD3B5380033
BF6A3FE89A498F9CAD2B7BE121B3509CF29716AF8B554E270A351733DD7D9090
95F94F91604254797AB7402A7E4EDAF950964E903405EEEAF0E5769B82A625B0
F2987083E1BEC613BCCB763A2325958B99CE058CA4994F6AD3FD93A2EBD338C2
8CDCBBAB3435BD3065066563083DE066F1E9B3F312F1EEA3F63A4230C6A08BB4
FB0CDEA7D44636102D47AB90B9248E83F96A9DC950870C1B21E2186D8C4CA15E
8E1CE3B9A26A136D6062165B9EE0BA71B8BABD03CBBCD547DFA3C29244DB9901
723DF106449324553F137AF0D768DCB8D237AB3A9CE8C36492E99AED33256A1A
6F3303F850CF938729214C68FFEFCAC997EC286F30AD0245F664D72A81B8BFAD
881223220B4F4042723C95CCA984DA426B12AB9606859F8B88CEBF2609ACB01D
758D8C883F5CAED8CEB2477AB747178185C8D31BE95705278F9C8770CEB47E5E
C54ACF2209E54920261EFF75F449D3521719D7060B509D7BB71922BC9474D03B
C93FED60C902111188B8AF1F080A993C3C74871E4B7BDB2602D07587AED96FB8
19B52B85053185AE6CD16845BA7CC58A0CE618C1BEE47B86CFDA4AEF92A3CFC7
C91EA6FD21F1AADFF54E10E9311848F1B064872B758999AF2F243705101C78A8
D30204DB9F3E3FBE084A2DECAA1964AD31D9D2F4743A3D83A49B9CAB51C523CE
D186C921878D36BC6DD3784FB10EA0A815B73988E6499808D0DBFD69C75FBA4A
225B020BD574848C85BCB7F3D74FE0BAABA30A31E9D23BF82BBF294FE3CE1EF3
7AA659B04631F2482F244C74A69AC73FEC5DAC77C9B5A9DBCD821321A1DDDC6B
39335BD3394BAE8BD94DC0BFDA6BA58119FCA2570964C9054254E9B7D381FAC3
EBBCD2DC47A501DC08730522635B091E552EAE18188849E708A4E69F2C5A3E08
AAD4A9BBC25E5EAC962A19C387672A4D101E1BFB07CFF9F577580B845A196F8E
20C51E2684199EE5EFD7A2A94A2BDF2E5572E4D0A526643E1D0F81D86CB8595D
09B1A874789AEE569E739F65118904A06FD3AD3A9205A17BD54BE09086263A35
00C656827B3B49A5F4F7357F9C88B45034BDC89CAA614F701BB7EA01E8978F78
8BCA69D42290F62CFBFDFB0F4C1EDBB5DF0BACD8C9385A18202E78D9E7ABA943
2036CEB7BE8A5C27AE952F4946D01DD1D65C1D50D030BDCBAAEC827EC5884399
B3CF76512E8B41609794078729333DA13567389FF89C666BAF1696FEE4BDC1B3
26BB8646CFB36324822CF1C8E8441DC74EDED658C6AB7E9214A73B5CF621EFA3
1491F5716595A08356F0703972C3D0AD03379E20373C4AF6A699F4C319CE41F5
FE9110113BFA62F8BBA320A942EDBB45A07A97A220217A2575AD6DDFDD49FDAE
75FCDEFF3F08E2A73F0204CBD6CA0D854E110203360F1941FAC5C151BCB073FF
6966BD9322B78C046D3E8F0B8C9F7961392FB22C4F8680188E87C0A6C56341C8
A7EC2293B61AE30E3EF5B467D6293E794AD88960F64CCE810172ABB3933F7133
1C00CEB19548D2B81BA73ADB4AEAA456ACCF3FA9FD5C0D7DE2197E5C951D2C2B
078A014AF3BB404CDF3CAADE7A8ED6135F0B1CFE1DF8EF3AAB303ACA4121E9C9
2051578244155F5D446BCF211F81404A39FDB273B64ED685BB2F05E6532BBC85
45CF31BEFA92A9DF8D76C4F49C5CF8BF118B9ADE35B5B89D62F34059CD19DEE5
041502AD1D4E21E95678CAFDF03B3E12DA3C5EE8952BD948DE08F52EB8B45BC3
86103235B1C08B9CB270E509091C9F1E16BCE7D84470D0CAB1F6F040352A877F
875BE5113B3CC5C384E1FFF899685840C74D45677096CCFFD9613AC0C46F3D05
7FB5F1C71D7A05A875DDACA3FFADB7BE87446FAD6548D0F2F3D20CC630509626
79C494D424A87937E19302078128ECC236AD7CB84CD7CC7795A8F1E7197309DA
D0349A965A0965EC82C0BA3D2AF8649CE5AADCD3CC336BC012FD2E2F0674AF02
3B6737631A91A605447FC44BDB516C6C2DA3D5F90C7807FC42516B6F7F7138E0
2333C892AC77F69F40BE417CD2272ACF936CBC4892BC05F7CBBF38C5C5BBED38
4073BEF515A459776DE5C16AAA95E2A57AC09E4EDC31F7AE1F58AE1F5CC02281
429B33760498C875EAE006A0855DC98E4C886E696E6B1C423F65E6034F7AB90A
2709C78DD4A7B6D83F99EAD74396128B0C14658CE0A8B51FC960603870583723
D3E94A3269EE3FF46B759E71A675B3F2E95B8DF74008A1AD51BB1FDFBA5A3E65
2C85A18BEAEE93767FA5DBE95D894BF5FE3B413805A02882F24083B4B071D47E
59ECFE2F8ED23A1034B09F44B75155BCA7E545DC35A60B9C93D1A9DBDF00700F
D18932808406E8E126B9954C872053CAAA120EA654C068E4B565CA211E004B3A
A0690A4194719604D655F83392CE847CA2E5217C0F69D4D0C42D85063F79EE76
B68F6328A36C8168BBBE292FF30EBAF2055448995FEC91991A340A578C840677
6F93F69C855F726C19246C2049BF5338EDE40DD6C63C6B1A85CD6A38288D1C1A
551889A3D80A0C94322C950EAC5A902B304B5D06FE54F10DD11F2CBFB71350E0
057A8D4EE1C5DB70F4B17B4DE35C678F54658A369E5FE68D9DEA3C0DBCF7C332
C1413109E975BFFF1545B67BF5029C4A8FD472401BFFEBC8BD4A7DF0884F7AE9
A32FFC6E88C3FB8B507F85E91127FCEC4599BB37CCA3A1560D9987FC1B454037
C7BB317932882AE82292FF2191F555DFC8C27356F012F469039685D8BE9CEABA
2C1D3C83D55FB60A1F5284E22685EDCB5AF06EE0CD9717A41A210B9DDF9783C3
9758F2DEB5872E01B20C5E3CC7E533CCA1BE7B257D8041C6E9DEBE123998F904
87692793869AF07A42EC29CEE0176DE0853DD365E9B853E9364D43681630367B
E8E18BCB399923CAAD1FA80328613FA20F0650AE7BFD3C6B73BACF76E1E5D218
7136E1E889EDCA9C3D9D2D6FB809016DBECC699F9509C937323EB7746DCC6FB6
A7D01150E5B38F3410D8AD65DC3B10A72C26F2450B0BDBA1789FBF48822B33BF
C5FAD73A5F027C74D867074624917E378761B501217E0852031A7D7F3327ED13
EA8230F0AF49C0A222FFE340112C6C063B2F9C6FC34E07EBBA6599DB6A9E6D15
7E7FB615FA653AF27D80525AEA9D49E3F8A19E93F3B6ED6ABF5FBA7CFC21511F
E419E47AE9E2B9BCE3ABE6EC68FFE98B8597A6480B63303CD1D23D5C8E17CF1B
43A482C44FE52E57AF48D67E3EE8A685B991F9CFD68586B37C24BFB42BB7DDD6
2F6F17F660844638B9EC5214EB8B4F3B900C34193E9439EFCB1D72F9F8D4F020
C558383A14BDC6B6BAACB36685783909C19EDD9422F77B27BE343F685149BC5A
D0083A6C55F8A3E9827F6E4730B1F9745DA9590BA94CE6D345638BE2EC78B6AE
37A5F519398B89ED671BAA88D51C54EB563D14577705EFEFF28C43761EDC0E66
A5E026E1AEC863138C8A750A892DDAEF50284D2CEADFC997B78F99C0A0DC335F
C4B589DB92B21ABD5F4A1828236BBC63F2CB5798FE2FD44122E511E5FB2FDC8C
BDF6A69012CF984F0DC8DCFF798F2ABFC4F3539392985C4CB324B00078EF861E
70814B1258131811877B96009E065BF365311660DF6F9F67952116166482CAE5
E08BB53FC5E72D3EBF18D226CF50373AB7D47B509AE6F5C4B100BE8334ABE160
E2C30AA49A6D0DA6028D436930AB6ED25984C2322CC1E8203950EDFD6CEA20D0
649071442B2916EBCE5F4EE77AB6A2FD7FCE95CF0ABE556B181EEFAA61A240D7
20873DF90AF8C65F21F3E925BAEAF3142ADA7893AC78D076684160090EF1DC1C
B0740B3FA1B24F6630F31E90628E59132341CAEF0F022DD19B9B368B0C4FD93A
AC08FA2EF391D6FF2E3E78D108E4C7C8175C8237BCF5B4CDA6975C46D0F84D58
0E64A869F708EE80E4BA2C0BDB767E9ABD7D96D8A4A106E081B8C8CCD2790DD4
CADF23586358D177131619AD3A45F6089A425F30DEEF5E1A8ABDD2546B77AABA
48CD601358BFC654F3C7516FBE690A67846BAA44F53C24F832DA90B09507D701
05B72416469B69CD04108315E38FFF635A3F57C728E8D8020D71C1703AE028FD
6CA218A1CB03FCB945FC24376A45F2DE0C21347A37F39EBCAEDB8A304BDAF7DD
61B19C7B287EAE62CD6D11571013AB6B2BFB92089431CEE0931D3D2FB8641EE5
D9EBFBC4FF52507C34739FC6E798467FB71DAC5EF81C98CDB8524EA0501EAEC5
D21617E9E56D6801FDCB624FD2DC15D52DAE64F1831E2FCC5EC3D5A4F5C2CEA8
6F992E1A9C176C47F7AC530B409CA2BBF912DBB455D0657C9DE3DF11E5CC965A
61D7320109A4205CFD1917BB1BC9AD7E5C5C453BC9ADDE8DCF599455F7F3DD49
7660EC7DA0053EB15AFAEA40E319260D8DCB04197B84DD29BC32F08BAA4051D8
25D512C6F5B230868A44331AC21B94E9F725E0B4CB920DE053CA8B70AB72E6BE
676B128D37656A7DD7BAD6C8CF1D70B9CA4381DA2CCE50261937EE92CFF201DC
B485D18FBD2E0FE571BD1EB145FE7CDB55FD532179FE6218E090422F74FD5483
41A957DDD557CE34A8942BDE41DF98CA31E9E1558179B371871E9EA792DF23B3
DFF3A5DF928ACE185CE5AA1C802FCC33FE8717D949CBC31AA72B65C3BBEF8EDD
9B4EEC32CD7D3C7C2E3F7B063B7A789EB1E6F3A07B777B22BE5EA7B6D8F1677F
4D7FFAC316456FA5E802766ADFE485B5D572F1CAE51C9AA531EF11E4819CC5BE
17B6351E5B5F80D8D3CF5187DDEFB91C0F6EE88AC486232CA6612E23D24F3530
2802FD23649DCA59E2ECEFB861ADFE90AEF8AA8DAF25D1A8AB237774148DADF0
8503BF166A9F41AAA88EE6187C9759340E6D6E4BB80425136F59F84D8B2D3548
C5EA9144C60FEB070F64ECB9A680818CC95EEEC0165C712FA6390842532237F5
41682A4AD84E1E0A970E65DA90A6E9FF70F7413A88828AC205C816FB7FED8030
64219D4262C39173C8EAEC809B80D04EC0A7F06E07EBDBC6F9BC74ADB936135D
9BD2741BD5A40FB00BA9C014DA2144FBE7E16869BEF559CA683A3E78C4F44F1B
60E65A13C4E5FE32A6BAF9BCE3D81E2CC477721A7B7FB7820D5EFC490E99CFEB
ED1987D64A444A48361E1417EB9BE565358E5A6F8E352E7766078FC2D5E7D65F
806E16AEF21B9D499E2F3AE41C0CC8A317E994A971778FD3D503E2D583BF5B2F
638B46541EBD289AABD77322EA46F92EBEC5FD7A635145838749BD66A3B6DFD7
6BDE579A02AF74678F6F31F41E930D074D76A35F19891E3842733F8AC91FDEBD
FAAF672B950E197F5859B790B2955ADFBB6DA92D7C19D19EC0DD7015B4C4BEC1
4BE403299463C32D52D9EEC7DDFF68BD918A9DB9077118A042EB52EB7800276E
7502D9F95DDAF45E4333E3C9A1BBCA924112AB70B4B0B8337145E53B53BA096E
E9A53EFC3D43014A8761F3B973F45A3A3E2B001A3144CAA1C4F19C3E5DEB8381
1355CB98A3C1F672AC4C6B37FEF23A47B5A4038752E723288E6C564AD7194A97
EABB75E62FBF30074B701B39665F4BF4157EFDFB8CC7A4CFE322EBEEE15E3395
B062B933EB55F9AA1BE986BA77EC41DBACE2826B07DD73D336E5B30DA46B2CA7
81E14282982C1AD13479B6178D281CAA541FD2C2110A50ABDAA8951194774A8B
20702D160C3450D2ED6299EF1739AA1DF43C36E9E4B5522DD5415B871987F2F8
22616642225A5AD8C4FBEB07FE262D75AA093A73EA95899D8217BAB427D2B325
8ECB7817720ADD9E18FD29B85C2F20D5864807AE86831051F55FD1C3B0A09767
B194F23E98E66BA3E83FC00043F27F1E73B67016A5054B262B271301D7391127
468DD2C98E410268717EA1D47F934A187085871BCDD2BC634BC1008DEEB93FC8
8100692B97E0AE4F8A7B6449A558A88D426B6C046E9A088FA1A273A20A42453C
2146E264C3B78DB668FBCECE86D88E89A3FBCDF61347F594AE5FEF6C3773F335
A7CC092ADA9DB345FB3276FD3F0B755A375F5C9D4F03D038DAFC2CD4292574BA
FA9CA1468929A0CF94B1182CD11BD4BEB684D577131619AD3A45F6089A425F30
DEEF5E1A8ABDD25D9149A066060746C0A627E366A2FD240E5FE5C96CC80C0D97
79E5FC0575729CE67A777CC63C4C9E2FD541287346CC562C47F2DDC9632F3E12
96252F084D6BB74CAB9CEC2665CFCF412B99167152D35BC0E671E657EDD8751F
E1EA6FC1C0132B5FC4AEF8D13649C25047D5A37CC30EFF3E6FD48140DDE065ED
143C9F05CC7878B721DD3A8676EFCA572232EB422CFDABCC87FE919B5562B9D5
89537EB9094808F6F1115CA55B7BE5F2018ACC72A4B70876F2B3E4EF615E561F
6451044762B2356CB859EA24999C4FADF25E9246C0118081A739201A18E0B2B7
45E35C53017C51EFE1B3C161E0965B220EF5104EFFE258C054C01F08BA4751D3
0E41266E6EB98B56C4E16D6B61184A38D171B7F94B263E2C7A3D9D0248A076E7
C94D63E4E688CE0A3636F3B7AC37F415FD2F8EA734FA949289DAC32A8714ADC8
0E0D2727283C29744C9267DAD51797ECD80033CE5CDD427175A7827DF7BE1AF2
9C59DCE0D9FAD5CC4911DCD97FD5E3F1A99662DEEA6EF927E221050F374553FA
1920714E0C8692F37CF1D7E3DEFD43B2B428FBE8F1469301F9501BD996B8DD12
FA1DE3618681CAA89FDD4278266A6A1133D8151A000D95E13EEBAD4F21562FA5
065D457E55E2913AEE591678EADA8F6E6D3FAF39BE9BFA63251C667912F60535
6788B31059712DFECD2A617D1F73E6B9ED582B811FEC555145C96752D5436998
31738184028006F3F3248B5454ED6DC729CC5070524D1A2AEE72DA5BD1C45D2C
5729767507D93B8C0D596E10998AB0A65396C7C62E415DECE0740B1C300F284B
0149B0BA3C34FF23F23A74A5B94006A962328555D68A530698BCCC5083CF3D5E
1221BA2D0ABEFD2BCEBB3ED6E58636E9617839C5D78446E98286E8AB5BBCC5A8
C431D8D7B989576DA89722A7ADF729F45DEE8F3E99966BA0D5ABC60458FF67E1
BDD3F5A6455087145759F387B2E8551B43674A99771B7A614E53D6E49EAF8E8C
75650D5793750D2E0F422CCAEB6E1AA789B6A3AD509757677D93ADE147A8D3CC
18F8D5244699A2C7A111F74F8EC24F96CB696A82D77EE4E0FF266F35E74C0043
F6C8C98511EC1E2A0EB88FAC5CFCE312865B20C7D9B0ACA5FC06EEB85412A313
45A5C6BF3B08B16454651ACB0649BD132223FD13FA293A89138F9F262633B88C
BA65ABDBDDD8DB22470CC43E39661632CE15CAD67EA78AB7E80316B269223DAD
3760E0AEC2B41D8D1A84EC04FD8731BA938A4163D000A0A042129340E3A486C0
39AA0810C27EF11AAB6C22FC9A1A0ED334F2B7397413809F1EED463EE08956A3
6219A07F065C3CF00E04542DE83914234E64423B9D418C4402FB01BCB78475E4
BA09D03745D763AD531A9573CC39EA00C14C98B028B708C01494CFB36F5239D2
36E560C663AEC7FCB37968B8AE1BCADE6BD8A3BA1009B34137B90F0CA05E9A00
6F8EDBEB4D0BAF47300B80C3F944CF3C1A6169AD8150AECF9FCBE75528CD71B5
7C838A1EE984033666592D548B4F0E0AB5EB81214D5EC5ACCDF2C02B23D39FB7
E16817CD828E6DB40B86A47A27C033E27BAACB4104B2B36057E00EEBBCF206EF
6A7B729380BEF8AAE746406378E81CF88EF1B4ABF193F6F0F901537ABE3F15F5
F8B40FD43949E07AA47353BD44058B858456FD04C657E04A8A162BD9BB261372
53BA8B581941E759A7CA7E1A565A049DB0DC27EFB27E091728626DDDAB2F3254
08D47C7AD31270BA29B2C656B41FAF259DA36A6265656C8F6910220FC1CEA674
D56637B407679812A0890AB08B8051424F267E9713229F7B3ABA30559D9E4B6B
06AAF45914E749165D28DA7E2AFEAD936AE066ABFFCEEAA68CB8F56F70DB778E
6032E3243476B874464269ACA5BF82572C4BC0892953EAD550817FB700822EB1
57C4BE8DE18CDEBF8F10D832F2BD3C5BDEB65D65D942ED54E36A6DD9116775A7
4BD82F64ADEEA9F33FACD163B1BB851609997AA1E5D5E4B896D55B67837FE1B0
D9EDEC9711F4E9A7F84D510A8181C171816540E61E5A2E2947957AA9A3ACBADD
F16634BA0704A37BE9179EDA653BCA0422BFE9B18A75BE5F3E71E7393392A0FE
4928556628295F5FC9F1AD14A7D5A948AB04830EF077A8D788B224C18433964E
9B4CD29EB760C8F0114D19D4BA0161537A4B2E556EE5721C71048EA77A05F8B3
83634B503D98FF2A3836386BD2FF491FF07CBB06A3CA7C3F21222AD7E0721D9B
29B8E16EB3037ECFF18C13247D13EB838401FE050B0896E41B4D10A732F468CF
58165296CD5332C2667B316184CC961DE5AC2088ED5D37F3F178A3591E2B70F6
47AD9E2EB3331033E4F074D29DF85080F069561019E04A1977C9D9C82A1E46EF
79FDC5CF1DF72D2275F3857BFBB4FE77A4134D9DAFFA3EBF6C9D6B4E9B7DF27D
C66C4E39CD9BF0C4844A59841C7C7682105E23A374BCA91885E743EF739B5357
DDF12BD03B73301F26B4FBF514C6B17D80C0203D6FD47324B47C81CE0D182168
ACDF7CEF71ACE200F859D248C6D982B908FDFF6E6135A30D1F0CCA7F08EA29B0
72BF7CBBA2338FF37B66DBD7046671C2E5DF9B683A5BECD06D47F6B05A5E7A47
526378D488DE30960327F944E44FB47949643896ADFF67741FF8F24D7ADE3BBD
D2E115188633278729806AB262316B6CA23F0447CECF40BBE7141CCE4BD29366
A97A5D740CCA11DF380F9737433AEFF3BBAE3404AF40A536242228AFA61AF0CD
19445C26E13574F1CF601F19B044731A5EAF971AE2D8AF7C7B89A75015AF81B4
5F690AFD82865D0FE2D708B726A8A29BF8F1E840D5695D70DC4C97884A824855
D271FBA9CDBDEBD3DC879377A13C5DCB4A7FC08F884225141529ECBAB31B179B
691DFCBD81F6424BFCCC27C5DADC53F0B31236E42B64F1DE8F7B8246C840F68A
08DFEB68B4A7E7F6BB01F0C56FCC494F773EA3CEDD717B7AB5ABCB45178790F5
4058F1C057CC45791A347A273B4422C5931BE9F9B9BB8E4B55579F650836B2FA
E102A8BEBC5D670DDCADA08CAAC84AB583421E5C08469D8D97C2901498DEF830
765D9FDBB769014EB777D03A2D20FD7ED73DB9298842A1EC77FD3EEFDC15E662
E4E766AE5F6AD0EDD8BDF57334623409DBC3224E615E1A621D5784661CDD3DAB
F8CB3945F586BFB542B229FECFCD917788FCB6F16ABF4EA5AADA2FD810951E80
B6CCBCCFE1F301B370A545102FECCCD9844213E41BC82D098077B21B33C6C993
898A1E2AE7219BFE341207F12B03968966A34F5891EA3736A9EB8342C2773CE3
8E1EC3132A28B15C075DA951F8E84C479934F5EA9823AD143D84CC102D2A6E3D
D7AC3CAC0641AA674EC6C36A4EA424C5C43435870DAF71D9B788DEA7C73EECCE
C90B036F773A35572FE436EFCFCB5354053B02390230B01950FC6AFAE6B3F4AB
7E65048990D535544A54A56E887E7148911BF9C48FBDA96A501D98AF261A9E9B
87F2B03692C75CF5492D88F2CBBB332B70CE1A728F397A677D32DEED9B4896E3
72CFEBBCFC66C7744B07BE4DABA9BC0A35CC617B9E8BB69476EF2221C34C7AE2
6FA0401C5456071B3EB1BB3F89B77292DB052598A7E242E67E22527BD17C13D1
4367D478A2DDA733AC2219813A22F039CACA201AB5BC51D79FF8D818EA9EFE9C
03181952FF08DAA85BC8B9094D2852C62AC3A626AC4975501ECC18F0A78587E1
259B1205482DDB69B0316C94C137247A7A988390FA6255DA477B8B3D24FBFD85
DBF2E07995D78FD99C5784B2B7C7C509E9B93BCC2935C83F4FE259454A3AA0D7
B13E798627B92E17E7B9DA23A95D08BE8321430B4EB6B72238B57AAB07DDEECA
4ACA5B7E7E6AC0D3CA9A8513B88BB7B2E925DB3365C80D560443EBFE5642999E
4D1F915D1E50DED6676F8C9E0B72B4B5B6392E27761E72DA24E4C108C309E90A
8C6DAB6DFF3F5A6B2091FB0F74E34F73B119BE0CBCB087ADD6D28044E695CF89
2AF4BFEE6C45D4B46C6326BE2E10D764435C81A923049847881947ECEBAE94FA
366C4D482154A3C7709B52D651886EC83777DC4B946660818EA103F173E8C50F
1EA0E1A5E0185A71AEA8FE63A64949A7BD67487377643246468572F84A6C7DFD
02A58EB57540F4BD87362CB3AD2B5A7187A04AAF440DD8F00EC4DA4B4BFF0B93
08D9778709C322DD98DFA4776E5383BD4683DCBCCFDC8E0AA22F967BCB97046E
A3C4A9A3A97D7C031F9E8DCC1759690B138CE1794020155BE6C09E7216168904
F0ECBDA5CFB7BFAEE46118DD5939E7E12A4DDBA73D4ADF3B2DB07DEBA08DE74C
2E4B5B3129DBE6223DC18CAAA814EB610D8A1D644FBF257E8C925FF8F244F361
E789624AD4009F15549E0A5D45A0357FA8A5AC12E289CF2D9068E7B8614AB4CA
B58A065F5AF8CAFE8E0BDCF4FD673B6E5529408AEC4A8149338459F8BEE4E3EB
8047907EE7F4DB7BEA261993A02BC2A06C3291DEDF5015FA19A655B633CA8439
7F0CABC125351097FD8497D3BB8E9F04516F7742211B44EE1C72727E7CC6A042
DBC2011D60A378DAFD3D75F725FF498C30ADAE8FB6E33CA153EB711DC0C9EC43
5515BF52FD453207213F3E13FC83A36F2D86CD51573F9326DFA9ED12F08B91B7
E0983965E2CAFA437E5F65C041E7C56351F122EA8045C697647502CDF96CDDFC
537374441FFECBA1924D32D059448FD4B669BC65CCEBCD88385900D08491DFB0
85E6A13EE6C92B0797073E709B908BF3B1FA3743AB1774489E6AC37064B5113F
920B1FB6A1FA8E8D9DD4C8E0FE813D368961F1E0847C92C743CD2896298503F9
4188127439890831943816E86201DF6BDA5FDF5C92005ADF6BDB1CC337171D3E
591145D265A9CCAF247C1A705A84EE6DB91C7C0A0100F1978364F41E97559533
8AAC667E1ACC0A3D0AF0B6A0995FA5E55AFA1F1C691B9F6A82EC74B3996022FD
4532F533EDDD182406E81524DAD37599C3EC2057242EA8A7DA9113C42BC39A60
3A4886213EC782000DEABF71EAE1B8944B9BDEAC4225406AD7709307918E322F
471CD1662724747A85CF8B609614131EEA9A4B548A3391C523D03D761D1A4D57
7F67F6E02B76C71D6809A3ADEC3800693DF0F14B3A115B4AF2D9DF46E1E5B36E
223885BB7E1E8B28BDCB1EF3842F2C9362414E03C6C3EE7BFCD2D8C6A8AC5AF5
FC17748AA9B720742A415DAA0CE1B8745736395AE93C934367B899A3688FC658
392703ECA95499FA9D3E3AE9B01A1C8701545ECA6EF2160CA7018895B617ED93
80338A62A878270D2FBEE37AA230330D81EFC166DFD535AAEF08FEAEA896271A
3B6DB3E7D2AE858A1B998037570816BA940F34B058F08F66F98E6F61EF971BD1
FE38696303A8136687788653CA9F5ED3F9EA7A85CD0B6B7700313544E9909CD4
A49E4600DBC7FE9A727D18EA999ED762B6CE77697C7F524665CD2AB7CCB157D8
8E49686B64BF309006220706DC806409EF7E5BFD966C2815E1A1DAC65A0DE748
D8715FB8582B4EE087B90ADAD7EDDAD3F96B11B49B8BB78F81FE42DB1827F994
E9EFF86E090C5619B071F7DA60566CAC0B6A193DCF574938B25FAA1E9F0FC69F
62F2FB4472469BC8466630C0B8C3C25DE1E168429E88A398780F0D7BED62F3C0
26F1745F89865164950CD79658A72802D8947A4232D64CF617A8BC2687640B43
12CA53A9034999638C65F45B0F57D7600215E8FC255C3234590D81873D531DF4
FB838434FC4B7205820506D5048901B9B0A0DF61A899BABDCFBC4030DEB1309E
930708E96851F00D0245484732D41593C3181479A7C6A626E60F1CDC69E178C5
2B5FB46AB460EFE17923AC043F9BEE705848382A85282F79E181EFF14733E3B8
57A5EEE5A806E1EB2757A5DF3D6292B2A347FA3516D012A2C3330D27EBE3F8C2
8EC36BA0E331071D9B11BF19F5E6E2F5B8AA13D89CEE02664EA934E0777BD01E
EC83BB56727DA972B1BC18DBE1A9FD79B7370825AC355CD86B964839021A84C0
68C7968AD16ECC7765C4FD0F70BEE9E7C9238BF7C5416109CCEFEC324FD2DF97
6CFC21F029256E2A12AD96297DAE0F90750C0F2D3B286B540CD85D2F9CBFEBC8
F1CEE20C43F067B52E270DD0DFBDDC1DA61DEBE782B177F7241681D3EAA0C81B
561E7D6169FB0C68E45EA391FA8947D12382B17FDCEBBC82F61E5EF76E87931F
72C74F0993E3447C926E20390C33B759168843DCD3393ADDC76CEB0953DC37D8
45D170CC98D0A48CC3094B1D15AE5FB3FD08D95F9EB0F889FEAA41F3B26B7144
D47B4318AC445D88D9659B81A1793927F359319269D0982112E57EFCA8DEB439
C20604A2F7305334AF446F694E1747216D4AC5F199ED0192910E15539B07CFA8
8C80D0C368C7E4B39FED998FFC3D6487C777AC252DB48967E97D98FE66AE9C9F
A63BE71D12F01A00F5DB8278A0A914928FAED892FF4193C2D86BF671648E5BD9
6008A6B53543E7C46A90F5C92C686F122D59B3F30C9D7CAA7189121670C10C26
92938E8B62D0BFDE7F47A6D7C9E547CA8AFA0B37FA5B49AA4D0AC7248E1CB510
5749E30C15E1CF9963F0450370E650B2F47F171A0E27FE61579C2C592E13CC73
F46090D631EF06BC9B62A95FE764579DE0CC5ED03B3C76FB633E604B1EAD476C
67F315108F0636CB0254150A22A0FA9505D9A09C8FD62172610A719CD4E8F050
DD75A9C68788CEBBBA77A4A812BFCA73A8E3CA36B388056B6DF07609B047450F
38572C60BB4C4565531422AB1FF5DCA53EA0A57F3C9E271DABFEEAE10AC5CFD5
68BC420282787D44FABB12DE585B297E55A609522A90C32E2A964EB7976BDB0B
A9541C3D806BFA4FB77C5EBDDB2D5404B85F39D796E5291351AE1CD2BD437656
EE331A4DB2A983D7B5A446BF526A58DA4682C9F22549FE68E819F9CAC41AAA4B
5A7C88DF92D2AD01D65651EAF0DE016DA7AC3798AB415E6CB6014A911751975A
C7A57F25C13B26EEB6134FD6F15A5A9ACD38589F75C1C940C0650A961B7923E6
5853DF916BFAFE3341CFA4DBCB1CD87EF3DD4DCEAD5F98337B73527537B8FA58
F86F01329F1C4BD991E180DD7550442AE3E0F8C1178EFEEB5152EB51257F7346
FB3284186CC6BA6A41105AF4BE60E0FE5C1E44409CFF880C9E2BC216AAEDA4CD
5A9F739E9761283FCCF0C0741889DAE02563F58C453F45C231219FC9727D5976
EE119FAFFF1565DE455BAA0178A7F0D038BFF2B746587D16854567F8867AAB01
96AAE40FEDCAF3E4DB41FC25A2A344AB66411C98531B2CCBE9FE78BC1AE4D425
46D999CC450A63079235C60E9E8A93D1D0E944A69E8524EC90DB7C4531253BFA
D3180DBDF8DEA31BD5BB3282B155596200DA33D13BBBD899E1113DB8E9E10BBE
2AAAF4313C86B4B7933745D6866EDE081280852C5DB56F5E035EE448BF2DC46C
219E9E0ACDBAACA1A5B02770BBF210688795A7EDDD68BBA96359EE849305A05F
B99890D4C2548D26DCB625465AD2370DE571CD6B910687EACAE3719AD8C51682
D23ABEC2E24FA835DF271E3C376B5ACCADFFF1DF3CD45EAC63D7202E2F235185
45A75568CC03D9546738DE54961B6568639F3DFAF6D164CB498F4A7ABE4EB069
AED696735480B8BA5F68FED42DD602A9644C84C39E1C266417C8A24A4EEE010E
977C6C61D3B4B6B0FAC19B4A389ECA8B00B59BF0D7FD22BB800A96B272296691
71D5D07A9411B6E88C18CFD9B234CF2F2D603D02671EB7F8790D4FA04FE263E9
D7F4313861B4D82AC088766DBB2E8521474FCB68D8D460A41B61369BDAF60329
2B479F57CE99343D1361997B367E27EB09E48873CF999C6C7B21A0554EA68CD2
276F23985B0041C332096ED8157643CA1BB277BE9F492E4D13C3295C2234F3CC
6854EC712A11FDA4C818B0A3812B714D9025814369FE71C397325CF93AE1D748
7E2406AD30A2E8B6A1A1DB86B1EA345DC60F1EA0E1A5E0185A71AEA8FE63A649
49A7BD6749236AE4D853093DA735DB67694569E8A3115B94FFCF3F62FB9A1429
58C6A919FEA02F5D20D2605E4AE05405BA85743F9426C284326BA0D4D95BC25B
242C73A631A39F65AF1AB66FDF43144DC4CD991A73F7F8F8338E18180E327756
292B8DB08399673F0DC75F1BDBE806E51B2945D1243E158A14C9BD02E00781B2
0C4C6894BDCBA10A666DFB1302021A33A37B77047830015C9920D4CF56302399
AB7E5F142C781072CFAF2D3371632319B253DBB32E4BB269DC218126956CA9B6
6DC23FBDDBB5FC550068466772E7BDD95906C31E33AC2E1F9EA80951E4920AA6
89D84D811DD9BAC598C2DBA138DEF8C4B0ABB3B136913207720D5B4C77D25AE3
1C4A75BD8C7EB02722DA8D89430BB35B81368A8E087D65343CA790BAF08FF13A
5A6B692CDAF54FA2527C9F05D84934498CB1CA294DA6EBD87DDC8CE219D733D3
7296CEE1118362904F622FC22656FE90D71C4A4896F091965DAFAAFEE8AB73E6
8516B571480E5AE586CAC86BBA5E5E5153B097B6C7DF9CD0476241DC52F4BE86
0A2B46225D1784698203C4F0EBA2C58BA69587CD0D12BB1878198F8AD9741387
FAD81CBF4B916E908E668D17B5DE1B8D5A413287D9E221BF6768D98EBDC42C3F
0A6154C198C0600BA373C0C613DF501477E2C7E9D0727A7BADDD084CBD56E873
024034AE2A2783A9B26ABC612B1434B56B8EE3C13BCE897D183EC366DEFAA3FC
E254583C310CB92B3ADD040C112D494116773DE95F36BB6A831D89D241613946
E097CE77A82F68C92DA119BE25FCDD9467958904FE0CDB65F52BA057443EC42B
F4EFF4DDB6B2CE6E15F0C7670274541DB212A8520DB33CEFEE3BF05DF426810E
FD59CDAE3C17E2F46669AEBD12E631BAD83120E618BBA0C7F201C3E6822BF981
212D1021866B1AA19E70A1D92D48565DB08347E934C223F5AC742D21076B58A9
D69B6A72F68743A3C4DC4D7CD5BAFD627FB3CC1B5C0A74B476430356CDC4BA97
840AD76C942F398D0B6590CA0EE1B91FA23D9FD4292B4C730C54CCB2C26DE74B
7B16AA04828FE02F8C2A22BD64092A5555B99D672D44B80ACD7848FE8E31D547
76F9FFF73073191D8D8E0168E486DB5D57149B3280CBA72B340615323261E187
E8B93EABBD24983CAA7C21FD1E44B7C3DB3492ED5C07D576098471DD83E6B448
24FB1A4E23545846FF4BE3D6E087C8183E89A7FA85A0C1B9587407220446CC6D
504722C40BA3AFB085F5F40604DF13EF17EB28ED50E0BE1456AEC1C9EB70F26D
49E6439A08E86E9DB0B16BD09368E92C91B380A6A83F6D54047D5F86B3ADE777
669E2AFE95450A067B6D1CDA2AD28E1A221D13EFC19BBDC0A0EC3FD7D844BBEE
64316E2FCEF3D405C24BF4E92A942B4D642E5CC69E5A25A663A2BA389BA3791C
E905ACDC05A47B154D50CC20D94E2CA3A8A40CC18E3C64077DED2BF90FC4069F
7AD811334672CAD21C1F8EAE49BE6FD22C33BF48AC15CCE2A38F3381030E1AE9
E09BE98DA43549127E31A4D9C996E3FC2151678F1A815D7F9C36FEA622FD1E43
D9493B4E713CD69A9E3B33A45B38CD6A223B219D9978D3B9FA37E805887E7E11
1CDA518E1D24BB7F3D6A3A91D93A331F9B1547437ED804C5B83051BC46076F01
E2D91BA27FAF9AB7A7F01A0740415B51E89FC1E4887D1912C7FFB218D23A0FF2
DFE7F75433FB87932A162CCCA0114944A1AC1E57C507F0B6F107F10F868F5484
EA21898DC1DE852E6BD09F1B0E7CF6054D70678B01042D547F91A3D046DE70EC
C6816B3C3222A6031E68910DA373B32837B34FFDC5B579372902C7DF4981DC0A
45B3ACC18F6865BBEE2C50DB4785C3AD77FA9B4CA05CEA57E184293362DFBD0B
5D90A35EC86F9DE29DFCAC798130C0CE5C49E1C5FB11EEEDD999C77F93531283
C6275E3B1E2C1F59B4EB9149B347271EC8C7562FE4F387C6C79B00E2CFC11D75
0B8B9E9AEDE6992B23DD184A0643CF7397EC2FD1A3676A2E5FA084C5B1AB7584
EE268BDD0F5F0D57EDDBA9B97D74A2910BCF9E19475976933B742305066D1656
493996A2A6290B81E8870EED9EBA6545141F2F7A7307D30727B94E23FA496B95
F97651B42E0E7DE9EF9AE98FACBFE3367E3995B2DDF54E6E96E97520EE266E21
EE88740E10DE65574EE4C81737D52857A23FA98FAE8044179C39BE2C981AAC2C
4C948F1B06A1B8A026B3CA477D4CC612D0DC8CFFB12608A37A998C561ABE01BC
EA8D861E6EA214481C40C55B49AFA802481ACECEE7243807390B2D12C8441935
6EA106ED2E1C8D1651E7DB7278DCC6E69F910C1D7EEC79344B7B21AD14C38A07
2C6AC3B3D16BEE28177D4FFB05A5BEF3E7D363C7296984A2980195E373EAF1B7
B910D0272A2353FF01581DEAFC030C2CC97DE5E1DA366BBAC03846C68A322971
F6A0B8C2FA887BFD5F3B2C23FCEA76EF3E60E8E89DF07C2A11C0E1F89B02D061
B7C9EE62738D30D46E2F5AA2BC7C534357A65C25929B54898BA9B4EF4BABD01D
6955B0F8DDAC8BE19EBB36D94E529FA600CE0CA975858A4445ED454DF0B009FE
C9F8CA76F8684DCDD95FA4283F9CE523D03C847131EEF1D6A8C20BB05CE898FA
D2AA17E3A97F8C922BBBBE2DB63A18F1EAE7CAA480478DCC49FC8309A3CB3035
3DBE76E1585AB04A82BBD9BC5CCAD3452A7FE5A527D3A9DDC1C8E5A1260E053F
0AB9BB930A88335101F127C739B01CE8927FEB98ECC829C36E959F1AF73F6427
559E7B49ABBFECA7303B0331B3E0A35453EEC505A64E4AC9B0D19B39BF010C61
43E5FA56C2AB5B6E22B801EF92E483A2B5ED9F240435350C0576FB49A7C535BD
506B2B226033A297EA3C8C9C8EB1D571D7D0BED41B2EBE007B95C1A2031DEA01
1531DDCAF6194FD049F28B82F4C2D73E41CC73C1C9F668931DBA9FA8379C3AAD
F23AB9DC687ACA989BF86F24F23F6D91C370F6596AF00C0F5C7D6336E0E19CA3
38CCD852E3FE5214B1B8DC1405B32390852C344490E066B665ED5054B5DA4DDE
D557FF9ED386DA52D10615E700751C8428D83586B238FD671281BA0E0359BEC6
878587031174CB0650A57260CAE36E35E6CDF1C75CFB93CF0F6B4392FC1B3ACF
064F5A123CB8C7A62FAB9DD62DD40022B4AB9AA40F9ECF7515A0F23D18B36684
FFE56A55E18E0B8D3BA665D8BBF620D38D020557C277B91824D544A070C12895
94E2E4C0A29284FD2C9A8740851EDC442490FAE83C07A39BF8F1E840D5695D70
DC4C97884A824855D271FE3A78F5D96EDC72B7B9B4BCC12F4209B1951AF23FF6
818D2DDA6D9B428EC87CBB3C562FFEF9B2331C9C08200C6BBF6CDD136F67951E
C6044FC5AC0FE18757EB205AEE732B15B7F374D259C8221EF16504D11B5F35E8
3F0D2DA2A17FE31ECF690386FF773A42BC062CBF50ED69CBF7A96D40CD1773F5
064EE597E11DB51764D02BBE3F7BEB2DBAC18B51F56307568EFD9C279B2B88C6
530CB31FCFC9E5B4C7563C5B6E348BBFAB29CA0C7B3B458D0CB618F8D8695AE7
4DFBB4C0FD4330B8E71F816068081D325833AEDA96C0DA8C35133F0E28030F66
70C4C2F1ED2F77855E1566A71B087C202EF6CD07360D944875E8BC20A55FE9F8
D56353106CA18864E499E404C7DB577CFE5BFB1BE0C0AC6004863461E536BA2D
C0FDCBA1C570AB49AF137953153675A677EA80A191848F9C630F52EB497E89B5
F145D01D566943FAAC90556CD485A15DCFA2866D7CCA73C0F6FEA6D19C5E4A0D
4EE4F7AC5252F4EF69BBA047FBA2599562C502E2EB4419A6A18C8B8F25C505F2
EA29120E4FD48FA46D426CDEE5F1EB91E8328FF2FAEA463F9B2AB7D175D54EFB
8E05F542BD304D2D1798BABD827BC8A689C3C3507C19200E42B424AC335873F8
D910852C291F926FCC51245C2EBB54E07D94B187D72A93518C1C686CAD65DDE0
CF327D3403BF73AD979877DCDA412F63573818F678B244B770A9A853C1E21634
8AB87B18A4184C84556C0476BBCEF1DAD11D691A83B545377890D32F0FCF2E78
D333E8808588C7F45F09194096200A65571E7C455D5620234156A53D06A35317
623DCC68096360101378CC2850D829FED441E21EFE2B0B8A550B4264FBEB14FF
75816A955706DAAF2DEBB2EE0FD69336E7070E3EF345D6D1EDF0BB100A758780
2F6C66C3BC6E9DF45A22A24877E4A449925CDD244074A2A2F6210324DF3FFEEB
B02F2CBDCE564C8E5A75C609E3856A671BECD4C0773D37998CF63D60404E04DF
B4BD1CC2473572CE8602AE77C5F2358D972727915D6222025C6E76503F3FE34D
F9C8D98B29BE4870FBCDF58BAD19C9CFA9D528D104702E4FC54303E6A8E74490
93FDB99991507C71753EE604A02C0D4AC6586B9A2EEE56C744DFEEA74D4409A7
890B8CC701DA9DFD282B79BC3FA1308AE4D972D368412B3F534B6A99EE86B7D6
9F4D1EADF1BEAFD78A6C94B28D4E44AA264B02576EEEDA01ED6232B5D7E4959A
8CBEA43EF3530435E038A136F8256B7DCCA0D7503A0750027042AE2F80F69104
5D26A526ED690F92B91C0B62C295EB95236CB4FA8F6257B4AF5E637CFF0164B6
1172F6E763B32393855DADF512EF4559B770873C6CBF0A66D8989A6B01108B8A
5608A05FCC5A87AD774203738D9D144919E98323A56407ED8C313841A757C5FC
51166D8E74E342451F0CF22F64C48EF040CCF53D9B6D16417A93E7E8AF1747A9
43CA6DE44654AF1562FE5062F2899C47999760A7B34B25A679D64952A6D39CFF
DBA38C11C7238C738370C4881E2F11FDA4C818B0A3812B714D9025814369FE71
C394A115F693BFCD7FD07158CECA1F10A5D75C8B02FB44859BFE5CBDC0840F95
62D8D8BCCDEC4F62A11DF4A3856EF2E2E42C2BB3C481C676B3BB029368632768
C2988B94E0350054B7EC46C10CC7F79152DED9570B7F3A707984D206694B6619
0041E8CDFD55B70A87E0F22F9EEC3DE85903A1FFA362AD33E97A907B13ED4B7D
58A450EB9F00571CCA27DEE4186926592E09D3D121D5A39060F99EF666F09279
E81D9CE04C5C360D7677FEFC0BC3255F01078CEF6E06C0403F858582A754DCBF
8841FE81D39359D8CDCF42CFC3F4C56D472FCFB5C942F5517FAD1909D38B9B16
A4F4719E66EE3C64292C209A832AF504B1BCEFB5893494C5DB326FC1900C1051
A12EA0AF63D45D80F3C5DEC5853BA1445742A6C0884BF361B64D327E8645F44F
0DBA1E0069833A45342B060EF38B19B97882E8F13AB293CCE2AD4B4D0B38E05E
DF1BD771039DAE7A7C37172B02AA3220D2D2D7E02F4D95D8E30FDF8339ED63CF
34C92BA1A1097F300EF1212A5129AB2E71A46C3AA6D9B597A7C936C6000BF23A
56FBFBFE8478F1CD00150EE39F0D3E550C3C28B45B30772EE9FFBB8D00718C34
3010FAF8EC00FF71915A858725501E38FC7E760B5202739AD91B98A9DD2AB665
537FEBACD5BC7C774D53CC63B57F7C98B8492258715A1599CD916AE4DA13B779
32132FBD3B8E9A92E180903891204F4EBE911581EA3BE89E4CDAA34CA4E6BD12
F041CD64AFE61BAC3A46E4A43E85BEA75A6966D43A30ECBD060A0E76AC6A0B99
F79668F44292B23A8E816C7855509CD57489F07108D995887AEA9D20B3C29953
BCA07575CE998B37E6594CC0A406B20C54AE6DFDE80340B693A873A285371846
079E729515FF910E63CF74168DA3489F03F9BA2DF35DE06DC843B5446A9665C8
653B26680D97565FE4D1E216A9C768A454647DB379C15A6EAAF5A11F36EF0054
02F6DAA9ABE6FAD20E8C5FDD1AB9B72BD872061B3852B74B006793BC90615DC5
52B7979814AF3F36DF5FD7E3659796103F5B013D89DC6BB570D6BAD4BEA1951E
EE0ECF5E0BE575C26270EB3CAD80E6D76BD8681CD2FE5AFDF853E1020D7DCA07
82E78353B6D691A3461AA5D1455A660188741658BA6AB0F43F3A727763D9EF68
329D5CAE9EFC75DC15A9494E876104FA0F07CE4E7669223B8AFE23F85D9165C8
0A576EDAEB57DE2278C426F710560A9BB88DBD9146F1A6FE3EAEDC580DB92AC1
9A860AC497B2126955553D214FA3C5F0785881DC0098589449C6B0FF73A67230
7B352E141233CD8B96A8585F1CFAF1E6F7EBF70A7BFBD098994ECF216FFC6405
53F1E002F576583BF8FF1FEE3ED0DB577DA27E41B8FC895F6D1CD6C2A9FBA365
45B9F8FA73BE010D7C4C0897DF8403DC91461325F612CF1421F3099CCD799C22
2B344C63ADE304189A993413F74081530FBDA87E66FB46479812F73D55BF7E9E
B4330844CB6AF35D2AA9116B9C8923CD1B5D2DED3C31AE91BE8E283EC2047174
DCE336DF18F124929CAAF9701057B34D94BB8BC0A27D0FD0817D3A4D95D4D518
8EBD111ADAF13004B95BB6A1F91855E80DAB99A669F70EBC4901DF9C5469C868
EFD4927085401015251DD086A8D2A91C2A290F89A668E456DA32574A11DF91C6
F3D21FBBAAD00FDDDABFD9997F399B506BBF5CFABB1475EC41C9E6F20D2E8071
551896F2BFDC6D2F4F36127A3C7B726EA6A4E12CB39087EB7F0C524224D84A2D
38625EE58E39BA27C9B6DFA186E0352A9858E04DEE94D1CEDF1E2D29BB43864A
B5B770A14C98A4335F9A7D9E02960F7C0D013CCE063154E006EC3DBFD9111472
458363E5A5504D88A31C2EE5CF4421803E88923B77AF35529899DA5D51321A1A
3615F7A0DE36E6B7B955EE32670FFE852DE1E90FFE9325EB3E9F8552091831DD
6D4A15C6F7323C3BE4F26E765EAFFE3A7868A6E6F4ACEE2524E2ECDD3E91D91C
57D855D818C86819DA7A0A684FD75208EF1DC1009C1E9D28B71A246B043CE44E
65F5CC8E708DC404283546D7814BA53FE7FA161FF626461DE201E4EC76FE3383
700A594ADE0E9D59FF37C4F4E6E17615C0834D098E20114903155F14A3D27477
386B661D14B5DA41EEA1A668FF1B7B51421F5E65A2A7FC13B78A9B9A34C3BD62
E7C817927188ADF629BD83579B2C564DF6BB4372AB83D8D5B8ABAF9B0F4357C5
5E650295BF3BDE49CBC31AA72B65C3BBEF8EDD9B4EEC32CD7D3C7C2B95E0E09F
E4561AC4F28A2C7BEDD716B33B820BA74355293773471391156FDB064EBAD6D2
C6CC246FB44E77DECED1799D4F640E9DFBA9626333A5265801CCF955C1E60017
9F5CBE9A74A953D0596E59F9510557EAA9071AF92139B49C8BBA2F807284B877
DCC78AB171815A8DF0C9380CC9649573B02EDE5223B3FCA7E79729589AF81DFF
4ADEB3E0E96C71479FE3A4A5CCD867E5357A9C218E2411749B802140759EEE68
8D4A128B1DF2EBEE1E09D4EFB39C21527F91F5F20D556E956F19270A4455D81D
673B1DFDF77EC8C0418D82F545A05180502B25155B73D6D5199BAE7678E69728
C89FB9F1E995FBD15C97D2CF680C8AE033AA5E0E3E8253C8C88B72E3AB7751D9
D3F07E87502BDD79C048B6BC06A44D455153BCB8E3E01067B3009D8310BF6E72
FEAA21C559B945A22203FAF11FD52ACBF9967CEB198392CDFEAAB4E9A75A7A48
17071CADB8678874946E76D7CF66B864BF28B0E657E60A8F1E998F6A62494DDE
CC8F7BD3EF0C79354354299C85E17991348225DDFE399A8E57839D2B36186EB0
3E4293B28E3223FABEF7742BAE933D86EF556883CEC750C615EDCBCCDF3ABA4C
909B92A16E8AE2275E83777297529C5ED2573FDF8A1FCA2130E99F0D8F7F5711
55B086E3922DE513B2D13111A4F5A55B3F6521AD16F5A4496561AFC3A88E05EB
D633B6EA56CCF855DEB471E057067E5B94A198A70F110395EAC3F1391D72DB08
B0C95A9C0ABF06921828C1D7E17966BF775292DF056CFAACA8C087B4C0BCC2AA
E1F49044E19638E7C6E4B118CC665F4B861D3766A24140012DC3EA6AD5BE0488
6842418EA1872BC169F92A89067E20A9B05BAD3FEADBE50D2C43F9EB9960CE79
D16F5874861E2A15725F6C5B800AF66B44344F1DF681219626CDE4B258262164
8F48CC413EDED067EF9BEEEA11347884B725FFEEB4C75EB7B3A707A6D447DAEF
B6250ABAC16A535C32362D5CAAE2FA4897AC1219601CFE32E4FD82AB7B638672
D6AD3E0F12CECB7595C5E680E31F06B8DF8F8FA7246E4BE2349868E7722DAF5A
C823DF21A5EEBA2DFCED870F6E0AE9A724A3310C3CE8340FC7BF20C853AE8645
6CEA7DEA7A0559301281C6E62388AEADBEBE94190D580C32300D5004DB1BD238
141F6E74CC0B13B522BF98F1CC4FF93EEE934F661B73BFC5BB9BA339A01EE6FA
F4620F7B0817C2AFEA036ABA82B0F948FEF722A5E8E24D23EC7F2BA3E5D66350
AC0FBDF769E54B11A5DFF774EC54EC20A9D8AED089AF77F0C5D896228A3AF8A9
6329AFD79E03086E183FB95F360FED53F1A1E6E7CE34EEA3BBF226C6E56BA335
6F66D123C08884E9D27DC1FFFC2175705ED0C0A9F051084E452C075130628DA2
75FD4F4B2883B7B126D8255F1A0F1BD08158F94077D191F62DD239D31C158F4F
FFD54FFB2E9AF810EBECCEC5B24B93A488BD863C12856A1AA45C4CD84FE0E96B
C0FF6BE1358CB41B71AB4D0073D71DC38239BC688D3F5F61CB43AE2F5052C341
E532592376A74B7042A9865584BFEEB4D4C73D7FEBC524734E0DA2BD1A957EC4
0BEC5ED705F31F6773037F86EB925DFE31A012031F36D5F6099187724B0C4A07
C021434CC2FDC35A4FDC88E365F40B9D576708B26CB2A5CE36A10E727FCB7214
6EFFFC2D92581F94F9BE579CE43D4BB95CF70387C6270755A3BE7042F6E114DA
93255C678124D666B3BBFC54CB9DAC41F1B748FDFEA54FD1B1C7EA0C98434FAE
393859A98FC0B3EA3A0CAE0A099D4F0432AB3EA1F5D8579CAAE0CBFD02AA25E4
E52E428F9741440E8423E5DFCD5FF7BF21EE316AEDA07CCB741C994FE998985E
08F174464F63F952998C3ED88629D4CAEFA673A3FFB3D478EF32B286D1738E60
C074C6CBF9EABE76207E935CF4233C2614BB02993C18F5228D92C07005C36624
5B65AE81495FC155B67C8626FF338122D134901BF499128ED228A0548CD9FCD5
194B302D2893FC5BE3B4BDE678D0712508C2D49378842275701D9CBB1FCBC848
4B378AD48CDFB645FF9DCE1B9456A8F32CF3C78C509C64277A9AFD2339BDAC1F
73578793DBC5674B6D5B8F026B5509AA74D73D0A15F0EDCBC64BA8F67F42E837
4AE44B7870D343DF102BE43CD5058C3BD0263C624B2A52659DCB7D2970392C6F
0911FDFD11B254DA5A743038CE22E33B44B8155EC868D4F208148F4777479522
DDC4F3919739DB56F4522D02299507F5DF31CA0AF4DA4E1A88597E05F600FD03
CC515AFA76D3B85160322A1158BA20AC85CB745676F87833CC5803627C6DD6BE
703685BB140CECAD52A56F1BFD459667449FB7D3A09203A75C87576319AE8FD7
2E288AB89F4ABD066FFA0C1E74620B52BD85A37B1F3D63ECFC9C885D638355D7
6EA0130CCCA89A2070555403B83025FC25B226CBEB638DB69183DDCC4F21639A
10264716CF1C8E9A0D75307C68061FE700DE6100991645987A445AD31BD84B6D
8FF62362843E0BD674797228BEBA2B2CFD86071B2D4DD170A5D0C31FBD05AA74
D08CAB481005236E1D6AB6DA16FE5567E739D6760080A787A15CE88962D5BD17
90D5AD1F832AA7D0F66B98937A0FD724091D0C6088D01C993B2C772B749354C8
1505074526E275F8FEEE3BEF3E46AA957F85BEAAFEA2FE280F0AB37128CBA8D3
FB34432B5212880081DA26815D0A2E890C1BD85B22F30455B7E6447D19333F5B
A083DAFADC2D7D62D404E77FDBA848DC51DF6C9CD6FD73CD57FFADF786701B4D
070C37CF8EA3C46ABB7A559E6CF3AD17C92B6E9D32767BB9559E2FE19B002770
7AB065CB311B645321301409285744B94972253B58767689574EE1FF3F1636DD
39CD5ABF781B0FAE83E6A558590660FA9626EA1C1F9C7AED7456C1B8FDFDA1E6
9ABB4632F4D8E3E5020BB4B74B52672CF064EF8B2DEE74613605C0D58447B288
5EF6D0B92C19B61083E4F894123E0E087F142C1F31EDA039E50AB6297D592FE8
2EAB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic10-Regular
%!PS-AdobeFont-1.0: LMMathItalic10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathItalic10-Regular known{/LMMathItalic10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic10-Regular)readonly def
/FamilyName(LMMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathItalic10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC2
3C0E2BAF712D9A4BE80B6E38C9F5A449DD2DCD493C0A130001F01DB02EE2BE50
8CF3C1EE0898661980578B4396FB3179F301761100231D260FCA63E74EDCCEC8
08E4BD0AB6545195F32F881C99FE3877DF3BC94657DAE2BD20767AE9DA7D582A
DF256F4A52C57F9D228B3E1CC5DC93FDDE8E791DB1E6FA18E0B9B2423868792A
2BC90B78D9F9640524C758D0FEFB713A9A0D66350CD78C8FC945A63D8C07C8FF
5D66E1D7D963B7567F270FB876D2FF1E76F1FC1AD80246E413D337A718699FE7
EC080448FCCD4B5AD8453287D86BC727C140A6B2C1F62439396AEDC897D546C6
F8241122821F88FE9BA1342B044AE9A33CE496ABD5D7F76B1CBCD331A08C6DD4
37A78E15453AE3B1AB6664CFBD92B9982E6C0F5AAD267804425AEC523A184899
3A2D0259E64F914D353ED128EA5774EA6F87DEFDD1BCA35A413EA5D75E42E3B5
66539B7414AF09F23C1DAEFD913327B6CBEE7B5F6258CFB98B288A2A2019D344
E9335FA5D1887F0A3E6CD430AA65E3A59B396F035C7E84875F5A5E374875FE5F
2B49567A6E8C851A51D8BA4F6AF388BAFFF88D02B166F37F0CE1D4D4201AE26E
047084E2ED3E3662B60089E355AEFEB3964748C5F836C437C042B64BE3AF79DE
75AC4E7255CEC0F20E6D9400D29BC8D9BC2FF1E08D8E020F33BDEA08A38A5E90
CDD238866C66BFEF1B3B61F2564CCDD80BD048586674B94291DB7268CF59686E
D95927FBF8CD3224572B687E01791F40D51A230B9F12EFD86A7F90A0978CF220
FA314AB43197FE6E7C4F22C4BF4C4DF7ACC7EFE7C6B152984BE0FFDD1714ABB9
CE834B59B859F89231021E34E2BEF6C78D5697E25CB5D72D2A5F8093158818EC
60233DE494228ED13DC8AB6685A5332341BC02AB2064AA00FBE26BFD27263C04
461327FBAA2D88B6D1477815F4188980ECF40CD3AD1E29DFA34769ABC993DE8A
AF8A0E27487EA582D55886C3B2F6DED5322AA7F265EF97187DDAE8237E4A34D9
C496BB1C04588AE85FA5B209321554AF2252858B319283FC9468887C282A8537
29BD1E86B7A26AC1D3470F561C13613A73572D79A8CBE1180F4C4E8BEE8EC0B0
14E2B65B5E8054506521227674339C79F366B6CAB4CB030073A615CD431B3DE8
E976AA00381C839090AFFC5C4E0758F64AAAE03C0F7C813814A67AB8F69682F2
563C8FB6A05B1977B6AE44C6E4000F0EAA9978BAA153D1BB824BCE1D8BC30DB1
4D4EFBA262EB2C414E4332BC6B716A607208B608918A22D5858FEF4BA9CB65CE
4EFF76A29756DCD195F12FC149F3062E34E45A54199914B0899943A2F704D23E
C7E7B3D245448B6C76EE523F99ED1FAE98A934ACDB8BC872C697F36D9AB8BC28
C45476FB0FA883752DCD2BAA3FB3177C4D51008AE0D27F6A5B55299A4095B57D
9EE9B6B6B64C26646B18A8E1C62B06BA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C62F76763DC91BA0FF25FEB234CEA0AEB0C4C6
82AF76230200DED6B3BC3B06E67E2EE0AA22D6B75361C9DE43CF44166F4765ED
D46D0649838B2A19B85E5EBF40C14681BAD24696FE00F0148664D6B4C602C042
FE0934D208422226264A1EBCD2FD3499849375721D342810C74064EF022C109F
2198068476B55C1042EB05AD5B8F4207F0F07ADFE2C2AAF32AA17671FED1E509
36B0CE6E364B62411E6DF77D4A48FE74C8B42C6EA815E150DE0739F413482171
527DDBE148DA73249AA90013DB77AC6F4922CC21BD9B4C06B895687A3F0DEA8B
7F4F8013345CDBA402E3A77D3E67E54011D9DCF8C70A6E4AF6B269BAE0CE652F
6CB26B9C95E60D2DC40052D3478EC279E6FF83DA3CBEE1FF2514948AC8E0BF48
4B0A702514C15512D8901E78AA828FB9ABAC42443EFEBDA80787A0F0ACFB48E8
0CD00A3DD8E93C9C279080FFAD1B25BC739E71CD58675E2578A9CD6E1CECC57F
EACEC6454D27E80EB0CB1E0C1CAB3C9C29062266F3163CC283F2D87101916B4F
4F4626A30647A49AABC499A97CFF90F3A9BC6D36EAE84C047D636122100FCFB4
BA3ED1AA95C54462A53AB284FAE1FEB947C50CE8BE18F24922B065CF25D94167
4FCE08A60064CB42F4B5DD688729F3F1A6FD1B158F1DEEFC669CE697CA332B58
B295832B4E6D362389632EBED7ACE79296A1765F02944B8E689BF7859B266915
E85CD024EE4EB2E521BC819EBA8F6B92F92B4398FA2E1D6CE1F398ACBABDB5DE
EFFFF4DE632195A2E0802FC871CA864B3ADB40C28AACA1C46D2E502EEA90204B
4D372CA1B7455D51E1ED8E082C5CB25133DB39F894C421CC19AB49821975DA03
DEDBC7B55C2A9EF695080C2C3A5459F52DF5237EE2205F822BE8A40101CCC339
F93EB8D51E3F38396C6829C8DDF0CAC41AAA4B5A7C88DF92D2AD01D65651EAF0
DE0704A975D2C77A9E4B76689F6FC544FDD4A65861C14B6808C55795337D8A45
6AF592730E8722A632641B259920C9F30363291678A7D920F128855CDD17E51B
DD71523155BB827311033820B0380F65B3AA4F3E8379E5A3EBCB36C819ADC812
9883E984EC2061DFB90761669C49ABC0D748DFC2F2D05E4FCA2D8F85E7BA1AA7
08F294CE1BC740EC90A0764E9027D61CE5938B121E2F664D35522EADAC9FFE11
31374EB2AADDB2337DB86F1FDA02B22AF2A316937A37662E5A9F62E131E8C2D1
33CF3B99FB57A66912291DAA0915E7D640105F3FE3343E16C08B047148E29DC5
E5EFF4711229E2CC5C8027328A6C3A12420D73235157B42582FB3C27E56F4DAA
40A2031B372029D198F695F833CF2CFDCA9AFC0FBE521E7C994D1D49ECEC8ACD
83D9DC1A32DA0DBA23011CBF25EBE3882B835172084EDA0B96B3F32228F7CC4F
F93EEE934F661B73BFC5BB9BA339A01EE6F9CB8DD1549B730374F5251C04E601
C27E854D53B85802D973D05F42D3E371304227EC703D42B4C1064DDB3B410A8D
02E2EB73D4E7D573A06A88806F4661B0AFE61AAB44ED4B4F457EFD4B9B0BBED3
4041206F8F2B31E96797F77AEB83A2927423DDC0DE4A91156AA421C0435C5925
0E09A0722970B560097CA8B45C55E1BB259EC2855938CB532FC260FEF5CF3FE0
5F4F6B1A6E1F8FFCFD6FE8447932BEB150E3A400CF8B83ECE8566C9D72DF8DD1
63A3CA1D6A8C6C902E1F966AF6EAA42AE80EA2C146A040FB4729A47526A64474
3B53CF089DBE0688490B3A656582CBC1D90D9931DFAAFEF53C73913D7F009E62
111080520DCB21D96FCA0AE67C00396617B3C75F93CD8D9565305EF1001F84DE
922D6D2C9B900D8DED34B8A702E96ECDCF28BAE94FE49CACB8FDE4C7AC466E89
8A32F8B178FEFBECB1DC8F5EFA55F4BE79651FE79FC065EC14246AE06156B8DF
F94C266C890E566ABB7A09A262E516D108DDEDD6D7DF34FA74F892A5A105C4D6
67B99B8E51118A29A53C6F2D72F7132FA8EF7281043D30DEFD2C68CB4E6F0E24
9386C6197D9DA2FDE6A9CEBCC633F3D38DBEA5BFEDCB9B0E9D7A0546E34F8BF6
33F656FE32F1FF45323265B5CE70ACBC2940E23F8C860EAD0EC4977851FF7A79
BF3DB3338A892839466E31F198E98BBE0DF9C812398C54824B719C8B575FD784
DA7688FA287F7069D4826C73D1DFEC96B8B48C55D6D0B9CDAD690F8976A677A0
409352766D80E77B1270019E0EF57F31E9F13B97143D84083720D9B5CEB6E030
877EB3C7D60A3791307A0719386E4581BF1493794B0660A2DE342E973DC1CF42
98C38E32B95D790323B4A5713E69521D8E8AA6339178B57C16A763CFC9BEEC27
6944BDEA255789EF581BBFD9589D9FB42768AF8CAFD1490D4A0B81934EC836C4
BBAEDBD7CD236E6D2E8F4A0A24C4BC96A1855C5259715B293A3D7E844764F84B
88D997BA5C7B7C1ADB45A65DC61852339A38D7BC9D8529FD28B5750193F9287E
10FE60D71DAA0ED015633CD86E44AA19EBABE37590BD79E91F1F373692B89D75
C0207CDCD62653E9F753AA892BD9A7AD14F509BA49C6320EFB4216301DC72605
79C7DDA09A0A30BEA55773FE4972A46026DD787FEEBC4A63D583CE7227EC1036
5966AF2C0748C257C16DE3AC1F8D85467B5146B72FD47EC0C3B56D03FF7FB6D3
5742A408FA77154EB77D6F5248169DE4E20578FA29D7DD7738DED4233A873C42
13DB20C4F36D456DAFB6C4040E640837330E3AAD079A9D6263C3A82CBC29FEDE
E39359C351BA8960636ADF062E9F6977975D6C2F36AFF88F9F4FFADCBF28E004
9FBF817D90AFB517178C9DFE59CE8B036E3B067B364E0F7CC02EFAEE34959A0F
D994D2DEDE8EBF3F64D095928AF81CFF4792BD162749C3142978CBDFA53DFCE3
48F63D44BB85BC31F795942D5D77E3AD79EB3B6CF717EF3CB13D89860528B572
8B7942163227EE715A2BE64A8217DCD523FE710FF61D766E9B334BDD7EA54C5B
D1D26C69EA7D6BEB2766F72027F15B498882338B830E75DFBBA48F652EF1C3AF
CB19D0A0AA9B58CE598FF30F1333ADCE3E7B71D76A21D2795DF38545036C32DC
F30ADE2FA190BAB9326EEF9FE6A563644E59B5BF520B3697189C18F52673F127
25F3351ADD2CCF348A72E807F1E2D7DB1B31BBB1B9E3ADBD7EAD8C3F5C837533
3B0328620BA0F8059823BD2AB80BC9DC78BD724DEDA79878F11DDCBD27F6AFE6
B8BD4E941D2FC154BEA826E96D9C220F3D88BBBFA3DD28BAFAEF400F21A35667
DC6205044B301CBD54F6F3BA326F6EAEF1B707BD8E2730C558421B06B2E037FB
2EE97F5290CC0000476C0235F3CD2DC38AD65723EBB35773DB0933927DC21081
E67E5DCF4E41F8D05BE0E19437423672A26B560AA588C1F1CDEAF6FE797B688A
A11FFB6F594D326D48E679190A0FAE0EB699C0A4260659E5AB473675F8DBD919
72A0A607EB12F341D99F7D9260E89443A3941E74A7B6EAEF6F0AAE5F86D707F5
F9B56BE11F681017F794ED172D0ED5BE436A39B11A9E852502C915E2823AEAE5
A0A66B4A7258A56C0318B909C39D99AC63324AE8A27B39552A1F26283F54A8AB
3085514B5F3926CD47F8CDCD1F32A21D6F733274CF2E7E02A96415BFFAAF96F7
7A39A1311917B63143F3A933E9270BCF2CF16CCCBF35E9A6DB08C3B7660CC929
CDF9447D83A0B0645F51309386AA2433B68A35EC971136AA5326A15F3A50FB8F
7AC6F30485DF8196AEC55BA8AEA0523C6D97192FD95A8E20A494F19232EFFA22
4E4CA1005281F055237BD7E8E86F1CD55938E4C906DC4685E758218CFA01940B
F809E25F64B6827E9F8867A18F92F1928B97F03B90FD5DDDF45C88DEB19A25AD
F96AA92AED7E26BBB3BBAD092B97ACABC52E9DB146BAA3A8A02B7C530BED308A
CD7A1E02A9F69CB191E2F8FCFF6FE23A3ABC8D6EE13771DC4508CC4D9788C0E3
CB5664C60D8E524A15FD6DA783448FEDC69939DA7ABB6B1C7AAA577848C5DA4B
9D780DB1CEC39DD554294996C46E69902090E3E51F1A1610F43C329EA8150E25
0037C2B71E075DFC0BDA01637CEEE4F2165405629408224D070207499DF2F43E
7D52E442EA0137EB062936004A2EABFEC7CCD31CF0A0B8E3654C810BE9472942
E287483E4CF87E1719621E73D1924CA503D4DB7E0750770213BF6188DC183302
136FF6CC18ED1DEFF5DEA94F85AE991C1AFE483903A4919605795E6ECBAD7539
996A34BE0B0F5BFA99D987E84774F6B4620EF97FC19F9FE57277BE17AB3EC8F2
C89647853487B44A55809194F97602A69B85F86AEC6253DA395A55DED9117BC1
BA52E56D3F05CA0DFF5AB1BA1C0D6444AFF9AA7F713B72103AA5808BFE182270
3371FA7CA0471BA96CC4468705A2A79E72C1E086AD76C19784527E7D439BC235
40E04303FB878D974AD04A770977FBB2C31C4F8FF8BB1D4BEB275C26835080FD
2AC78DE88BF65298A8EB4181F16511A060C09502E182EAB0E7D0D01ABC1E310F
7D2A2BC7ADC582C8329607108080263EB92C9DF6DAEBA5C2E6AA15CEE7DADF06
9B160E9D17FEB980F5F2FADE062DBB99218132F886170E2417CD39A79265C7EE
A862D9DF30C19D6E10A3F76B65763C33A249C23C8616B866CC56DBD42E404EF3
2B6BC5FC5C0A20F53DE7A8FA45ECD89CC211E9FE518742FBB3645667801FD148
9387E9A74C5A4E691FFFD2192CA8295936A18B42F96BE5854A7003C2879222FE
151DAA84C3F9FB951E4C6A881D35642453CD3491F88BAA4051D825D512C6F5B2
30868A44331AC21B97729909E15CB4DF774A63C6E75A7426A7632B8B4797AFF0
9355FD81A22DE96084D7181957F70B74CB84912E45546826408B75445A0099EA
06E67ACA22B1E387F336F6BEC81B388C76A39DD9F14D883A4CA48B1597EF3E34
041406A09B809F42A650A1988615D962C44E045BD8CDEA820A1B4F8175E5232D
6644A2260837F172756F06AD2A7C2B68555C388368F9DBA8FBE0517637534878
9BE208206F329E2AAB888219F6137A5EAD65B433124BA3A8841974A5B9038837
4D2E7BBDBA729271D1230281E2EE9B02567B3DBB57536F1C9C507DFBBDC3D963
E6BD12163675308DD742A0BD67804B5803FB9DCCC6342F21C85484169B41FE6C
067B4D3E4FCE173420B130353EAC9DCA944F106B9A315700669D9D8A3D985F44
DE6070E8E4AF674A0E3EED6CAC66FFFA0F1795731A69860E393C9CBBCE94A9DC
31DACC0163FCEAC4FA882EB97C873969EFA04D3E2954B227A0C18DA8A43ADB75
93E98E5E0C7519713B0C80E457FC565E44F8F0808F26A82E25AD6B4176B3BE59
B388A5CC380114DB40B124C844BFFA3CA29E638C11C5C705E96349386689386B
FABA5CFC0CE6369C638E695DD96C39A8267B043DD1A309A1F1C31BF683F9E339
47C0DED430391216C1F404E0895BD79589861F3B824FAD100154EA2E91D9940D
8CA147C1035893E2D1C6AD444BFC845E5023D34DA177B1DD3787D64255F26B3D
26D7F5B403988F18537E639DCE4F416409386A5B5F2C28A996B9464E6C2384F7
43BE6B1AA2EAA0E4AB9AB75715DD511E9F68D1748639DAD902F9BFE6EE602DCB
F09A3BCBD4D0AECC22E480CD066D10196C05A0EFD97EE57F50C5A159C8DDD09A
780E3211EFB72BC5B2CF545D57AB4B9C42A3291D658F7D31635BC15A0D56BA69
1658ACE98DBDEFE742DC61AB7CE2363FF6B65CB9752CE148C3C8CBC46584E5C8
2D606AB2BCD7AB93A8795AA46773CFDEA4037277D397EF45C542582B6F56F890
EC5EE8DD9D075383D984609515FA33D5F39264ED660823484D9F0480126A31E5
9780146F398B9FE829119A4ACEED02EBA65E3D0C306F8C7E14B664BF15DD89A0
C4DE78B5DDAFA9B3A1AA0AB528C1E3B8F0E980DE9F1815007CEA51619D84375B
7777A5317919026F198BDDB71847B77FF4BA89C15EF8B7DA515495DE6B1C067C
7F67FD1FF0E9B41FA08A40882D6DB06D67AE9DB3C7A1C3BDDF94CC4DB60700C2
2ECDF2271082FA20E2E68556AA79171ECAE7B9E1E542F6019687DD5FBB8B7C18
E2A7B55A71827007D54E603D88211E9B61E953F33CBC743DC0034904248227A6
5C597DD3DFFDA4ADE57429E440123D5273FD55A6DAF28122ECCBC84E06D72504
493CDFB35659392681091E8BA271A63DAD594F74301C8435A64C9A456DD6265D
8D0D15BFFD4120BF229D1F161BDA867582B43AF9F5C8CAA12D9F6EE5ADA4A486
3328670D822220DF701049E106F04530708DD34F92101A5A71706506E71315B2
7AA869B9E2AEF564F092AC7E8FE40D0D97E9BBA0D4FCF0E58E58CEABC579AB7B
3FB4629E31924D4E1DFABB9886B86F4413114BB2B062A5D704C65455EFFD4BEA
1607F0B0B5FEE06533568DCF1663B1D34923A19B1743CEE654C9C39665AADA2F
E23E339DE411FC4B41FA37916D6925540323301C441366900B1502018D0F42D2
C05275C5EE7AC03CDA298908B2B6AB5B89AECC81F2666400D69E132AA9FA4408
FFEF271C1F48785BA79FCB77621175289491E7A1654F2D89AB237C295820DD78
AA19FF23F80B188F9969CE4D13F0E26341334921069ED4EB4830E5E1BE4EE719
5B4650686C1036D078225DEF89BFE7329F2B420491CAF1794C18EB35FDD30192
9BE09F85FBEE99D21B512779E121066B478BA5E85C6B452AFF11328F2850865F
3F667F1F0B59E3C85DB4FD78D89E2167E977EB8C0475E6BF7B0A646880AFFAC6
00F30F1DD52DC3204F710A77E590211592D6ED63B34E5109E56307D4F90DABF8
F42769D2241F9275C3B91466ED904CD82CC3FA28DA344B632A658418710D374C
9D2ACC48BC4377CC1BC095304CD782CFA3FC10643DCA87633DB2203ED9BF9F14
DA81F778D8802781AD3E545681ADB0F8AE1F2AF3BC364351E1FDB12AB959E9C9
45A7AC260659E5AB473675F8DBD91972A0A607EB12F342848DF19910B28EF6F1
D077D41491DC8978EFCE821DAA18EF91DCF28E58E376E2CF1810A7EDD21D89F3
3FF7E155850CE512998D42FA38107DB1C1CB3292E6AC20CAF40D043D8A001880
D27C0F7D73029F171028FDDF8B550E38438FA1C2EB6BBE1AD828DCA8EE703B1B
B9F607E523F6923162B9C583897864E59CE6F46F213B0EA52186A96D783BA4C7
C042E823D2F3B752D775F22F2368B6714EF64209274CE1CD02D148724B2561AB
1E54A672AC2EF7F6B7FBCEFAFF2D8B6BF15794255E56D0515522C449DCB5A41B
A9FE140A414756618D7F00976F9C9235A7D55712C45CA96A594D27DA3C1237C6
1DE1A5F5B26FC896697F185A123C1A8C4F2954D56B8F24B99DD5F1B638172E6A
92AC544402C80DC7D665E1DB96647C9654D20BC7BAA224CE4388D715C1F56885
B36AB435E9C8813CB052EC53F6A86FE386BF347F063DFFA83624D77474D8C7ED
C660F460F7BFF771183B302FF55667390AF2E314BC8E0EFB7054DEC873473E09
F9302D1232938E68FC8EA33DAC1EAE76C6AD105D966EF357424973E4CB70CAFF
612572834B59160186297873833682AC8605C4F1CFF61783609E671746D8B7A5
F0E76AF213582E46962647F86CEE02AC59EE727ABAE056847D34333235890AB5
EC44C53F5909C167050FC94531DBF480716F1FE7FDB6FDFEF441259FE7E45304
C3A59D0BE4AA66C14DCED3C6423C5CF3519A29C368594B7B90E07CC72DC667B7
655B5AF313C62451353DCA611EAE1563E3ED4C20245774128E2C348C03CB5DAC
97AB16CFFA3F66FAFBD0B269C85A2743EA914D7A59F287E83C08AD158AE3AC06
36BFC3614812566AA34C25C501281A34BBC6A4F3702C5279D4C414D7511069F0
D16C39A8267B043DD1A309A1F1C31BF683F9E33944B895AD1D8017BA9EFE0958
75C132BA926E34A8F8C31B20CC69F0FD12D2A1FA3458D37F8CD2E851947683E0
50B29CF0DD777666B14EB7C80CEE58DB653AF6DEBC59D7E0EF71B3F412AD4EC3
D83D0BF1564C00C405693F28336981584056D02CC030BE48814FFA0AA41F08AE
0D5B35A4E8D520CD0E02D3BD8695B3C1D4229FD5F78A6F1813577BA50BC18B93
23EE4C860F0706B63446BBB054A5EE5B9246C749095EFA75F3205EB2BA1A7955
4E8CF3E5896CFBED79EEDD6FD3B6613D855D5E17D6020D27DC30D9475AA1E948
64DF4D44198440761FB582ECE3726EEBBCA4893131733D7FFFE2E60835E8E570
EE206034708F5535336614ADF12E3A6BA5E1EEB4BDE83BE8C804239B215593CE
7D1CA1F45B06D9C952F6E026953949028A6B799CEC3FB4E3D4A824349A563D62
8BC5B81D682AB64F098E94709CAE17E12419D4535D0FEE85D7AA225FD64BFAE1
74CD8B62AE6FE12DD1DC46B921D8BAF03715FC56EA60C5A9E303A6B9AE1AE673
AEFBAB29855FB3D8891C188F5E1F7CF09A046115D45493F7A67587727B64D2D5
6419698C0CD75EDC4A13F5C35996BC712723DFF34F95271308C632D409DADF45
FD193E6EF5F8491B730E6F350D36007D19F73EEE205A47785EF3C453E6F77A08
AE9F93F18B889765C4A31A899598D22EA55DE76735D3C2DABB3157EABB57F4F7
71336D985C0C360B2F5A5877FD00B5CDCB1E57276D48633DCDEB7F9D21B332CE
4982A6E06F5DAB79A60717C38B23D7CA54BD43619A46D5FEFDD4D176B642B7C6
49F8CCDB28BD192CAF5EACC12D2733C2962C09AD9F95C4F6ADC601C09CDCC026
2C6E8C4C3F2D14A958EB919C11032728BF872D2B0E155A92A4F88A813216392D
8F9048A5B1E2FCB48972E4007A136572E6C3B7762889B76EED40845D9AFB54CA
A90EB44E4C1819F1DAA98A52B76123C04C3FB31E3D25BBBF397F83C24613666B
F4088A5E41311E9B82067883EDC8BCDDDFCB6A87C53FFB3F440CF2A3D16F24E2
DCAB6D90A41960A9F50255FC395440EE3AC0C9F6154C4A285AE94555E5B57F59
BF206737D1B3E9909285BBE768B3630876A6AED1DBFDB74A53A95C411178CD0D
EBA567BAC044B644EA7EFCB02B512A970E75328A677A7DCEF89419CD87EF2E5B
D3598EC528909B24430C00CEFE0190206DD509FB645CCFCEE8A7AE31D22483C5
3080C6ECEB0EF779707A651E8B0FB5B886111E4913F65D28D29FD6ED61D50887
0C6C620861E751C779512C404ED48FF12A46140022F426132783984FBAD6600F
B6C2EF0B131968305D75F656CAF198F1073B7BFE06EA127BA3B1EDF47BDC4E0B
C01C7FEB8A6BF182467ACFE3B05FE61A64BF5E80898ED742F73E9BD52BF79712
C5CCFD007DB1C1B658A5843F28E77309B1D0E6185370CF1261BD2325B000A5F7
DD85544C9A64BAE28239DA8BEB1A6A96E95B783B1A806484230B776E9BA0BF1E
D2545A0446FABDF17C6DEE966E51C66694B87FE408D52ABC831EDE8F5F1DDDA3
19C9560268148135A883BF18DFB558ED898A4B67731DC05848E31E91520E8F90
4FF4D138518DD564140AAB4C97840C3D38D4586DC64865CB52F7D44777057F8C
57C69453071CAC34C9E9D272BED502E97A66EB8A13012C6B89A4C8211BC9A7E3
53E233A79C4895DFF884D14BFED989FEC74E0432141A22A82D5D319CFD5357DD
A5167E3C0C1D945F10C183245F1B733C17D3B854D53BA686CF408A11AAADFE8D
86B613F9E6BD8B447E504044014B09C17AF11C0EE7473C6E028D62D173D45A6D
17B4A1D1D91611511C78CC5E8260B0E4778AA8712B2E1D67E60D997AF771F4A1
CBC2DA26BCF2A5DF594688D1714610671D39228B36A24AF084E7544D8A761549
42ACCED03A7785D88E3B6C33FDA0C0AC392A2F772A9E3D9EC530266427264B8E
FDA9134F4525B5D3F83B68A424A03533C7915059A895B9F931EDC1785CD8DDFE
D8FA29E964EAF52E5F410E854CFBF08142121CE24B1E126F46E6B3EE29DA7846
1BB8B5E850618E1D8A6B7518A96876019ACAC528744FC9A89E5D74F5DBA665F8
85113CD2E239B65D0E985B783590ACCB2C5EE09FF45F2D070A7FF5391AA9BB20
01FF8770421D5F04BA9741C4DF40D44C0C1726E6D6DAA26CD5D56603BFDF7E6C
29B69E80D205669E929607730606CFA77366D2ECD982ED8D24ADD7FF8D9918C3
39A8E8B41383665A22F3638C6FDF3A9C1A993DAC3946217C12D9286E6E2F4D10
14A3A628D302697B4125B5FFD2CB27C6DDBA4633EBFFFB1DB6A72890DA790C26
91A7456F566A8359795D6A2000AE4AA5B339C187F52630B52309834F266D7027
9AC7AEF418EF47ACD1255068A21969742C55D97F1C1B1E4BA89C1547A41B7672
59CF565ADA5011FEA13A7F8EB7D4B10ADBA185A1AEFFF7E715CFB0FEE3C5642B
D78E509E38A3CE8A943EB455322A87C1634074EBEC25F67BBF28393DF8BF4306
AF12BA45A11E88E61F04E09FB9CBF7BD172958717963AFA5FCC1C753E473E21E
B8BE0B4D1BF8EEB93F1C143489363330FE17A7CAC73B25AA22B40FE954F32340
FC82E3A2ED3AD8E3DDD108A573F2D78331DCE23EE53F5EB857A86592A78771A5
BE413542F5091FC14B5541515438E1F36DBC13E11854A23AF95CFE09EE766B8E
2272B3FEECC7E148D5FDA02F3A6FFD57952A846747F55153715473FA5E181828
A4C12A71DAE2B306BFB8099660B2CDB5799972AB6ABCD46FD5E647C809A5BC94
F10C28976ADBB674BC51833FD726D168E25ECDFDA64CEF6CAC90369FF71A3EB1
6EFAC41D22D1BF4B1F385E73BAE98757D532FCD5AD3BC6C90DAFDF8EF8BBEDA2
E3BF98BE634FD17B2A2F4306AC9C0E2C687D1D9ACC8F020A45B8D17CB74BDAA4
BFF6DAB5380CBF6172F37E14DE2A56E4CEC34D583169C4918F791067417FDD31
36C24273DB8EA36A61BB73ADE94DFF249763950EC9D477EBF94B1B997B5F1221
071122721945DE6356BA976B0C0BF5A6E689945AD1D5EB23E4F322BFD82BE007
D82B25AEAD7489FC2A842A1398CD00188333431902E82B66A50044E31E441196
011D609B32C5AA4708AC8A56474AD29766BCBDC41758B4122E88E548D22E15A2
087B61FD6B52BF54629AA70CEC4B9A451A119943E2ECB4304977DFCADAC2B474
E1C4AE3F7E57DD7A49C196B9D8755ED0374059EAEAA592F499107FB92E22D070
71D76B34DBB968F006616C82DF89CFD601A78D58CF2BFBC4B1D57993B1112222
6756497B4207C6D3173ED4A0A7FB5A609F0CBC37583DFA0AF0A53861A009796C
15E07C79096EC5355C4A4BCA1FB7AC7E65D5A5D8C5FCFDB41707B035520A5B64
E984AE49B4054206AF4126A23FB9D6936078F7F925BCBB2A75EB16BCD26BD752
DE5BB21DC9C7FCBF815D34F41FB9B1973A7DD95352BF1532EB87DC7346FD25DA
5637630402E7895F3C8D5E18DB68271F9A0B3BBA37E6285F2F489300DD7B0A0F
8D3ECD1B056A35C37842C492DC0F51BCA42C273B2E43D80211136388CE2ADB1B
7390B31E21B6EE0EE9D75EA112DA1C60FD628B806D89E773919FF1DEDA481022
EA9EABD50EBA3FEE1B5E52CAB31F8E118A35588B794EF9FE03CDD26508432F9A
CEEC0C86CE85E9FE86D243B72B3E700F97E1451C4DA6A0946805D740A509FEAD
8D88BB59034060C90D2A1B932C5284AFF5AC01D0866C190439A0CD836EFF939F
B12FD026E09A805E75041F750B32E2AEDA32E97CB5A3F56B9C5CA6F07F605B15
7E7B53ABA05461DA40B675F081053377364DEE8430C201776EFF8C4D4B6B7A4D
7D18E8F9AA8DE19085CE0682B3BB7F5B0B954E7078DE3E31D8AE65F9EA55FFF7
B98B04EEDA1263577D0D75215866236E5FC6C284B501FD9653E80422F5B5B56F
6D2EDDC1A7C76EF77C6E76E4609FFA26F1D282EBC19257DBC8AFC1D266C3CD4D
3AE01FF8BD73148E885B22C95FA78B9E9B4E4483DD252CD6F051F55968F63A85
07C386FCB705BBF46AAE7CE338AF148150989F4B398FD87BC27EF47166DFB2C2
58B6D776026ADB2182BF36E33D367D772C362F558A7C97771630F22E8E5B900B
8591E0336E37BF4D4D9CEBC3315ED847FF61B999C85AAF3A2346EA93FE7B0441
4B71D626BE66E6007BEC5BA79B849449A58453935004FFFC8F5B1F8BF35D9358
45C6C60B016DF15669B243300FEC7FD79A165D00E72B2A64F2F989A6D7AD7C87
5D0E0E051ACBDA07278B838CFCA83A445FA0805AE960D06C87661AE6FC68A96E
FD1C4BC76E61923EB04DB1DFA426E752C197FAD614EA478C1605A709DB9A94BC
08D61C1A6E98311D9DEACC88689C8934EDCA599ACC5C1EA7B60FB79F8113D9E1
EB35E6FE57C59ED52DF91DF9A97F17108D4EA3AADF354F8729EFCBD7E8A707C4
DC64731E964C0A5126645114F4E76C57B6AA7F5B3BF9B315C9C46AA3B83C633E
4734DD6534B98100C8F4D680C94DC3C4DBE573678A57F233745F3100E650C895
39B2AF2E61A62B64A00691C60D994923B8EA6D147D264E48E69939FDF48DF49C
BE4C7BFE3DF2BAD0740A8A4986EEFBCD407D7FE3FA2545677E76418C7182673C
9952DAEA93C241B03791FCCC1431DFDB6219C9B1F9D62740A6C1E4ACA130DD76
A67920DBB796D6C0C86D9C66ED01B85534A1E39BD5C20DE216B3337F7AE95EA2
F774F5881E3AF035A96CD83831472E387F874E7DACEACF1625BDF902DBC4062B
E896D00A355A1F8D95AC8B3F4A263F48263C27AF5E0D027B46F86C3BB3CEDD19
4A97EABB75E62FBF30074B701B39665F4BF4139BC77418D617316E0556037832
78C6ECB538B1BF021EB86EE3E5417D1B42DD280C1FF9A88656A37EC8F5AC9310
441AFA10C69AD5034FC9856112429267999EA35488214996954AE3C94BD04AC8
54BFBB3D873D26672DD8BA3896C6E4677E7B9C335167EF7528F38861F2C51F5C
F2E67F4A0FB2D029B166D01B44818AF5389329FE1DB14257D4FCE87B674B174D
C6CF1ED0FA43374E288DC93DA25618CB197A7DF573B91E5481522C7E5449ED04
9CDF2B26F9AD07EFF1919E9BA90194E24A69649F0DFD0046D00D6C0329D96C03
7786FDA53FCACCB9944666479515F7BEB0282797BEC19164512C80D1C6E8822B
8F54C5E48429768DC8ABE50C7EB3E593318BDB7669CD8740019C00E7D4FCEF38
2799F62A9A8FF8262E8DE16E9245C61CF4AC5E28330B2FEA765B68E59E5DA2FE
5DF61D3D56C1B76A3F4D15533971E855DE727A53B5EFC3A96E559D73518CDADC
FF8C54171E3379E1A86B0079EE25B86A0C5C459DCCB199E4E4DA535522CD9B9E
BDE34A75C83AF12497353AA9BB78993FA94BB7CAC40F7628FB106D44FEBCC292
985CE265F1145D3B1428B90D09A2EBC928A7F45C2A124DFFC8BB0B9B743486E0
A343D68682DDD7E10A9FB460C868CC03FAE8A0C82756B94420EADF6C5BD8BA61
BFC735A6BAF8FAD751BF26B2493DFEE44FAC4B0288339752B62186878ABAD0E2
0B2DC4557602FE6F058A6045910A6C7F2029FE2439769D67DEBDC8AD8C861E90
E5322CE77172F5552D8020421EDE0D7F672F7547E91060A481227B5173497398
D5059866ACDA6D7CEAC92998DCCF249ADC9FCBBD8F6DA5C9DCF1E682A24EE12B
834A6D01EC1D47C56D91469EA758F72040FB71779C25E2709855D7C3853B6818
DD0CDAAAD67F1C43F8454EA7BABEA8C3C568D703C8994A078ABD9F42C5727A1D
DD62734BC08597D25150B173C7EA7ED2705E70F62B7A1CFAFDEFA9CDD8BABF64
5BE24281BDC1FD61013AB7602079B3C763CEF26053F87D1216539DCB188A5344
55CF1DDF844B80FD96B709E32B2CA8E867D68BA9DE568A359429E8EF0DE1652C
CC52DF4A9BCEB4DE7DF3FB85FBA15A1D1070FEA87FDC29178F405B52C4D828BC
4629665F1C31F622A6C374798787EF2A58C54D8AB7580EE3ED58AEB83B72CB90
2DFDAF4519A585B0D50E05208B6D2C68F8CAE9E03728954E1FB5FC03C43BE397
E8115F3A0C322EFE02904D82B305810F45687480ABE94FC10E58E85D3F17430C
320B0E3DB01236E42B64F1DE8F7B8246C840F68A08DFEB68B3F6DD0F4BACFE7C
DA4FFE64DCF7591F16BFC51EA0DB9E8783AAB17B920AAB6FEC1B5DCED2A63550
6B1FA069853FD74FC736141F03DA35D68D91E93E80203A62ADA5F52B9CC3D5CC
60F3F1A0E8B2BC9AFD5067315E4118D72A79D1239DD8F4C884C4FCFF3AE39EBA
1AF456752CA350877F492A44B7F43E4219879931BEA2B95C7510EA3198FB4C95
B19DFAC99E611405A28A8E35244CCC8904BD6C4EE132B6BDE1A2038CCC141F0E
9803BBF7BBDAAEF0CDF1DBD2166C4A311A0C52ED00D2305C70A416567F5EEFC1
9867FC2D028D1969F2D9369CAD8E757BA5312E5195AE5A15AC46157BE30A845E
BEBB3BA89C638A1DE7017B539BEACD5CCB89BA3C73F2196C7834B1A544B12F93
7233AB1879BE9047DA8EF83926C442562A6E5212A2A2F76DCFF12F4EC5F788E4
6EFB2EBF78FF44364DAE6371A0970CB8F6C133C983A7ECD803D12B728D604E22
76DA7B81839FC5862ABBC985191135F0156722F0BF1DFACDE240AE9D879E84D3
ED2E8B205541195129A01DF4507E0BFF209F6A6966DE25D75B644AE2C16B4637
27A8AE10C4635DED49C5513696E3AD894BAE642F2553ED0EEB16F25B7D12748E
3893178EBCAE7F5E1C2AF64EDD2073883DC956BA383D0E1CAD73425414B54116
E310D38F7CE7F2D88D0B57DB8FDF8A6088AFEF5FD1D7F8363E5D0A84FCD27A51
A20AB170F8254061779E767E4CD18A44A4D917FFF1A4A85661E18ADF577A7AF3
5D41A333B6E5994294E0F438587C80FD855F1733F50F636A4C7426584812DDF0
30735BF1C5976FB22AEF42D03E33DA209123B6E2B2E644AAFC582CE3D91F40AC
5876B209A2D6857D7C0429A4B80BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4
BF43D5D228464CC0864DFAAE0AE7F9B73802015614C10B63A39F0EF60D11E54B
7BA0471056B021C03FB2A2D2213D2BD379142BDBF2005786A34AC58D500D4272
8C7109ACCE4DF1E45ECDB7329F90BB064E90631978245ADC0EC001E8728B9458
990C7913426DEC6B5C057130D3F2F5DEFD97E415393E6B62F58F9DC86556254A
8A71F70C8A19D4F0C2DF98D94298EEBD3E93E848FDEB52363762FB9C796E854D
FEC5DBF19D4E977A07A42287A2DBD42A7E9C4E7150D0967F83E13EBBAB335885
41AEEC0DE8C53D5AD2D137F87752CA18F8147E983175FA450580110EA538337B
A0C994938ACFB5FE284C6059B3CF4542133E08486E01713D3B30B95F41BAA048
90239EC93C0C768F22837B57BC905B9A03FF4E214C11868573EF0809580742A1
C1CF1EE514D77041F132E00B13A76A105AB3EB6E4E14E6EF041492ADB51EC95D
F8E053F2DBB854C4BF36A61AFD09BF804BE0A72AAFE74199DA8D088056F1F132
392FC3BCF2FACDEFFEB144E451C6F8DD0ABAB19C9AD30E72269944B9CC67F7AF
33B63A06B6CF52D85F449B56C809AABB0354C2C995CEF3B811A6A753C1425308
9649CA3375BEF479A567BAB3764282DA78B388D27A6DEC10E6AF2C5576BDAB08
E5BFE1A7FCCE35DAA893E5CB7EAFFA604915C3734157442A161BD5A9818A95AF
BD19A49655AC7470BDEC95A9AB4C9D9BDD58FA74D12663E6DE20CECA61B06657
64B326446A071B6F2F362D222A5CEB4FEC7C1DD031BDDE4595495A365F434AF6
C6F50100F197836EE6DCF166E1670F2EE9B93192C92AB0367DA074BDB864FC37
CAB297762FB5C45277393235C450451C550EE09346609B14C8D1F96356661F43
F7ECB1CF1480CDFA74A4174EA6111333F510C73CD12533D3F6BFA0FB13B42929
29934B35E2E80EB89F4782D8F34A5DC8CEDCEDEDD9D79BC6E4677E7B9C335167
EF7528F38861F2C51F5CF395A4811AD7326AE12B896F411E09C15B0506D1F805
57CF83CF8A9FCFE2C2D547F1B703A410FDAE034C078C74E899B1D14DE9BB73AF
0AE80410C4FBC3A45FBE3BA447A01074773B6175E00D6236F113677A591DA699
2A609108F7AD04E9E3B9029AA4C97ABD7C2068666ADC003C5762A4D4D4E5B2BF
51908ACA6489430DC92FFFE690A0DD72739DDB5E76905BDA40053AC0682B3DA7
C3FE91CE83F9598EFE43E5DC858AAB70CC2F2DB52466AF31CDD0B381B56B4B65
7DE23503184AC5C0E91046F1B4E859D84ACE768909303FC1F7F0EC7DAE571D60
AC892E217669442AA04092D1CA9BE1635F769E2AC1459B0B3AC1DC117C17F73B
894B80512880391F89EC495EC8F05B5E06C7B9C9B5B66198ED9793D2F90CD7D7
9F27B15F50FD125C5CB091290554B076E8575ACBF0888FAAAF03996D966AE204
50BD9A0594D1CD925DDCC2EC217BECF37587795A45519352119833995EDA4207
BF15B4BECF94937CE559EDF126139431FA169175574A1DCFC08C659BC8DF77FB
4126E5E1FD98697E21F7AD3CF2FB3897152B7E9F7C4C36B0E8411AAB9A60C2FD
F1D3759ABCDA9DB4FFB4CF7050C1C0931207960C9BA56892999790016B0236D7
19FF67F34332845C2D36FFEF17DC8428791C900E377B78459F634B519D57A88C
79B55D644CAB29554F2E31FD6843FB2623FA30319B8C68F8F7DCF39E5FF7ECDA
E3884DD8E25C453F84FAC7710AD0368D542E8A629BBC3C6E2D85EB61B2246755
E05EBD8614AB2FA897E8227A0BD7526BC82EAEC2527ABE1BD6452AF6152EE973
DD1A12AEACDAD98781290F508081C26CC9090EF0D3BF8F83BC3E3DC359292552
C665F81B1E9130A495AEA05A67845C005021D5C2C802EA68A34BEC8C10EEC800
02C330C81431E79A54453646F4BAD3A827D42FFA01150302010956C520A7F73B
FF0828548474134736DC80EF55BB1D5A1D7873601B658CB3405C900AA958F922
C67A363426C03C53A0FF16C095AF85F92849EFE0780FF6379CEBDD27A9EF99E1
2AEA1DF4FEE70866721B078B8F755965895E0FD41B45FE7A83AA01B575B37DD1
D9B0D453E3A73EE7A34FEFA566FF3E3C777CEF27E631A9252EEA25BC4B0F86A0
34F5C5839ADC2778A20B98D3E011ADCB826685EDC4152693AF755E30B5C93C14
4FD17EAB19CB076C36396D4C7506C6481707473EB703C2B27847402CA4B68582
7479170AE4CDAD7798176EFC2CCAEB2DE003E4825A689E15BA0AC798277FCE91
F39076EE06BFD3C04FF933CE48AE61ED5C7CA66EFF5490E5C45D2E2FF381528A
E3E23D323472F5F6C52E4BF7B7687F1681D103D7DFC415017C2E5851A604187C
52F372CB9CFAF7DA3CAF003473DBA5C03B5BC20F578360B58E240BE1E941CF71
70EB90C3EBB3655EE2C25595487C7FF69DAB764D521EA0D98F68FCDB34504BCC
A0358D068EA5038FAC8EDC241DC3360844AD12B1FE69083297414ECD1FEF7353
2047FB1478F8554CC7245621B0B4E522B5C87DE1D975B08CF8EFAE3CEF3EF3AB
B864CC6E0E7854CB47132679FBABF1DF31D16F8FA295CF9CFAFF41E8E1BF7E9C
B02F2E46976B514E496BB4EC03B0248856814F1ACC4A7F7B5754BE7FCF01EF9F
F989CFCB3FC2D114FA43CE0B06A5B8FB130A3936C4504264C9DA84C491322656
9816BFC2FED797BF3FBF60B3E0A4BB6EC498648560D837FB67D3FBCA7A93A80A
32481524A8A8F96D5ACE6BB9D75F9EFF928D2EBA427A287953A4F46467D1E19C
06F9E6851A64BEC3F7869EE3181CE8AA1ADB7FF9696E5F3C75320B4A2FB4C322
929A703A21EE0BCF441E0C593449E31AA562B4741A6B88834D87621FE67532CA
6807D768CFFAB4CB966B5DD8436D1ABDC3EBF5DB1EDB29B450CB97033D8FDD00
E483763D6F1B6C38D44FD1C3AA3F46E30A2EE663C2CC64E2DA3631AB809AE302
494A7E49825D19519C5EB55715F8DAE292731C7375D3A32B38BBE71D4A8624F7
E5A2AC0BA9E61AEB6C096592551CCEDD11F7C39B765BB942E979AAA1DE3496DA
AD1C2D8CE52AF94EDF33E6CC70BC0E96636EAAB676E72268E354583C310CB92B
3ADD040C112D494116773DE95F3583A7D7DD69E01C7636A79E102F70889BE3FA
0347CBED4582740BDA38E755DDF36B38BC481B7EA2D35D335180E020692066C4
9523AB41242F1D916ED69D1B7FB6E9F7D418237EC1D81975029926E349F11512
89F0E62B89F49A28410C34B2DC68CB0F03583DC0C2243A6156F149D4012A4A85
C0DFB2B43B0DE7F4966E008C066BF6EB9885F52159F34F65E8FC94DCBC1CA521
E7D5EE19CE509DF12F7D1243257B02B8CAFF2AC2FB7868A7FC61E6AD28A4F84D
510A8181C171816540E61E5A2E2947957AA9A5029A3F8B72B95440914969A1F2
D001A5D7C9A8DD9088FA5AFF7A0BB1C59B638E677A4FC26F9D9A17F28132B96D
EED074627218388B1327B6AF6AECFA67902D0150EA260E3A59FBC65D5C5FFA73
F59AE22BC7A9DE94C8D7D03375BA6DB828E48ECA9018B12EA9801A93F1D2EA5B
39A271E658B5B785D2AB6863AA16D6C4C82EE4AF7AAD795A29462A476A1F590B
805B34FF465AB2A6DD504A9B6D76B0A32308D449594273440430824210531E56
CCF19896CDE384947A14739733F9011788FF8C76EF12390D590DE20A7AD74404
2B565746C211F30813630C7EE7DC32C68653D90DA82647B305ABCBD6C49ED9DE
E46462D60B66DD54F01ECD5C2CED3A0113890BD4180C41990C4DAB1E1790A040
F61BAF86BE97F8DAA8326EB1A2B4511422E7083634A6C3F19DA92D2CBB229D22
5F1D15AD5AF118EB92BF97B72A12C91CBBDB13FF3DE31109B39281A3A074642B
65CCAF94A1B90B32120ABFF80827DBBE528FFA92C0C0936B813E3BE2A9303C57
9CA1031E1026549AD0A51EC74744F93ADF8FE08B4C8BDE976D18C8F669EFAEF2
6803FC87B005448A17FF1AA5117AE241375DBC823CBB9EF53FF8CEEB75F27704
912DAE1A6C7BC28B453E2C743C24BCF8D8C022DE69C7ACF5B1650F76FE6DC6F3
84511EDDD5A347187EBD08206BC159C15A7E092823C0974392F68A90D099C469
97D776732B6E28AD43B4AF4E9B8C56A71C9427BB787B0093D479E6B8A32EF8D8
FF10E1BDD0F7BB36DC526A055A24D50725CFFF28132E3F4B69797388E9C41E42
E659F38272971CA56C1ED5A5CBAF568A69608A9B382820E52DC90F8BAA20A49A
D863023AE1DDD067F152B4846CA9EE3D37E8641DE801976EA3C2E3D326612EBF
7270954A40970B0E4652883F787218F676D60FD5560B7E86F28B739DE018177C
DBDC528E02E2DB1D249256E80137AEF3052ADB2122FB8822F3A8CF410007FE65
21EFADFCF25B3A4A4FA49B9D4E948DAFC6D5F59C767DA2F4A2EC151672E3C7ED
7A9C9F6F00C4377D8DB2EFA4A72E59CCFDA689071FA41F9EFAC8139E3963AC6C
36052B357CBEB78F3CB2C8D57F390D6B7C01D5133818B5DB2339C0319FCA7B89
ECD1F158395F827E7D0F283557884686FE959DC6828EC9BD7D7C5131B25E46FF
00FEBC334095CC94E2FF2AEC7C25AD67D929CE8BE711ED480CBB8B9E59E1BA50
EE757442444B13B230A951284C09101C02EF689C89D1AD4FEF6BC7F7D7F83EED
9F947931149B6CFA3CC38C1F3D1A7A800E6B0C5982FD14E4E916D363E265322D
FF8ABC95EA5B7AD60F1A5739952A1400A64CA8F39636AD5527AE51FFF051896F
B41AE222DF8A67CD805EC55121FC085013D121FE71C19584777E6CA510A921B5
0D54CEE4EC1076149E59A402E89436B180E0AA2FD9ECA512FE34C2D1813F2999
4C0DB80E2A361702D17A74BB6D272639F31203A0874F316D4866A67494454971
EEC388BE1AA79E424469B71A5D0B74CDFEDD9A3CF51E1C548FA50EA75467CC5D
C44CABCE007177A31667A39F30F4C23648AD4394BC3D3436444108E2B109CE6F
F6520B0F360A1DD50E3EE45220C14E2056B7687CE624B6F3254685944CD0A685
B76DC472FDE853382AA3BA671B1E88EE91D63E54B888E4F1B7FB089DA26F38BC
76823F5B4A00C92225753B66C370B6EF2393B15EA8BC4D582059B0C70084C77C
2D7887B361297AE1D1E38DC82512E4336F1794B2389A6FBCBB36B4B1996CDB1B
3C1B48B24D078D6A3956FD55B35069644487B786A62AAB8CD0462888DAD4BFA0
2BD6C593751574A23D8985322BE1CEC337C452F6E90324DD03BCE7AE6150D8C4
BCFA2CD6AFBF51F39CC8D124211776B1C668E287C730A9179324765A433989FF
CC7454C6A5B6D7BEC0ECBDA830A9AC4E88426DC433391AB62250D7C4C702A0D4
5D431019AE5155FFF7E50BBAE6E3FF6AA5E6FDB6827637A807B4A6E18CC0C894
400464219578846685909845C2A0BE9E2FAA31EB86B25B6F4766BB606E873315
1D3FDA0B3C640A5F6DB268FEB24B0A89BA66AF4C084F68CA1024DBAA53D38161
D33361D5D6CB27051D0A45D2BEE293F0C027A2BBEC86703EC4F9FC142E94068A
CC9773393CE621A2794009D7EE630434645AD290F47482AB1E4868B8F69EEB21
40DC00FD5F6F1725AE16D44B8FE84C3E122D49B52812D3CFECE6C9A7CEA474FA
91E7E0A6E79313988335574C3AEE308EEF43FEB47E4D0C27FA0F00BD68033590
412281F8D1A0FE7F247E719C14C356FBB3BED18337DED31864D76CAF5B4CEAD3
62144BCFDA00F2112C18842596C9C9EAC48ADCADD60815669187FA5208E2820C
0A0AD4AD1DFABE49351B4A5FED8653126D29FD01407126D3973FE22CD3AC4F6F
BB0AD7B9689FE02665CFCF412B99167152D35BC0E671E657EDD871DCE85CD246
0FC8F8BA2C70E744D0C9ECB5CDFA5812B81AFFFDD9DC994C11AC11F9038B2B1B
5F0771332BF0149E7CF1D47DE4897284B2FFF95A8A508A19C3281F49B3A3A928
53AE7AD9F459C54082DD302A15ACF17034C74DEA93A04EA90994D3233D447E8F
87527C35F3CDE94D945A7D9305BB2842A62135305EE3E7939BD37487A1943510
70D82EF9BDFA1050241CF729E9F775DA5F6E2EC0726CD8CF181840D2222305B6
302E0FB18F35B991EEE4FB67CDAFA2211A90B0784BA3DA59A7A8C2289A70A0FA
203000B8D5A283E568B7EA37E0B7777158E4F3304BF81A4996474D99E4B23A6C
8A11F098EDB80F8AA0E9EB7CC504A8B2EDA40FCCD2284A86FC797DCC1F99EE10
677B75E6F729E7E3B9F57A1CC5A228D37AED24A6B76E20BFD980910C422AB63B
89F8683A835B98A1D4AE5D9CA434A535EEA888124AE7211A9F1C30D13BBBD899
E1113DB8E9E10BBE2AAAF75FDFAB38E1D71D781BD8282FD2969975CDB303737E
0C48D43BF414A6130DD97211D95408F88F138D4968B83BBD9D170FA3FDB59152
08CA9D59E85A01FC3464C31224CF5B1F7CF09A046115D45493F7A67587727B64
D2D560C20E685063F07283E49DBD9FA16BF277FD32FA1257A493E57BE2AF933C
AAD62190D61C3F336C8E68585AB5F169775BAD2311EB21056C4F23EE42FCF25B
6F007D2D8CA6997D92D39D5361B2874B19850772C62EE452C200DB66771D3F3B
7588222674C1BA557F639F2EE9C0FA967E7FBB36FD5DF14B96C1F5D03FB3F17E
16B8A3086A1CD6490EBFFBF0CCA7BF4BADB8D4AE414A1410886EFF8D53B59C01
6CCCF8AE794B156F8A765F5298B12F0902609BACEDFFF998B96AB3E3E182E29B
819FD861E52B04E00D3309BB23114B9CDF03235CC96E832A27D6D3F9F1E0D383
5D2DD56FAD7828E5E203F328AD955AB433987B2292AD86A92F74C72430C349E0
C6EEA3B4835A64DEE8D4B88E62CD236543FD33F885D1054A54F70EDB1BC66DBC
4F431A683D624733533E20C1C713275D8CE147553296D7F744110D6F907F841D
095F090BFDEFAB9CE811355328ECF237C87BB9F989AC66AD86B833F24A232CDC
0C21623FE7F153EEC4FDC93D0FEEC724C9AFC18168AE7D0CA2EC749AAE53C60D
E5EE3A1E09CE2A3246B9B5EA106E3D13E31306FA3F81E297E7AEA353F541E65E
D3CDED086CD1D0E84ACC429FD2D2BFB9BB504FCC2F01B128F18E12C3CD0B1528
BD444DD1B0EFDAF667A918171169D8669BA32E1098F3DB66448653E536A3D893
86E1431C515237537073EFB24394FA5C76CC0DC9DB83B6F549C06ADBF502163E
E5F52612CB8123A4FF2E590AD47310066954EEA70C4F8F3F48E9396DED9CB157
17755F0C024A35E01FD1E8EDC955695970C7A1BAF6614606243C6256300F7270
0871CFA9672BDF5356746638CDD9FD68E308DDAD119126C2A589FAC56B303CD6
3E243AE47A34544330A9A8F74512626F2BE1339F28FEABCA020520722A4B1FDF
756371B21AC9F5DD453B1D3838591BD4A0179BDDE6524A7650DAF45E4333E3C9
A1BBCA924112AB70B4B0B833759AFD8D16C3588BBD6EFBE783A69AEC785315E5
B7C88DCD8D7444592036A2427850EBD6C17EF1545EEE457EA16788B26DCA2624
7A2D23E1068AA8DC7910808480E693C039AA78C33E121DA9D4AB827E616E7357
557C23BD636619D37DCB6631D3AF2D287EFA3B3678FD6C1504519AB7E2EF071A
E01994A1D2DB43091DD4F243C92BA6B1708CD7C0CF2B8E9FC3FF3B65E9B480E5
9D1FDE2AC1E4843860F2CF41C075C4DF19A0F0AD8A46F5BCC2BA12C4D6813613
C0CA57A43E7425065D6CBBC712B23944236E56C1795D4F2D6944A68175A65651
4425E96DD970D81D49A195914EBA348614E3850F73A8B2C5B0AADF8AF3E1C974
E069550EC066319191D8B1E41B3BE2BD081CFB9BE4B8AFBC944F2D68A0540739
86C250AEE7D19A988E0801D8135D9F39D09B833ADD6D672F4F5653E2EA5BD629
2D2069A1622A152E7F50F635221AC5E44B710EF7CDDDFB5AB37611CD728B6000
045E87CC401FBCB396633C312BAEB63990C31F1EB7DA809BE9F612EC5426DB47
FCE3F28096A95B9ACE24B77BBC1AFE19165F8F14BF4CEFBADB2725A945235019
2F905F9EFE36171716B8CDC5E9A92F5BD3EBFA4DE86C497987700E9FA4FE3314
95BAF2FABE7C94EDB0AA8E432CC2BDE47A570DB69F2D620D2FC177544A6C425C
ABE8D56D747D1F82D049A388BA80228DBE62EDD18DAC476DE8F8ECDB94457791
7ADDCB2357B7EF641B63E7A29D362DB15A78F827CB355DF27D9CFBA857FAEC97
BB2573C53CD1CD593D63DEF775C95EB9C5D456345D3EF4E343604CC9B5C2E852
61C5021D924A686E5E182D930A2DC3691654340BE93B8E8303EDED438464845B
950140ADD971D94571113689C17519F4F3AAA493041F5EE288F248EC0484B3A4
671A4AF573922D798DB0749A09F2EE7F6697E406B507D64CFF45481E4F0C278D
0846106385A467706AD812B80A9FF556D5B98961651FBD1E1C8D769B4DA1FCBB
735FE0E5C8514563A6D6B6ED44BC10616CEDAC3CB0D9BFD4316F9FF03485903C
00361D3E72B126ED17CC167AF714716CA870E894621158C22F176B3016360797
0B04647E76590225C2A05133861783867EAA0867AD50B7ACCDDA8AFC25E9EFE8
DDD98B55CACEA45D4046B046D2BD09D8972BF73EA432F2B385D51E598AE0216A
34D55E97DD9B83EB8ADC8F54EB151A227A6A71F3D480BA152D4448D4AD4DFBD0
0CD573E9BC4B9FB3639875028E065F9997AC88601D52D27F511B1F01835DCA3F
A88A475ED04DCCE94CB08C95BAFCF313178E02D3BFFC709F92ACB6CB2BA47A5B
D4F2A9F1EAAD5C10BEAD7E583F9BC1DCB1EA3B8DA7CBC728E96C569BACF92904
78CFDD203BA47E66E3B89321DB89865CB602D83CD2DC870E1AA53E3712C683F5
6B2AF4808ED008C5C68153E7DC46ACFFD931E36D7319A3D9B9CB75F6A629F8E8
BF6E71A5FC99EAA8217B737FC35A8426959D4E9535169009158043FB25B04060
6939A699ED4F64E5571170F0FF88DAB41C38FDCC677897A409CD8AE0F36B68AA
8C5FD2E0E871DBD2628AEC086C040C93D5FAF5B4BBEC5416501276491B79153F
8DF73B98D28EC167B3ABEA718BF706ED33155383EF6400CDE722B00F68B19CC8
756AD1987C4A8477C26075C8A819E2C16E654D364E358286E5773C33649081CF
715E6346892F78C1027BA442C95444525EE89C8DCD0D60AF90C8F43E8EEA64DE
714E59438AD980E0B1FFD51EE19692ED60A084E093B5A24E49740C2B0D1133B4
05FD0DDC423BBC17D0F1241E39637EFDC805B266B494001747473ED6CCC48456
0A971E20D13D14FBDC71D6F64905DBB304B08B0720D4826480273F47C2A67F00
C609E89DEE27118034C1898171D61C586026861AD5B6F039B09F94B5758DE802
9D0479654DAEF4707A8E9378D24FC8949895D672D56022381A51DD43C6B44363
FDCF69CD663592BF1214E748F867F9F68D7637DF0982785DABB8684A5525C6D2
38495869A65EAC76ED7C42F48FC144EE377D810BA79028D164F650E5565495A5
978375ABDCD02EA24E6776FDCEC3F41BCBE74EEC946B4412B0398A980FF85A61
00CA4BBB7000140863D5E14C5C8B11895AC0E79C0B211C49E3B6FCE84254187F
5974B1DF0E0975D5431D458B54630151B4E869D3E55D11D9759587F283DC60A2
707EA230670B81B3F20D15C5FC1822BFED3F154290E260A08980D2015565E1A2
26D43021EFA91619589B3D213DC74828CFB4F16D8A110710DDA85C1C163C513D
25B9264E3890AA419A84EC735F63CC8A90417E80E396349CCE3D47F08B9582DC
381EE896BBE7AB8209F798187BE85B570F3AB14317AB2936FB2FC5B96B4DBD28
87DFAFFDC16ACC01828A877756AD5C507C4D9306DD8B5BE74D2881CF976174C5
FEA0A5A818D08949856F5E9BA08E97275AA6D6D5634D8AB26DCA26247A2D23E1
068AA8DC7910808480E6921C1EBC113A4110B17E7A2D7E4D7B9F3C55F19F4663
A782E1C79B52D7003FB0F27D5FDA349D52907413D171FE620932CC36A7FFB12F
2C8EA399F5B8013486E63805C16FE468C6C3AA0F4A29839430F1998DBC99F4E0
35A4410931A0AB5F2ADFF816D65619DB7368927E5B23E1025944B070C2061BD4
8E6FB8014B7D771C23CDC5B31FA66AC484B652B00C5A00AB8705257A86E59953
642D6C2D216AF3A3B18DEB2BA9A1B4B8D8EDF6B4C901B8CCF101CFA58072B9E6
D6A900BA44046812884F2FEFBBD39715F562E5B3FB059814C123CA62478537A6
492B618815B78BD6BC3898EAA4C17D53E4CFC681A17DC79899EB338C05DCCFF0
343DAD9AE4036069B8BC4F5A8CE06301E09E1696042C84EE337093F5C8B64F4C
CBFB12C66C8B6CB9EEA70AA45C0E6C112F1CD5A5708C65CC4DB4078D6097DB02
E22E2C049A42A9F1E6A3512C0854EAB18A0ECB0B8596B97A94E27270B41AB705
86880A7EEB24A6834CC1EC9F4CA4B7BB62E18C43FAC3093100B9835B0D1EB4B6
F3F265BFE2D981F02DE8123781C31E557D56A54FD3546AA16481F1F3C0E9B2EE
CAA01EA5C1DFEC6681A641428C600D223056560C55438755D243C5F055EB9D6B
C53300F955180BEB1725360319CD3B6C808BB29CE0999C0814468E950A51B8BC
5DA5D6AE5D4BFADA6A5F92A1A038218B60F1B84C8EB9A567928C0D8F063F0FD9
1867BD212DD5D953850158CF3C78E858E34B8CFFDC7A128BEC0941FE8CE2EF30
182C021C7CCCBF1968BFF32DF5977ED676B965D8D4E2DFC75C0F145FBEBB4846
6ADB7CE834363AD4872A90D62328EF718ECDBFD7503A0750027042AE2ED09B75
06AF66467C135210AE637F9D491DB422E2CF3EDF873F59F8A6A02CFE7365C3B6
0CB191ADBD1EFF5559DE649514793A83B7CDC6E6F044C69648A0320DA6B8957B
3C2BB020C5A23E03EBEAA640CF23D89D1C2F0FFAB209739F476E455B01C64FB8
9E724580B4CD7ACB9E6D12164D0EDC6802C21B5561DBC1B19BFA4431E2C56478
965635792566996593C9C96C42A905ED43CF57288314339C97436541040CCFE0
C249EB7C66B766663913C8A0B373A02C1DE8BA3457FE240A987AF9575F5BBDD2
75855F8D85635C555B6473652776F685FEDEF296CE31772978CA4ECEA03BAB62
58E19FA15B2BF1F6366EBA112970A4E5E1DECC2A93B482ADF9BFA9BA653CA71C
9BD82D057A9558ACAA88BAFEEB7E3C8132122B802045C00FA6B862BE8668A720
100CC4C8079BADFD302EADA542E45E04E553AA2B8D5AFB7AE91E3ABA2784B9B5
16FB6272363D2C502F493A637E055EFB165093E904545A26E9C5B2E79AA7CAC0
6D94E602481654E5378C8D137E3A872753CCDD934A4541BD0A30AC10E0ED4A58
8B743FC5E5088E227046EB4CC6B6717E8B794AB2DBFDDF3A89648C906439ABFF
3ADE3CD408714E8E7C016ED719D6A4D045FA24AD8479BC2C42FFFD53ABAF7ED9
04BC8AE20B2B15F19F8A028D6F04065EDC0CDBC6826105C83A21B927245A00D2
90B1A395BE82CFAA6481E021CB53EC320AAD6CECD064FF14DD91A6BCF7C05A89
281F249262CD6AF153137676F6B7EA0E8CDAD78E42F9D49AE24D11B9B064801D
47F41D9A1B1E27E4872057819EDDD0F3409F4C6081A106519D663CB5216B01D9
16D41DDB32513DC4ACFCEFE43D6B29419494F97602A69B85F86AEC6253DA395A
55DED9117280857E4406262F049E69436EB5D87D41C8CC50E20C5299EF1DB81A
77C19C9BDB4426F2E6E52F6410BD76E44F0F3F94A9775E4D26BE10DA6E3DF700
D4D23CA5874C93DD478E4EBCB96CE67468ED160438641E71D673717BD0512B18
17C9199521DA6B008853A9233AB0689882BAE7385F51CA73EDF7798A4397FC6B
28F7DFB72F5895A6B2A628FB482E06C093E9EBE22F3B9FD5B28AB8931F1C9DB2
712EA6E109CB0C7CD17D94D85644B1EEF3318B83BC721D747443630B04990EE1
BE9DB5764A580222B2733BB0E0CD0CF51DB674AF26BD33890BFC93AA16A98AB2
E5BEE1EC5790BB489D4D8AEDC50DD70E91CA633B2AAAE1A4227E2378B9B632A6
DFA876D07D416DFA727907DE4A92D008A8F4C76C5D597CF8BC3262F3231D1EA8
6607CC7EE79F2BB60C5EF4AF15C34DF1C39C38F2C2F487CA8BC0696574F4D977
84BCD075EB631EB9B65106E140A1492D6F08906900399BC707F7BC61E8F60F40
B1065F435BE8A39EB454D88F5BC45BA812CBDCA55E45999C1624E9ED303EB0CF
034D3EA1810903F7457F14C359AFC59257053072FF49817CFD5784B25F3FC7E7
2EADA68F6A0DDC1BF80268E5088BDBE5E056B1E398083F300EBE5FFB17D30994
0D9D5A1BDF081F4D7865534F2CB45644E610A3C02D768058BA2B97ED67821A16
9A58F3D4BCCF3638857C25C73B78F5C35FF0DD1AE3187B89BBE10C6B0BF0A640
F2DAAC77D9AE654BD6E43F894B8729EFCBD7E8A707C4DC64731E964C0A512664
5A5C7CB45669B6CAB61314565222A1493030E61D657AE0727A6E854DFEC5DBF1
9D4E977A07A42287A2DBD42A72CCC7DDD11BE570572282F244A01498B59AAD06
E09E56D63971A25452CABD02AD4126F724976A78C97BB968A2CE83627E97A5D0
10C7D7B9EB1919CCEFA5DCCFA45FBE216DAFDC4A9828B04B090643FEAAB5CDCC
83BEF6255633D0C9ECE043320D24867624628D94EC53A324A595E5E03F208DB3
CF741544336B728D00DBC256891AD2C18359833D77B430B63CCC85DBAD5D2991
9BC64386B2C1DB6825E8534CB04E50DD9F7B036BC382AE7EB32F80C325282473
AE7C10A0437BB4FAFAE3246A0D4A48B117D5D4B114D752091D35459FFCFA4985
7E5CCD210C04A352AE3DE5D771C6D8B525FD94AC6E751B8EF2894EB9A81E93D3
63408BBF3556C3B358C718B6068CE204ACE86B9FD41B65421ABCC9D3D0F511CD
18A774A553E79D801983BDF2A3D8810F643B86E816862377B4654030D6C8548D
69258D9BE4027051D0DD140524782E322B2C89D4839487989EBFC22C726D915D
48DC9ECC5B64BB1C1DF187A4642A75ADAF193E5E9B301217B72A90B73BADF2D3
7DB0829893537DB21723CB7A543B33ADFBBB241A059CB5361B77CE9FAC0DDB04
56DABEA3C096B3677146B9EE76EC9C92D8E9F84952E0FD0542C875767BB50453
4EDDC0EBD4B00712A7DE8579B26537E22498B33866CBE749BAACD94719F604EA
68B1D82A9274C6BA01060DB769D997B97728E7007415C6CAEEEAC922B89BCC10
245F909D183BF00703712C43FB982B84D8252DD5940D8D3459BFB6407856406C
C97B7F8E07111E21861B536D41FA5C430003192257B7E0E1300A9A86F1778CDF
7E6A53F779A9F4BA9A9CB4A6B63393AA0FBBD6115A526ACFB1FB7FB7442E6955
E3B3D7E240675866E0B6A3F02A01208DCAAF3586237466E46F9A8A4051E5B690
A99D5A7657D4BECF58FAFB707D0C6842722A540B85397BC85BA02C0C02C61E52
EAA5BD9D047B46990248FD88B3E2AE2794DB1E59D55C63C71323410180002993
EC949895D67D862ED1B2E8AF5B1D264A5795945F557CAF8AB594AC08E45102D8
07126809E2A58DCC9F6C58CE1FC8D51868AE6CCFC815CB866E6977D723CF6B33
3E20
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Bold
%!PS-AdobeFont-1.0: LMRoman10-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Bold known{/LMRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Bold)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /LMRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-486 -295 1607 1133}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A2B97A2545FB4AED6E864068CAFC11C1B6D53
286E0C557881AFF6159BD803AD491E349272C4420D2E2274C589D040CD3285A8
9B4CF82A5D6CDBB3A3687E0643D2A256757CA467EBD41D83C4068B5F571BDD53
8E7B7B28273CEB38BE621F8217E7D0555F034EACCC39DBF40BFD9FA372B08F97
2001D6844E132A16F34B8B7234D5EEF957099FA45E43170CAA6EF70241E1A720
C1322AA56561CAC98CE90766897AC0611464168BA543C5664242BFA41B3D7688
3D1F10E97CAB51F4BE34CDC94C0EAC376AE280720C33DA72613F8C2D823AAE57
05F548DB3DF8D58096A65BD301502685F53ADF37350A323E263CF938292ADE86
4E420919C2AF30A8276BBCE4CFB3684CFD43C529A2C3203616CC19D8C144F695
88C9ABC4B49497A29F2E748D7C8F5637D9C9D7F057BC0A7ACF91BA7809044D7C
28A2C3C0B39DFD381EB48B2811A3B289364B9AD88B05EC6A2B79F841BB4599A2
76A8D31BFF321CDDF6112BF0C2C1E565C889A49EDB7873A2A09E0B2035E8E5E3
E924F96B97B49382EF212BD25A0E1CD7F132B4D69A79D085D4B3B4F7AB8199D7
54C5C273A119FBFDA9F913E211DDCFCE950DAD1CD18206D7A505D1F6F0BDBBC3
C6692C9BE7A04DA687BC96166FFE480FDDC1ADF8DF328CCBE1B11027E05957EA
41C4F0C0F64941E6A006433B78D17D537004045CCD22F9B96D8120CFE40CB7A6
FD8FD92293D3389F42A29F4F61A8D4A782A141035935D0D6DB2BAE585A54CD88
012870FC97E3FDAD1B5100045CBE72B72E82A6E26D2FC22656E4DE50233CC0BC
C7A54B9F67758563267093C77A86ADFB33603FB3A876C770C80B465A53F2F2D5
8112FDE19AB9A4079E0C90855C51249F2C2240B6EC1B5E300C7F388406E4C645
9490E4F6CABAB531EC31521D635B141538F192D31E24E9D288F43A978909439D
7A156AC8F37C032256BB99967897E536D47EA366FBBC2C9105B7434040077762
A7BC54551705281FA3DBEA2D747BF4EC1FE15303621A12288A2C6010594C8634
3AC38B8DF7DA899EDC907556CB0E315523080E6A2AB98CB984085788D5975852
3EFE904806262F049E69436E357D68B13040C580E9515013E4AE9A29CF63C13B
40CE2165EEF09471B8E6A3E58986C54B7C3CA24B7130A94CEF9322DF0CCE8FE0
405D523BD800B3DE120CBF2CDCE50EAFB9B4957B842BBD708F52A3A0E98FC71C
AD89BAEA80D288565525B1444BF2AEF21A43DBC273DB1BE1C1F5E1A5436145BF
8491766AD3F80155E920E05E6AD03A0C8CB629C6AC474AC2F118081AF2BF003F
30990745F489487179A2E91E4E911F74366983E8E2640C074C521CF379526FA0
FB75CC1D909407C9361034AE5A4971F5EA766B6EE55A0255EAFBD3CB99582E7C
9F70C6B28C80BE87F92E37C939AFF3EA59B9C780D2ED544D78E6FE090066EE46
091A0CE26908070047A7974053DAB9937E5FDB670E295524876CCE4296BD2E0B
8771B7BA9939D03AD638796BAB9535BCEC1378CE95F86EB0E0B34512888B67CE
482A44888AD34D8802BDCE91305EB05249A5F2E82974D0BD0306452BD73037E9
CDEF09C16A2C0FC13C8732D5463F7F5CCA9BA997ECFC11B62612EEEA9E08BB45
A93A475EBD594CFDD4F2669AF631077308D7EAB2EABFDBDFF58EC87F7C18D62E
44A0351C8167558745A4772B854BA31EA9711B886A186DB61E3F985EEFDAD748
E35BA0325A75F01AB676E600823FEC28C30D2208A868EC0D00889EE410C1781A
4E2DC6BB8CA4C96B19722BD65B58A63BCCE2C44B2C415BEA7B5EAC41CC092D15
E2CAD6DE382839AE8C789A6339F7D36DAFE163824896DC2F8288C43C68049EB7
87181E75D8EEC99DE256698CFD211D7E280371E1F963484EC4796E7CFA879014
528B7F3874D4991EFD61104D18E85A53B73A1FA96E48936976ECAABAF1A0950A
2B0B48CB4A468D6933DDEDA7331067A9AA939ADE975C80C4626D6BFE9FDA9462
9DB2D6899726DA27EBEE38443A0995BA6ED0B538A698CD67BBBFC4E36F50E078
8FF62C1E0E08172728FB0F986979D861394B757231173420B130353EAC9DCA96
255A2FD871183722A407F7C4524954279E275DBB8B6A6E3919B677C2599BAA26
96DDF00B27D9E1AA2D98B13197426A1A86E9150D3A1EC4F892A2F092A3E45B04
919E536EE5C93AF3AEEEAA2FCAFC71DD1A8B8DBD9B31155C6B7483BB0FFC9D03
1B23031F399622D13AB2DB1F0E6897681D03029F4FA5CFA50A7F4E244DE44F19
AFABAD8BDF3E922245BAA2CF9289D68DEF6706FF9C14C3834B71619EB0636EF9
2E5D4E51D532F29BCDCD4EC988F98528CE2BF580724B588C348665435FEC66D6
CFF8FF2000E67AA8C8A80C71C13F9E6EB178DE3DF17696DCE0AABC09D1B6E2F9
1C968D4028D2F1E7C0B2E494B2014160CF85023E0F171856279D43F1DCC9167D
163B7D007B43C1294747F3ADD403E3C9F6D68D89DBAA07A27A116C80E837DC74
0E86068952F0A57B0F1E29DF2C698AB39B218ECC7BB9128F40DFF15850305FA3
283B2D61796769BCF858C4EDD356EF78C8138E9410822C4DA3FB1A29ECC9DFC6
179A8F984CA14235901BF499128ED228A0548CD9FCD5194B302D289E9BEDA2BD
ED8920A21E23DB7E05FECB7CBC4A049B2305809138EA4BFDE1D0D4795B1D06DE
CC73D9657C38B62041E2748A22EB4FAC3B2A45DFC342513361C9C58EE3716C03
9B663EDF0EDA6D2C079E63DB534758CC7A34ACAE80B866D86984C6535A4650B5
2E03111524616DDC2B199CF790ED6262043A642D66A0A50DB34E373B20F89136
385827B7980C2FE0ACB1C038B0DF014785240013A05FB9262024E28822E7347B
59F287E83C08AD158AE3AC0636BFC3614812566AA471A20BC3423FD37E586D41
CC4BB36198BAB18372CD68DD3D0917C1539A5DAA9AD34E7134BE594B65D76D84
3FFE0E0D5D4EF5E4BD8A5B894D2C4E3C2722BB28BA18DA530B3F2D2A59FED439
D11DED107279134EC85A76D595F18A4289312E74FA9C289A53647EB6D7740F43
B40D79A6277513640CC4E7992FC5B88E4E3411481EB26741F1C32CB8F4DAAD2C
F7DD33D7C3843158CEE02544DBE77CCFFF9E9C950ACE4909177160423331D6A1
6B7EABC23C5943095BF1E82A90ED92588859A542E991655A4E858F0EA546C3A7
23A3FF1CEC65D05812C3823ED9D1FCFF6B51EFA6D574E59DBDAC801B149E7A09
327BEB82BEC7BB8F1C1D8540FA065E4DE28D1830A4581AB3426B888F236D57DB
2F5A50B37FDE98C831CFD40AED353FFC3E2F617807E129EAF9B118CE020A8B2B
3CFC3CD9CD8BE6B540308268BD29CA353B184BF493722E61DB62F5D71E97C68F
EE49A62BC6787664E7B46DCD8497A7A3ECB657733811FE1F00D6221A3F0677E7
155A03A55E5D7A37E0CE583FD73A055ED8A33A9DAE4C1EBF4A6852EA932A5E64
E2E417C6B64D84B19F7C2D7C143E2878C4D4362865D0BDD0BA6044D3F5A6FD23
AC4CE9B339BDDBBBF4BFE1AE855973129978F707C87462B6750F988DF5C85F1C
E42E38D68E2825C8A95292A77C4347CAEEF8FDBC70A40B5551A06499BB39794C
B9F4EDDD14BFF2F719812D43D7807770C927143018447A70F3232EB34AFB74F1
3954B882D400597DA6B584E6F94A418E4EBCB96CE67468ED160438641E71D673
717BD052CD410469120CBEABAB5F1417E6B46B01E21838C0231D7E280371E1F9
63484EC4796E7CFA87901452810D0356EC46A4E7754D3BB9B25BB9A929283621
035353359D2571426A9D9F41C2C3F1C6B7F475D7C0E6D3B53DE2F45597EE0694
AF8445C41A12A0DD538279301908D1BEA397E35C7F91ACC5982763EFA34A171A
4BC6EBED1987D64A444A48361E1417EB9BE565358E512832C54D4A3D3C1FD8F8
F90A234A4F10E1AAF04B2FFC5E891EA1EAF0F87013AF4CE74DD05B327128E407
26FD632B028F5043378F2CEE2FD3A5F958A84085F3B9773553E69D68E57589A4
37A6CFF712A5A5B7750EB0E7C7AB5E8E17519BDFA50EAAEE490C76CD606A0043
E160BAE1ADCAB72565D3820C5DC08A7165076904D3C0CEA9D037D8F55FF50A28
0E12BC7EC61DBB61040FB842436D3B6DB6ED212E9BFFEDA7D3958C62CD92CFE8
BF5DBA1C7EEE0BF66C206D543D9F4C412CB125B234C4BD614EA7496D58CE8BF6
2247CB10F893048BFDE9B86786C8552127572A7A00C9A6E8795A982063A93AB7
D32C4A7B17865D9B7D0FC9DAFFF25889365D607265482492EC2C5AF7D2458ED5
7817947BB237807480A0B36A5191B65FD609DA87EC245ACA71106229B206E64A
5B7A368F7D57187F0828675A52382D41DE6CD9FB522CF6D9D228464CC0864DFA
AE0AE7F9B73802015614C10E8FEB2D9D848B2D9F368024FD837672A5DAF6F2D7
D9F37B4515720B646962D8037B07FE87D0E97CF4FA509B35F90FEE0222548F77
7C6F46D9DB9FF3EE0E30C3F4E30721CA7DF6045169129B2D3A5545D51116183D
DFFFC28DA9B2CBC7D1E201BCCD97279EE9A30291B4599FB13C47C471A72CBDC5
810412ACA2F4F7436FA46BA59CAF894035CF86E3FB319F985782FFEB05794CC8
977E665AAE5AE9EF22A40C38BB1F69F691122BFE48E6FE4003BED0D0EA381B5D
69C1D5C2AADF0E960552D2FE27E75213E3B027840D0846736F0649DCA8FCCCB1
24E1FADDFAF3D591AC8193896D46439C74C71CE66F03C6FE287CC70F6FEC6F8B
0544484883A0F02FB4B3781CFF5E1D1550A313D433CCCB5A5F344D5B9B46B1D5
EA4CFF4F5EB02E01028827495946440F9F29FE71635D62D4C3AF4C1DDBFD88BF
7A9D11CE71D9034EE8704CED9534746FB31E330BE53F424515738C62BBA2C6AD
31A0D44B1E9FD3E9E8CFBC3627DEE4455805FD5CCE647F990EC29436C60A8C9D
CE51FF316EAC4EECDB1B8AFA3CE22F8B07A8C48FDD4D13338FB3CF6804B66C37
60BB3AD124FF837C7D4C084DF2935FE680B53D8A3D8F82F699AA9F570CD83C74
E62BB9A520A31BDB850C6D7EFD955F853F8BA0C0106657B45CBA9868752F655D
8C91CF08EB5B1222A0043B001FE5C89A5FB8E6EC288621C12EFFE5CE74ABA28C
8C578549FF711D799853E64D86EC95C0C49D08807696374A4A48ACA1CA90ECE5
E198A6C53257207EF1D6DF448C97CD7C7C9EC19DF25BD8BAC6F452D3AE5CB044
09B03CB023B35069CF2CC6CF9935D1EAFD4894A600072ACC70C91B876A4ECDB2
500F615B1B8F9B04215F91ACEC454312EC1DCE0B1CF7C073C8C79B30EA5D28A6
8CC2FA966F0EE721CBD018A768EFC6C2F83AE423590FCFCD5F871F03C22DA4FC
CE2E3979C77A24D5FC81E9B9C3FA269C8553905A0D8436B504A24122283CA134
9A39B3F5A2A5B1C8CA80962A9F18B88E20F71C865A3C7B1B589C0B5BA0C81139
0F95247E010F59376FB1AEB72D08E929E1630A7750DE134EC1B27E5424BFF394
34E3F7580B36099A5F4F1D22D2DE700F422D4B14971C6890397008D96737F48E
EB999FCE62C3A76466650B00DCAF38B8C9332CA8DC2E6F451976573293174088
A505C703C2029593EA286E5C67C0B1A298929CC1D133AC282085CAB4EEFFC5F9
433FD42EB694809F478CD83289A2A81EA6B567EE74BA11FA6995260E4D82DCFC
2BCEF49359244D0B3DB6286A4364A8CE71574F2DEA72E061762B22C960240B54
15DE0DA8F40992ED9BCE277024155EE3A67C4312A55B81E58CE7F78DDB940917
756A2D719AE12C53BB3DBDC4BDEB8551410ABFC1BAD9D79E03CAE74D6724924E
295B0AB44F83A07764C5B7017A8DF4AE3478C68B4F791DB553BE17D4F25AB9EC
BD3CCB4EA3A262534603D41B89F5DBC8748EB0D26D527A7665DBD5CFD0399338
CB050BFE5FE2634DAF1DF9B9024FC4784AB48D99878E0FE8AB756A7F1428C5CC
1E86F6821160698242C7566FBFFB7B60F04607DC96A66E8520A4BAB58141A8AE
9C4E28C5C019CEF9412CD96BC9190FF4B231AA728E36BE2546EC5DE06F956B85
7291BCDA9B6705F0B062A78EFC65E27E55126913AC652F49975BAAECAC0E7D82
AC7CFDD841FA277E51A2583CC1F6D4C1D2E5EA316A091C458AD39661DB5373A6
0B53D4B46DC4CE9B9FF1A7480F80EC4A178E57A3EFF34A3155D41819ACC39190
1D01BB20744511E191DC610B578CE26E351964BDE6F028867B9CF1B3A17A0E16
70B03CEB7FD7ADB4D72671135435609A235501E3E6BF57C0260490AC60C0AC71
C775FF45AFC56539492EA8C44FA9CD62FC8EF32FB37D937B48C2515A46A3FCFF
4E5DCC31CD5366FDA28662B8B1E5B0D69E77228C3977D61EA20CC2172E8954FE
7E4AE6BDDDCCD03A3A1B7138B71CD2E913C378A9B0A3B12ADD0E6C97457D5BFD
A268E2904A6B271326A2E7B313EB38E299D348F0636EF976C5F8E15CBCC2B4B1
5DA7F10D8DCF4A96714FB8C4C3BB7D8756022E64636F77F4A0CE28AC8432056F
0B6DEAF86B33F38B8F624DBC7192AB3401CFE6A390C5E7694E88BE4550138B5B
F23680C0DA9FF7E6BF4298E548FE405D01D18D8EBAC97621B1E7E9D9AE9AA465
942C8C19D915CFC94117F80F924DB6ABD954BFF51D758526655FA1A05A37C9CF
DB799A7E8E345F81A6863581303E8CAD8382725D8B3E30CF0797D9E0046E5F25
37EB96BE26E034AE12D1550307A212E4331B1220895D9B0A455CB547B771F0F0
E488239473A6A860D2CC6F72F9E7145638B4ADF04010860CB2EB69D1D202871B
C2B15EEE8E1AD13E7308928E76A80538DCD1E4BB773E269AD58FA9E2F5482DB9
4A661F07035FCD44610F085652BA05177872A46DA310F17C1BE281CC2B9DDB5C
9573DE790E9DED61C913A9FAFE2DA36FDE5D3FA827EC09C4A5745707438921B7
2245BB149160FF9A45ECED9B0651A8A70127A7B6D6928D6393D85208667589FB
0EA874920BAFB89889071729076D7550215B4CC7BDDCF92439A3AEFCF1D503F6
7E5C1F345C050D4BCA4A16581287CA52C91C957F37ACD579854CD11DE16AE93D
D8C872A32D175EC93CF8721B7ACDE3255CA12AD37E9F446877A679BDB33BA020
167AFF72DFEE7D9F828DB2D23573EDF7798A4397FC6B28F7DFB72F5895A6BBE1
1128DA421CAE132B0C35181C92FDD6246567D3300CD118D4F7F545B7276291BC
6899D20210CC12012D47C2941925CE1D16865F3C7ACFF6ED4EA6DFDA17340E96
AC37784DB9EDB2ECD79A062243ADB3EB7A84E9A79FE1FF4BA38BE9EB710C0C41
58958CD6707E3DE6C99E7B22C06F26440987FE7AE6ABCA16D566FBEA8B0960A9
82D2FD72EAE3CDEDFCE5AB551ABCE205DAEDE1A49769F27E50F2A78B09E25384
B0C3A3A15EDC6C87355C5F7C8F8228255974C836A0A50D8BBB2E0EF842E744D6
F2588DF12BD73080A1A78D59FD137AAA95FC1C9BE0A9A7F95C1D6758790D5894
ED92C08F17FB8B81CB0B3A5D62AC570F0E9161EAB46B72FFD337D62DEA0EECDA
C0ACC8C1B258E2EE1381535061B2CC994D41EF6AC07B567DA70D25CD24F6C582
5A46B6D70EB017FBDE39702B4B8B60C24B7834F18B0DD2704446773CDD8B4BF0
A88CEF16B7D3FA7B5CAA14BFFCA244816CB6ECBE72B39A04D306436AE4944282
A851389ADC418F07FC089E8E4F3C0AF189B9B778B86A5460CB5607F9E5696F13
AF91E4D7C41B245C81CE231849F32B0596D4D43D238D5912CF20E18C455C94C5
0E63275779EF3DB681E7ECBAC9BA725F6A9B664B33575A0CE6AC3EB2B20B875C
8554DC4CB8F66F53CC605E65509A8ED6790F5DF8A6E0D3C0AA090E9550C7014B
740639A0ECF9B289F84DA03207687EA3B5931130B648EDFEC74D20462258D5DF
BFD7DAF32CEEA2096AFE70E8058FD1C6086BE4372789A5E4A8BBE7C909E080E7
0BFD15C44C13475DB2A5F3876C929B0A05304A6430A70EC98F4FCE48D820E73D
DBF7A967735EFEEA89C68E3509FF9F8192F19198D5EE9A7DB22D584FC7B6F9C3
5C47D639FDD4D626C8204270CCE76467E3A1F8D5BAFDFD3DAC5A6E03BCE4AA47
0CFF413429B3CBDE2628B4A301C4AEEEF04C065920E486BFE64013CCB6B421BA
3852A7015731023622DE8304F54DC7AE73C7CD20097C56CCD3F735589A896578
6E104B9D3B06490D129D34C2CAAD10F354EA10F7E287EB72F327E03E0A941BEC
C603AE7B388FE9F8661E01F6CA058ED16528D28E50E37BBEB1D1554503645AB8
819FC5862ABBC985191135F0156722F0BF1DFACDE42034A9043906742D7FB560
4173241EE0C7C6A83E5EA7C786E60DA00C3252D62921B8D2A59944E5FA8B3C8F
4D7D104AB3FCE54B2EC4E0F6D4EBCE888A5ACBE4C407C9AFADF0EAA156E3EF0E
EA375E66905D49892B70588D74C647B50A9B5A647481D38402075B63859D2724
FF4E20023379853832A0FAB421DD0C94FEA80CF0B4EB92433CA496CB6D7F352A
877F875BE5113B3CC5C384E1FFF89A19672F39ECCC768AB03B0EEB8067F8B3A8
D2C6AC693DCB7AEAE0F6DE8434EF087320F134579D9E18D1E0A10E548DA7A74D
A77525E729101943FB1073125C8E145DB68AE1DDEB36BCB784B51270EEE16B01
38C1732A5446FEA58A355EB9BD77ADEDE2D1599BF1A2A856D76B3DA2DF9E0988
F326A406F9BD8DA3CC648E93EEB1FB7ED3412955BD8294FD8B63FD7216EA3D9D
9CC7A830D54468CD68C3D3B7A7E8EA484E2B9BC3B4936126CEA5662629D66B8F
520701E1653DF36A29C8C3254D402D0140F5FFEDA2072B762860FA23F60759FE
CFDF9D98B0577B11BE1892FB804C7EE832FEE32C28112342E63BE84EAA60FF42
2B21DD2A015EAB8612276AD38CD0DB6335FC4A6B27E683A4B83116D297C764B1
D3B4C668AE63B11D15A49B6E46D8EC621225A259A61E30FA6FA9F76FDD45FCC5
C10CBF2640628BA4D6D642299CEB557294E341DBDFA8FE95988647EC94FD8772
9B453BF8B104C43A87080E37D1D7305E7308D2A3984293615D3C830ACB43B263
71195013F74FC07E862198AB521A0643B58E76A1A69A835DBA2C92162ADBE102
CCB700BCA4C89ED4BAC0C5A0DDEF52F121996E2483E9C4F229D1C2F67124B5CF
48327FBA645C9485D04E301A710BFF7774F8BABF1AE471DA2362995EA9F3E090
2D3752080238339ED8E43DFC3C6C5837DE85B0278025522F64B542CE3884C9F5
EEE8420CF6B478F73F4C3AA6D990B990C3B6F83E7A0D8C0E0A14A1C76ABE9A1B
813A697C42D48B75DF9890529FBB3D24651664E84B70EE6A7917FF4B7D48BAF7
4C510DA89C334B801270FD3F8850F74BE5BEB40B796AD36F4FA86F331E4BC14C
95C48561563561B3F793D4ECDF9B17AC4E1A9871B9270510138018B3A34123CC
BBCE2DE167989F65A52386FC69EBEDC6EEF76083AA9BC41826C942C841D1E97F
CAAF1A9A33736150E92E971F6A42046019E11D040BB87BBB7ECA68091DAF0336
E38390D473C371FB1F39FC9A6EB3FCB5DA184613F52B3921E48CBD1046A9F5D5
BC258A8D370AFF741C9AA3E5470914683E6EB80D0A469D302B99AEAB33D316CF
088B4875981B3590EB6254FEE152B8F789FA9DC8E16E02FCF0530E683A96AEDB
A01D6FCBBC224F848F23AE6D550B6CE0190281BA4CEBF16ACFA4FD94730CDA24
ADDEB8EDC0BB83249CF414967A020E5B8B0F4C985832AFF94728E44D62711212
86EF517780172D12AE96F24FBFA59F7560C3711FCAAEA964460A284B639F7019
0AE884CF45FB16E4806067890E1B980D5FBE1C676D2D27DF227DFC37AD7469C5
54F21DA9C2007FFA851430CBB4E7714D1891AD19EB59A53C5F4FB5B0258F5785
F7F311BAE4A5511219AFBFABAE4AF312575682E6A86792FF4F54968748DFF2C4
A2EC29E036A55D98AE4F2F7798E4406FE75C0097F2232963F743EA94C249D28C
16CAF047685E2CA06DB14CA1F713A8EA6A54D4D4D8A18B49B704866C3EEF7765
213B7D57A87459CC9EE0E27F64649BE086B01D4F992EE1202FA5224BA74AB500
482FA63DFDA987AEC5E50C20D2B4169ACB7B7FC90ECE99FD80496C2711A4FC73
9A9E747AD286D01FD254E83FBDE2731167C1159D455830D0F304FD7A9EB6B8AE
E7919322D2FDF6C7D40FB59753E7688CE5356D6BD2F73A46212368CC90124179
16E8D9D29D53AF3EE71A2C1C2758596AD40E704DF341EA9E0287FDE1F2AF6327
54B587F41F1228E2108036E59798BC49D9D9D49B9CB9429CA197321B54562509
3C1FFED495F7B532647689F1F2136657C025AD24664C9D474079E8F147BDDB1D
C607885E12FBFA7343990A15C778E767E397298427A0A7A59C4ACD748A13881C
130EBDF70BE594B1652CE8453D18F719C00263D5D734481D3325665E775EB811
699792290062325BD588D00D8A6A024C8EBAE715381BF247D955C5D6C8C26935
9114E9D71C32A2CF3F247852BA56D5637DA0A204945533BCBDBA1EA2A4E07410
0D8E90D22AA56597E52A7CAD9144F3A403A275DFD11AC91B0FEB0A7935943EA6
979B84A0351E4B20701B130F6E136712C538944F5C60E652EF743F21C1F9BC91
16C0E58457A66912291DAA0915E7D640105F39C44EC3FA9956F75531F04161B2
C21F34CBE80DE641436FD397B252722950F1216BE4DDCCD51327D1BACEB011B7
A64EF55CDF2CACB2EEA5DABDCB79FF7D9B695DAE2FDB8875EEE2C3353D6C8B4E
84FCB8FA302C68CE6852921FCD738AFF44731B6DB8007749D1B605F397413DF9
6AD7895452FCE11000D9D00C7B33AAC360A11E9F5F226BFCA8B05975961FDDA4
98D72C313AEE1EFF147266263FC66E2EDD70546AF3EDE43B3579AD5DD3423CA9
1434FFA01AC743596A7ABC182CB4A94718A6C1AA4D03113B2FD8EB1352F664B2
BFE42F0A95B623C52746C788F104490DC1B3A97937AFE44F3CAC59721B5692B3
63F7868151FE610227A6926E2123BE874F7F04AB0F88D50CB5BE5F12FBDBE648
1D67434810D24D6312B4D5AA583BA3071A842560444831F001EEBBAD4BBB06E2
7A5C35EB854BE550341FD8E7D86AE2F27483D0FB3971AE16E0B35E28093E183F
D79FF10136EB44A8DE87DA279FF7D54B40F954901A479738F562EB8738D25513
C8E09E739F6A7917586EB071AD3FC3501C39A9BA928BEDC9EE6D595278E7DAFC
6EEB185D6B4A80C1BFA827E4F15E623A96FA4C46794169CDC754F81A1A215F70
C547F22F0E3C26CBA8DCB4B0DA3E18FF4A412EB9E00603DA2CDC3B14EE622963
57FAB02AB94F320D56406F4EA3202920FE665809102BA7126DC952C5B0B6B2F6
52D5909461F774D36EF2777062545A0F4306CCAABC0774F8A63EEC0E36D1EDBE
356E1CA232F795A9296669B1AC6FBCD623AB4AF6DE5CA80F9099A1AACDB5133E
5A5D0B5019F9E1D426843264201C49B5F5090D2512D7931EBC886B0527170395
70A75CB813B58B9595DCEFDB354F6605B75BDCBBF35A0CD2A66E9B61057086C5
BECE91E3EE39CAAC9A19141D7B41CFD13550AB9CD531BABE8865E8D3B7640F59
B5C07D2CCA6C0BE763B80E96C682B067F1525DC438EA0076574A376BBA701EE0
0DDB693AFE84246AB18279A2B24E5B50A2FF63368B4573DD0E37570A1CCF1686
3E0997CF9C7D3CF25166686CB129E5CFE6B9BE5EB2233EBCFB29D09C214FD2D0
477E6AC154766CA4AE15FD414A76064823F31457241DB78D7CACEBEB622B2E1C
A5CF16CF357CBAA6B894DAA9B9A7252DD820081E3821F226D8D45B9E0A974574
7E0AA1FA780D21BB0FE151482CEDB0C21D3167BF901A4606B75857C51F4C969C
464C1CB1712283C42A77AE7874BBD3EDE67900498C2F9834799128DF2B034852
C673ECC2D6040632416E2316A739A2703A399BACCB0A38FF9D60329DE4606AF1
447602483A341A59A1B95EA285C94FA3A2FC84A753B513A289FBBED75E3EE8C1
117912BAF855F88F408C9DE54FE6BB1E52CAFE32DB3305BC555ACB1CCF101B46
D6323843FFE132EEA49E11D6BD6E0DCEEDC351A9D344768EB7DC6A46178EC603
5FC8F3399F07B6C92F2D4C686C87AE283E6F3B63483AD8A2AEB5805C2D42F6D6
CC059BFE0ECADA74E5E10262F9006D5F16497CF07AED7D3C388798FD878DB9AB
32D771BA8F05C3924C92071EDB5882B72F81DB73914A1F2AF8786E14A6C63796
43EB79CB5E9F15DBC0F5D3771EE6B6A3E8E5FFC09D8FE4AF37DB1F4C5BEF5A58
9847B993C18E41D0CDEF403034D90B225FA38BB516F3DCF11B96F0A32E97E31C
F40BB8BBF3E1972F75FA7E60FD834ABC12E8E54F3D2D261539E45CD0C1369B20
1B4DA7CE2B7194624D33B42527A74915A6C348A2EEF756679298AAE244A925FD
7DD45F474E1F464F24F5E4E1A89954B77EFF44E1C7C5B7562B0D325ED0F58074
C2F7CFD6306262CE03FB181CF1ED3A0D57618A3D44DD192024F7346872E84795
059D0A12F0E29546C1A94A526B9938774C9F054CE6F54FB243BC6C671C99AD13
D61857519977DD5BBD317B3402D11CD481B9C1D9ED625CEF5EDBD37618D207AC
9D2AF1C72C5852CF134DFEA162CAB0A75F1B5C1763C66D4528536DD4FA047FBD
CDE12CC0FE27A46BEB41E9CE8687F60FAB8BA54A538E537D321DB5621BE2BB04
2A97301D2FE70F509166FE8B2CEC51997227CDFA49FFD913B25952FB9F925B14
8E7C37E14FC4D2640CF3C96B78918A709D3FC28E9F64594B667F16ADA21CC16C
2583E2E648FD2401FD0399A1C269747802005BB170E5B4717B42CC855192F770
48AF20F3194E4F70FEA9D89B449A816459B14ADFA9FA485C723594081B7ED0D1
2F094EBC9F3A303E146D5B42D12EBCEE214FC4BB017B438E62BD94D194914B44
3071E961D79B1C81895DAD7D74B8182DB648FC01DE11C0F21F62B84B5AD87BC2
7392D7A101E273541B8FFD8A9F88AF4464E27FA4713C65620D09F8EFFE7766ED
BD7CE06A64C06BC0384B16934083213CC51CBF9538EEE066651BC34268A51C3C
43202CF30FD1073D72AA9C302198116181395210AD619F9CA83ED2AA40A2D74F
451FEACD30A472C7CF4E225AF63F50ED7799609AE871DAE4F8D0361EB39EFD7E
764CCF53973F324BAD8D643A7067F8E9D019B06D3F0184682B19C3799784C139
4A7F95FA260EA13D49E3343DD189289C42A534F59650E8320C39376D90BA2032
A570BB44C1BA3CCEF6F031FCFFA0038FF602E7D0B63C79315D57E1181660E7EC
9261A296A742CF5073AAF79684D9E5BBE7CCC7F6D6093495DB0E6D60D62B0F2F
6DC307F14447AD3865B14F9B9780576A5621DBB3569022BCA7DD435E9003FB6C
E65D5869318FE640DE6C8C6BA0967E627A71FB621AD89DE7AA6758894D99C4BE
9E6EE4B30BCCEB1CFA5C9924056F33ECDE6F29365A5745012C8C594AC62A60B5
03C129D7C618C217F049B4D74A7E48756144317DD1752DF6AF33E5A6F2CDE17D
845A3706D05F77CF825E3D9C55E3AA1661331AE72D19680C28C445017FCEF9A0
E4FF565671CFAEACC4173E0163A0B6D795D64F984CD65561E2E5608200B86DDC
18C5C81A4E75F8E5B1C4BAA5AFF4F8032A501D346059981EBF2BBDD15214615D
984C311625373FF73925D862525CA5E696419DD10D37FE23C9CD10E8EDA5C46A
4D25802401138F236121A7F2AB9F24EBA197C783B2B6DAD6D6D9CD9C8E87EEF9
FA1E447663BF368B38D4282C211B17399962E0B01C5F5EED6D2D407C0089818E
3F82FA42E9473ABE2F9E0CEE7FD3D217ED437B23DE309A360FF60CA82A8251BE
5670FCE2B26AC9EB6F7548E63D6E83F77B0929D99246B2B667EA5E5F18BEEFD5
1455661E67BEC675BB4B5754D6AC6EB493990B04C3257D9AFFE291DA3EB108F3
896967A7AB920CF0F71F72FF52A8A4C819D119551A8B29CCFE9A73C2E458C370
725C45D5CAA5AD4EEC414B8DD564DD7F5937CCD08D89506CACD8323BBDE8EFF3
18AFBA650A3E70F7CDA03C46B2C8DDD315850235962879E04DC0D62826F69CCF
772CB5742104AAF7F6B37234BD3256784F923002FE1D95ECFE48911B4F84FF71
A7A260E60CC675E991187A18859EDE149FF3F07B59EDA5362CDECCBC03A19BFB
62CD880C9E803E409065E158DA49560DBF90604D84BB140CECAD52A56F1BFD45
9667449FB7D3A09203AB96D56B75173C5D37047E511DC980EBD803E01C355049
3F383759FEB56122BBE0260A619B334BDD7EA54C5BDCF515CD83EAF19D803FA4
B566D7ACAA1BB5BB81CDFB6FE7CF6647F5024D51CD78D79C802EEABBCA93CBF9
68192B9384EF79ADDF7FC21D7643EC0724B2284CCD6B344723AC91F804E24C58
2927E6F48151E720E33CA846C5D3351CC74156D1C73DC64C377C8A4BF7E0E3A0
E93D890A489AF61D27D3FE8CBB25636F48E6A41F205D04A802E3AEC20392A32E
43FA49F5870695901E686D807DCC38898B9704CC4F18CFF663872B230E921494
B129F80EA04D13FE346EE621E1375BD57EEDA0239884B2F48FD7E2FBB6FCDD05
36E7C70D3AC58AB2DFA3EDD496C18C8974EBE816B125251327BDEDBA3DD64AF1
4E96741AA7E4BD3A858B38F525793AF97A9CE3BF875DC5D845C884413A445DF5
E8FFBEB84FF65D8ADDDC0995B117009E9EA4FDDD33621EE6AF9187E298CB7AAB
A58E3FB5B4C7E86616C437F7B6F0D4F06414757F99246C6DFEAFF11DE3850A33
1FB2255AA72B207266BD5FE125257C0338F1FC200264151C5F7B1D591B8E7F59
EC311B6A6961FFD3E15BA20C7AD37AF606694CDDFE9C6DD15D99ED151912F966
FCD81C9DFC29FD565D68BF89BD37A2E4A0B6BE71A47B686623CA4298C38E32B9
5D790323B4A5713E69521D8E8AA5040248CE7EDE034DCC44740002ADBEA1F7EA
19CCCB844EB0B509983872C58A3EF67D2D71970060C270EE7CD7DA718BF2A360
A33A473E6D63D300577B2C99A5F45D0EE3C4A0C09325430B6C2F801B8B7E48C0
291852C6AF3F4F1C40BD085085D8BEBAC637D3C1CEAF96B4581E1C92C335CFB2
5E01E9F870CA8523DCDF93D57CE57C1759F2EBD4659BC38E6DA6E587C23E7024
1F9C323674E061F86AB32436448DF2CF7FED61BCAA295453173D7DF58575CC18
47D0F75151398B14A65214F97869C2FAEFF9B4FB46BCA340F4B45490CE22EF90
6079DDD08FF521506BC90C43D3F7A924CD93B97B6A079BBA10E78FFA5A91E9AF
DECDBC417DBBF9D784583F562C0537A0625C655CE749B0D65EF38327EBE4A4D7
1078881731C0445AFD7EA20661D315F7618FF21EE6384ECAF44BD7703E2745BD
993272FA859C2570AFCD5690C6DAEEF861159D6BACF7EAA4E68D83FE9782A6B4
54893AC10647CC82B1937B920E82811866EC0F779EC1A895514DE0885D3BA597
6E4D90C5AC974F07EA9E09ED3624794C0C045A9458C6C166600E54AE1311DE91
06E91B8D869C9EBCDFF01DC1A3FE0885600E1B1EFE2961140479458987FFE44E
8010F5D4D89C4B85164A996FBC6332E5FB95EEB520F94E0E5F7CF9D979B6636D
02AF9989AFC62E8940835751EDD0ED2C9219DC7C9E32B069607E2DF3CBEF32A8
490B9FA9CDD72ACF8E17E0F7E6160CC2B113F5C9F44CFB38976D7D00609A5057
4B6AA5CB3E7D88CA425CCF064A83F6DE23CBE6A297DDFF1FCB2FB7F9F4B2A47C
512F51339FAD5776CBFD5DF348EE3B46B2150DE67F616FBA22F823AFAC1A9A7A
1E0F83C1C9B860B740F2B4D53A8656B4EABE3095AF295734A6BAF8FAD751BF26
B2493DFEE44FAC4B02883397568FD885D64EFEFA51409FC4D512C520EF5235E1
EADB433F2FC78678B5FB7A9D371CAAB9A8A382A36EAB6BA0C54A110C3BD4F48D
0BBFCF33E5B44F23F5D501BDF6EBC8DCBB7B63CB86D6663189688C6E5B123733
610842E1E395019ADC42725032D284011B7B7F6505A11E4649F24B1725AEF973
E3F4E5F1A14EBF827DCA38CBF9A44C7050D7405ADA3E1BF030E67C7B8BCD803B
4C9ED2CA50CC0C6496DD709A239A40BEBAF05CA22C94624084DA481242C6EA89
76F522C889AA3F48827DD9280D36D698735DA8686090245BE7A3DC5CB4A60C72
B62704A385C87363E49CBA43C39DF8A664335F67B9DDE36DBA793EC77E5B20CD
DD74BFD2C45FD1A30675D11E8F2817E361F92C4EF671326670B713F19D4B5ADA
1833D46FD6CFB92B85EAE5362686761A7C070EA75140331D7A0DD5731F0E395F
52A1E9E76779AD43AB1D0C6B1287D624F7D78C26C1D694D2B64F35E0B30FCDE4
1CE1882A74B0D383A20886345A0A4F80CACB099DF960C42EA2ED818044CF3C72
C1283CAC14A654509D31772F680E47CE4FB77C94C9D4473AC027C116D193A3BC
7B6EC649B9923A92343BFEB7CC1E4229A7806045871AF6D7D534C89BE5845CDD
DA0862D4B6F45F1F5BDD22B310B27E091728626DDDAB2F32540FB487B40457D3
C1C200483C0CDAFE837D984A761286C277F9BC86193D77945E249D2CF36335A2
9414E4372BC0D3D66FCBF266295BE92A624BCE6EE9EEF09589FEAD44D2C59BC7
C0F4C7A421734301813921B971F6B6E7B418F11E0BB582A022944E02CB6DFD5D
5D5A748C350ADBD2CBFEC4CB23306030744F3CBDFCC6BC3388641BCD73324D1F
C8EA1D6D890713607A2C117C07604B899D0465B74390D614E5C88C16C92401CB
EA5732C69BAB87EE221027734E7D35BD18745DE29942902818A35E1689C4D585
7CFBFAA99B2B376BD412C94EEE2A88B057773FFB718B9692709BAF0F79B6FFD2
9420D0F578D9AC9A6782205193970B6EF07098D4E97FEBA8C650810E23D6351C
7E6347825D7FD6AF386280FB1E7C70B9E987F29905ECD40B9477FD5D04C23C0C
73641430D64D9D93C0454110A0F607208132AB459F803E0DEDC3DACA2BAB2D63
9677C6C405C6CB450A2CD44F6ACA8A6279180A4873C309956ED4006136501218
94B9D280C4F16906654393ECB9D7420089A60301E4D98723B5A14A5EE325D1C4
CA5023439EC8A810ECC2212F0FD468AA3A8CF8AA023F208B63AF2A8FCF441654
80511171EF9A30D87414ABA2676B03B3060E97A61D130FBD21BA4CC1F4547D6E
3F9351F911D017A4DEB43C5F36ED01D8955E11C53CA69AFD141242589D004008
169666AC6207D5DDD9206A3814C7FDB09D1CBB136217D093D4B9AF0E06F02394
9A13281482B8E6E927CB8822EEB6134FD6F15A5A9ACD38589F75C1C940C0650A
961FB371BA0BA4C3FC5B8B10AC5362EFE6A4271F2B6D2647B7F6C1FD5174F5EC
78D1B2379918C8034B08588D7761056405F1094AFB2137E531F829BC2AEDC874
B4CC0BEAA161415478975E25D1E928C5867A495F88565BA466C8656C724A35D2
B660BABC3A7894B0BC073FD16A8EDB783E06EFF0FE425138A90484712D9F38D9
366BC72224EF51FC4F6A4CDF352FDFD48E76C5737253FB5D2AE4CAC0AFF3DDD0
AAAB1EA8B6BE61A0CFFBDE8CC24538DCC034F37B225D1A63E440A719CD8CC6D1
48F1442F138283BE9D6D6DA61B84D00CBC9FAE5924F8209ED49D5978E7979D54
550933FC4B7290C8C71C097F48AB5C03B5D4902839AB8E8E2C82F96700D866AD
30BB0427BE89D484F4DF8EC3EC1406810B1D9FFF19AE1DCC2AA5081B9158B854
BA69C027592E21EDA4064F9024388FB285B72C03C3E099832969147FAA363C8C
06EC0F4D58005511B085EA269D1F161BDA867582B43AF9F5C8CAA12D9F6EE5A9
56777EC61AA529E09D262A841CC9C1CF25413ADC7FEA856CA2ADDE6F26A46CBA
D656899D01B503CDDCEEC86D53B2DBA14DD6A688023BF4933D7BCFC346A7AC33
BE4837514C2C9E55B94C6AAB6EBEAE8FBDB5A30A686CF00638E3998B212A6E9F
B073A613D8A66E12298CBB350AD2905CC810C101563AEB366F8CF001784BFBB4
CF438D3A203D42E519F4798B4F326F1D3BC43289B90E6A5AE52B09D32C1DC593
EFC7A32FC7BC461016325818345A76781F6E8C0BAED2260A4E802F5FC817DF7E
4887AC3A5AC333E0046B77E6133A52EFBFB31BFACC1EFAFD38D3EDDCE54B5B61
922DC4A068F35B9E7EB17E895A9862CA1C88605FCF93D555CDC7F4D5012C1B23
E483317E848D429E2D033A29B98BF9BC188EB6535481A757C2255E5832AC83BA
942319C28B522ABAF817F506EF45F7262128F931A0BBEF222CAC2C775B6964AE
A57F562C969C92D66E10E3D7B8CC5FCA1AF7279DE37F1A0AD48F0F16A9147C21
C019F62D2F520237AD11E4807C9945E9ED217DA6F2DE3898EDD770A005E0F4FD
E0D46F3D2A7596FACB691D515524636E66AF9518CCC9A1DF4E6FD45019DE0192
415A2D0F281AD35C972150AF985FEEE4B24944EA878C574B5EF6A6F4ECDCDBB7
B7A00669878CE5660A830F47DDD3E0C802D4C77AE4E1EF7DFC887C7DB8DAF0F4
45E6C0EC185D6B4A80C1BFA827E4F15E623A96FA4C4679471CB16E47A3E91301
863DA4F885FE0CF685B6724744DB3A9BE15405AC35BD4A4795277C0923A9947A
2F28A8BEBC10CF090CF5F36B3DA0FF93246A390879AA6AA248BF3E7D08A12DDD
A2501C6655411A4DF2DF658F42D355F3C546842EACD9168B620439F55FCA7313
B67CE7FA22FE1B8733A2275285DAF560741A702B11CE084913296F4D467500FB
8A600F088414D8992ECDA0ACC39AB210921FECEB5B4DF76423A7DB7ABF711BB0
C7C703843BB4FDBBFBF247F0B4DE4315683E204DFA5B92C319E84AD9437A817D
144263AF02EFEC13B4B98D263364063B0E4937FE07B9558B366A02AD194E29C3
1962FFED37AA64ABBF55C6AA5B89AECC81F2666400D69E132AA9FA4408FFEF20
B38790592C909431AACCECB4A68860482B626C62849F8A60C939478D23E48A74
F2C72F7E683E51BC4D0556B70B073E4C104C322503F37A5AB40178F106488328
47710CE230C88DB6EA541956B904DB911D009F0B209BFDC62098B4ED5911988A
CCD6357281BA2643028A304E0EE9C56E67859F13BE58CC190AE494135DA16F1B
90356C4A25C98BC8AC81A2FAB38A815B713EA00A29D9EFFE4BF54835AF150744
DB916CA7E3533C73FA145B8325EC1DE6BADCA6034994F5A338B85C4ADD0A28C7
A8FB765C4A009E8A75BF20C63B321F0584F9623A71F05B694C7382FCB5F83375
58AA398E37BF984F934C66986C2EE9A510A5F50608B8107BD17C259B723F956B
5B147E7C0D6AACEC7F5EE0E8811A1506AE38F13A4407E66CEF10819E7BBA428E
5C1B3331DFA06E332B681A450A2957916CC7BB08073E99F1FC77504661892F60
E5A560333458DD227E655270175B38A6DAC0F0BF71956B5DAD5D06C98514F10D
1D6FF346F8F023272CD1DF9F8358F8A4D59C24055ECC0730819B7619DBE08DD2
EE3C007463730DBE8260970F6A0CBA9C877E260AC58B70027B0D64F633DF5B6B
AF1E94CAE99461753A09617854264999009C8D902ACD8AEDB2C6BF832196D278
69EE01D169FC58F743CD16C8F0A1AEEF41E99201F87E0F4C5C5F208770EA6528
2F1BDCC62E5AD93253B1294A174E2A459924D98C2CF228E79AC439F741F256C6
25C7873D10911EFA29CB0F73EC7964569840F31A48B73FD7C77F261C8FEB79D3
CF8E70215DA12CDE9F64D57A6B18DAE04E910FDB7359D4A7857BC62232D41148
39B84F1291FB015BB0543926AFF3EE9842B22F0BDACDB844EB2B4D798F49CF23
6D86B92B8F499033A7C8B205156EBA8999EC28EBE10442617829C58627F62C3D
65846F4B37C086395214C42F7D6D45D51EB82F18DDA0C64F589A9D5995CA93A2
E85BCBAD55EA03F6C2EF1C3568DC2D45AF2882E0167D494C40BAA71C1B453E8E
7BD1F1FB47DCCE41BAB7470D2F0096A4929A6C5A78DC38B8B5007395B44A9CB6
EE412F54DE75B3EC897FAEB296D9F1561869C8FBFC1F3930B708E9E73D9E9F69
FC7147D6F806481049872DF421458EEDDF98DFDC51AC170E4C758D5056D41E48
CA79E025C3D54743A3B0CFA14625FBF274F3794A1E41C74CAECABF8616AD95FD
9ED3B11C918BB38D121C012BD2BB1D80CEED73812B66E3738E8F677979A1520F
C225DCC4E613533B4095750C44CDBFCCCAD7FE46DD0D24B4348EAF26373E9314
2523E57CB61535E56121B1EDD93A602F5EE639C1D493EC4F3521BCC425AC9484
A3831273131882FFFEECE9FE525503DF25B27B0B383BD71777CA2C3B5A3DDB53
81CFCC78030B8F517F483714A6D050582DD4CD344BCDC148FB63364A538D6140
2488FCC448EBC4620081D308891617029F3B03A0DACC0D38A18F0C27FDF91CC8
B8E94D2D8BE561CB42C987A026992772DC2A0B06D5E4AB1186D81005E1CD538D
B8CF06364C18D0B14473491ECC44B826A0208733314FACAE006BA2064623902C
8AC479EEEBB609EC1190DA19968541E940E2965DEAD4F76711CE6B9D74B4E94B
5F29002168C2C33A1025FD0214A602E5B24C92696B721017188CD4C14648B646
A3B30B6EF29BAD705E5617E163C08B25BCC35DF08B53279AE4638C25C4968AD7
F0A27B0DFA5C12777929844470F89D01787CE7105D93D43734A954E93FB084D1
DF3C055CE41B0B5C871E5F52BF1D2A1675F9914CE626DA6431204C74CBB66228
3EA55F29FD6CA218A1CB03FCB945FC24376A45F2DE0C213344D985544C9A64BA
E28239DA8BEB1A6A96E95B783B1D1D7DEC3FBD69C55EB49363EF77AD6D04F8F6
48A3A9E59A9CF6EEC8949C19C52F175EAF3B7101AF39500AD4EDA5B0B9C21F99
3732744FF16A5F490A795B841D4A07E5BBD89A132955A674C60D5774E77E0ED2
4E62F5A85DCA8868491ED0063B799CDFEE8095FA36EB42FD653E61573C70103B
260C08C5E2B71AE4EBB377D4C725AFEDFECDBEEF98A3E66366CF2D712AC5EF97
A6A5012BF840FD69722AAC19C9A5E1CDCD8281564806615E4AAB5EDB62C5081D
DA33EE74DDADDEAB61616CC225C4B8F4390726181E58C4BBEB0896586854605D
658D8C7681595D049200223E9ABB3C4B89E108BA2572D80E6A42885C6207D74C
FC361F1C77C3E72A5B7F902BBA4AC52C1D5ABD368FB59E8F5450843D46ECE2BF
AB53FF907FFC2D5A568F8A75A0F08AE62F66986E23FCC0B2CA47DE26DE432ABC
8F6E4139CDC959FBC88191DD4FA5D21049C9BF020275B4CEBAB007DDED01318B
C9A9C8A9E8D714B1A1D6BF89D4C93E577A08E6EE8D270015A2C4DC01CB803F2D
05C45153213D6D499F60E7C6C04DE9C117345C4E51748D3A5C5669D7037FA2BC
4A92730FAF68949DD17C1D4D030D7C1B219BCE9D804C05019B3A82879EDB943E
49C2269703794A0ECEEF52B4AB5A78768495F4A0B56EE8FD852899BDE0D568AA
1F5B257AE0F3D2F50BA8221F087318B006BC07600D2D8A19212E5C66E0C0DC03
444C23F07B048A3A4B623C6FD56EDDB76DC502CBE81F9D33C17E0756D67C8743
C93A493350028443C6EABAF73BC1B4BA5328595CE15037EB3E37FC4FCE8F9492
E884E432F5332C616238C5C6A3A06DE22FC1FC8C4F065447F5AE375E90AB1DB8
E46BC96E44060C1D4CB37236209050865DB7C42DF622B4DE52A50B02C5AA368E
0EA45AE3A0C9A76C320DDC36FCF1DF894496F2166F30D5D82D5D017B3EC5E6AC
B227DD1C30248B5410C7C68DC45383A6470A21648D9F06AA90738ACEE9F19DCD
FC2F1E54AD17895F8182865520427E51F9851F31B92C54DD21C9DC3DFF06F396
6DF7A5CB77EE39EBEF8C5F3A75B96D98C17AC253906BA2ACDC46618C403FEF6D
0969CAAF54CD5F89FD89D153C58F0D65BA699B8B07B3A36C555F2853FF596B65
D9B721D438E242B80E51E4990365F1A9D3554538CBD8068BAB9E74E3AA10436B
C7DE247093F736533C48B3EE0B4D0B05F3152610C6DF152CD38145B24B27044B
3F72DD84699ED708C0A0CAC3E2A3DCF5013E3E22F493A53C3C1B37341F96F2F8
FB4CD2BE21FB6A052F643A212E29617C2CFEBA5A6386B82D3FE9CE7862DBE819
86BAF8AFAA241DBD42E7FC2458BE65CA610632C077E43287690007B115A10547
9F9AD0DB70D62676AF80358BD38A52F34923E7C63E9CB9E28405DA733CA24D7B
010CE0990F2A98633876C9EEC666E45CED43099074A76EF8243F6CBE4C91B219
D17F468A024BEC22223A0EB2681AA3031BEAF016845F0AB0AD49789380E19129
8388480444A0BC0B30A59B8FC8BF6ADF871A58857A14009E06065D2034DDAE9C
7B38F502A82A0D35F24B66D6E886FF223A3B323D692C4C908EE66282FDF5A5C5
DC3A73144477569210EB8C4212CEAFBC79B61186AA832CA1BDB262B9982C5712
93D7F367FDEE695858694DF4BB186AF8FC1756EE0BD6BD5423B5C4C0F0053040
E40D34A3D826E9991557BCA4BCED8E6A5EC8F98B569EC47F205C91D4466870C3
B0F9F47FFE4EF9561A25F70102C80919CA7A688B95BDA8F401BC2AB34B2B8CC7
1EBAE8F6D2C8C0BBF9F0315CAFC23ED4F9CBBB2EAA73E7988389765539E82679
AD57294AB13E45AEEB8C6EA105696E341E4C008FE73450462AC1FB753A41D8AE
F0DF67893C1D06F24C19D3CF374279ECBE4F14E8E62E61026F8AC2417B713B65
029B0F91E4E7E8FCB04C4A950D0FCA179322EC312B4761F00F9E298B3BB482BB
A0365633ED40BE32D14E2AF1590FCE796384A40D80A34E81D82A3505EF6B7D11
A0E878D5AD75843EEC7B5DA65F4BF17DA84A38889855C09DF4C8683B2F3F8F1C
F21708F41DC7B8E94CC3EFEF92681F2E0B21D0FD888FA7924698D1321E8648A9
1F59920CE58B2C0AEB87A78B69F09F520D6F44AEFD663EEA6B165B1476641279
723F476C0235F3CD2DC4BCED480210E0BA1D53E704FA24F55107E8C5B9DFFAA0
2537B00A9EFAC8828C25C7DD412DB8410C0151D97D9C0DF1186BD6043C9CF23B
9B6C2A6176056CE5DB4AAFD40AE5054E364844F0BF03BE50426089EC7071143F
517329957CB9524FBB56170E9ADEF02464A57D0CC0A7508739918BDC031F0A2F
4E8ECF24A0CA6B4040383C9D965F9F316D4B63AA2A08EBB83D288B240920710C
102E07B23FD9FCEC32D12729662421089CBDE14721864F29CED455A3A0E70E5C
E0FB43E820AACF407DB268F2760F36FD53B66BE428E9FAAE87F5A611B153A8D0
CCD5AB81CB63C86994940F8976735A627E61DE8BABD6DCABD62EC52186753DF6
DE5D6756FD990D7DB2172E7C3A6398453B144FDC93E5DD2F33705FA9D7CFB97E
CCA414C7DF2EDF2C3F52D34947E0964D0E8E89F6043C0D2BEA52564057CC2A94
AE03DAB88E2AA787BB7D77A882827F5FAF77F8C38CA8468E616771E6C9093D7E
3479B0DBE67D700E2A7FA861500A83FA40F7BEECD78B8AE3B5A139EC8007FB85
2E0A92ED6D704F15FF0F863528DB72E858B5FBA99B7EFE1571BB537FC01D4EC4
3AD1B8F73F3D23240B13F44F655AD6FC40955A3EE68C16EF312027D3E583D4A2
6FB7E1C09ED409A37537DEFEC58AF2BD0F4CEEBE1EA60064C5EF7B5FA8C516B0
7DA395BCD78139D141695A002691B4826035454EB98F9D7F73D5EADA8262D22F
E6321DA20C3D092BE8CEC412D7448B318C421080FDC31763A04776F70BDD9C6C
2B5597E7A5D919BD56C18AE56D2BC0E824554C74679B25590F079D0C1EB4C3D3
5CD32F08424BAD2A76790BBB18E9A73A3AC40F56848353D8EA3117ADA2CF91C6
557EE2ED5B4CDFAB2976D79897F600CD61CF880F6B9A1B6B68F3CCF0B1836A57
B85F9CF6E07B8873D2E9C085BBB0276E7DD887B4A4D21B7DB0932799D11555CE
D849422395DCEBAA7D01D4CD352BBEC2EA276853D1D85C71F550300999F2BD75
F2F13192CCF33D75047ECE96EB36F6CADE7470118E6D7588C75579F24692804D
19A2582702B0E297D69FF9B3AD38AF09C931F1F33B58CA6956EA86D005762C33
0B259F0184FB0BF5862C3F13A6E11C75D1602292AAC0F49911C68A3074139AA5
00E11E6EC4753242F4EF992B8ACA8070979284C7B1DEEB9C890AB96BF156392F
E02C2F5F77E8E58AF719343D9F176F6510B9526E94D4E38E62F8B9B96E2D2359
CA52DB45A2E8BB824F2E0310C59E864A74877AB527D5E2D304C8D933CDDB280F
05DD157E37A6EB7BB45145D109DBFD5615A35253D968BEC1722CE2A13645590B
07599E4DC972F44474CB35738074BCB9FEE4077CC0C49E297B7525B6894E3168
72689DE8706526BEF3903DE341CF8D9C7B8CC208D4D5EDF68AA64843BB9A1C2B
658D0CA810CD31CCB7C0C7F7B5FBBFE76FF489DC229E9D6598410F818E8D945F
E492C0C783EC9AC7A95C0832ED8BBC358B7F0E455510C6AB9398D0660C89E168
5C6104866674D453690FAF7F415B3CCDE7AADBCF72697BCC9D1463B833F7833B
60886ED01600FE4F58FFD0AFD81BB8F6BBE4241611ED7B1F928A3BD24D5E7328
37CE36410DB54BEEA3C2A6E224E5AE19170DEF1864ADC733AE203B3D927CD544
78C2A88E75732C17708B4A821D6CAB6C98F1CB3A9A6DE5C947140AC48B22EFAE
3EF8FE12D52CB637EF42C0DB0FF95359E700BE2DC30F248D1BEFA38DF83E7D7C
29526EE5C93AF3AEEEAA2C4B97DFA22BEB90A4684992708063FCB7BE8F1646C6
073CE5F01FC2CD49DBCADBC6C6EE2ECE261A420B8AEDFA916C7D86A4C254E91D
14F8E7B5310A31E19B37E2722A4F8A64D1DB569956005E9B5448396089023AD8
E73A16A49262295E2C7E90D9F96AE15458EE17551D5F34BBF7FBE754C780FB8F
73146818BE7092B6596500AA70F399DC0F72C1F50D22B1CA739C21F6CDFAE2AB
99ABA68FADE90898D7F48AED17DBED036FEF82B1DDF9154F405413C9611215F2
18B1A2D47A7ED42804610E4F730DAF2F2D5AB767C320C62543E2635B7C21C6E8
88F5FCDB35D70E0CB0ACAEA8DAA8782698695A10F183A4A2F4EAB6C4248CA41B
E63F406AC19349E2D27E6B85396AA9BCF6DB645F7DA2BDA11F2CD5AD93AA7062
1012EBF7079B848946ECEAC5DF7AF1044E917186B1CDA1D983558086958FF839
797DB45168A9F3FEF6B8BA7AA0FBC31EE16FE252C76C21478728AFBAA4935651
6DF4DE824D6BD0C90321BA88379D36955E47862D630657779A75EC1C34043CAC
D2D870186012B2302FC5D74FA1FBFB1C177AED502F9F054D68CB91DE60C177EE
752EB77D01CEA50E0D6555854323FE00320EED738E9B068E5C3998334F901C79
DA37DEE290F439144CE783F94DDA4B538804FD8DCB1C0AE2D3EADCBE041FC2D6
A7418A1C3FA3F71244C924A486B70892B289F75F5826DC2F0F3FA60911C921CB
164D3E4DA74037035D226EE01791678E402EC73D4064328E15B8921F38FDB6F2
42B462E6F118FC3499F108BA1894F24E9568F4F1D5E43F3A5F9E89D8AC1890E5
580074E9FA4B87601FEC1A6E5D0F4C15C0BBFED0EAFDFAE2C502881246F7254C
B4F3A5DA06F9953D8EA3833BE27127E1C489198821227C1AC898B5BD2715859B
5C81A2C07F42C53E8733A85F5D175589015599172024F2008D619DB71633DF92
D94F5DC058F642CA40605CB29BDA2E929A857FC13D34B4A0D6000C22804A5B31
B13418130BA661F22AFB71F8026DCB0A419ACFBB19EED0051D631CC7DE25D16C
26513EA3617166FD9B8996E0C633951A258AA95AC6CA56E7E1B0F67FC81487CA
BA9CCE19ACBEE693C2479D8DC2C8799890FAD3B47038164BB32C4D962E6BD659
9A49AF94B6B56E37A58CCE5B7D23ACB3D33E5DC89285D1A79BA985B3031F7E8E
2229F94F3B360D1F7D0B7CE61AEDAAEF9886492F752D4E2DD52B5848B220B04A
ABD14C5092F60F1C373A606E6B20616FA010BE479ECA5B7529BAE86B985D6D49
F711832859E2898450699BE52CC05488D5800050C9168866E28574FDD2D32152
F55191FF3C347336B7A9B4AE21259A68E8DCF0E5754C8509A44A407DD915AB71
88FFBCE3A978DE4BD76461D19B6EF6AC835863110D4886E4B30C4C1306916B4F
4F4626A30647A49AABC499A97CFF90F3AF569E4D9AE66BDDC633EF0ABF651BD3
5A09736BCACAA28FE2B6150308D14DB5529E564854F4104FD3280C18713A7536
3A5E89F1F6C668696A2F1286122C63913DE4A43F19311F0732AB3EA1F5D8579C
2A03B586D586C41E84F7403CA0FB248478CF6E2E3D73A24930E7085F7B9D4A92
6A7A75B31F88489E4CDD308957A09FBD40723A05C36A8AD1977E4A94A814D5D7
B7A6799BE69FEAEE8ADE6853A7AA1E86BB937E35BE1811C42D851229D0720F34
716EB06A87D4C57E549D3DD9776FCED36FD33CF753900098FEB892905C3FD4C7
15E5AB1B0AB52A559569A0122FC3AAD6F1B8A83AE84F8ECCECD0CDFA74FD3C4F
A486459CC4BD0585986D0C5D457582E9A0B7A3EBFB0508A875B8041333608D46
B78A084192A8AFA2DD43C672552C6DC8F1B316FB29634CAD38F0B9C8B1F4A73A
B259EEE0DC213A5E1D653967E8FC62C767ED826DFBA53B7D44E3584BCF6F3DD0
CD46FDECE92D3164A4778B3F91C02B6F1DF8AA5A9459D1C5B8CDC769D992269E
6EC4631B1B75F2E266EB7C26498593783878C0A96D083E18D9F88CF84181239C
446AF84A690F56A09A84EBB1CED5515C36F278D3DC354920B90DA95B5899C9FE
409D491DB422E2CF3EDED54A2FBDC4EDDACCC1DDB52E196DDE7816C17414699F
6716681FB9477E2A1243CB87523D2492EBC0F85F59A0700FC18B9A47ABF9F7DF
911BE9ADD5ED520BE4CB4D917863A9AD9929C91FF933E66BBD8D6D234D1F671A
A44C910C718341EB5EE9F9A9A9955141D5672C8FDEA1B0DB4E681C77F9494B0A
27DADA058271EBD7E1161B20F3AB5E3A7507F25CBDE0504C023A845F3583F558
1E8F42C1DDCEDAC02652AD32B78F7531B73FC2E0F3DE2BD2DFA545A711B2BF58
BAB1D382CEC272088210F75BD51A52BF0D97B34C9CC06CAD4BEB4AD7FFF7A030
0A5557C1E0913B055F591F8F2E8A74B365795F709F827E467DB8DBBD7C54C2F4
C855B2246112743572F725CE3CD1D23D5C8E17CF1B43A482C44FE52E57AF48D0
467BE4D799425D869F75A82E117CB23CCB5DD5AC1C45BB54A1BEC1F1A6A1A5A5
BFB54A1BE8C704194D72A79B50CA2D24DB44795B8A0E1BEFD383D8280DFB5651
76F0167AB78472DF419022F6B4D7B1E210382DB0321D08CC629157CE99343D13
61997B367E27EB09E48873CF999ECD990DB940A5951BBB6FD4919B97FD653F0D
102D2B7C6CD15C0BC79F65939B07A2614A73E6CD0A8650EDD6F45F8356D9FE5C
CAD91738167051920AC09B447830065415D778BBD955C2F334AC79C6BDB6A46D
666F09C8F83C1187E0C180641E8C2B608D98A273ABF96524385F03810378C63B
CDFF874A75714FD324FDD866414ED5F0DD2E5EFB88793CFCFCA9DAE4E27C9A6A
4EA27E3521C498D54930D54CA098321FE35A05FF4CDF11A2EF3FF5EC6E4EE766
60C3DF99FD8A37EFDA8A3CCF56AD9EE9F5DC0241F62E271301D7391127468DD2
C98E410268717EA1D47AA40763D7B37ADE87C03A2DD1CE4DCED3C6423C5CF354
221E7922B29CC828ADD9B2582CF6C3178700E56D15B50E730EB2CCEFDC74ACDD
0A592FFB2DF1672342B98C8DC85214E5FF7110BFC9D5E0419ADD2F5CC1C09AD6
8EBDE0AF5B89AECC81F2666400D69E132AA9FA4408FFEF221DC1544715156A99
395CC93B6189189FDFD3AB62C75CD3F2F3D42FC229CE2A91FF4FE435C3E56A8E
B579498562C373F12A52FB18A1FBD42B544011323E059BCD0C4849A20BCB4C0B
890E4E8A779653C1E96E17AD82C65D7D6094316F6A01DA7224B06AAD1687DBC4
19EFE2BDAA0A4C52607A6EE22EE5A3F316329CAF0A8BEB2CFAC9DF6BA4E1E6AE
3EA9660E33D4589CA81BCAECCB6531BBADE815FA6DF76A2251C779DBF0649F15
D26FD05EB16A770DFD3474BEA07174DC2670DA529CF92C6A4C8DE84181356F59
E257FD4D5D2122AF19FB65F1E49241CA0D3B9F193EFA450FFCDBA8DB8B2C4487
DE23A87DDBF76DB30701591D150AD6F710C165B56620C38AD7DD891AF4A025BF
340BBFE7129B8FC87B571B2F7CF7AE4BA146ECD84F0EC100C4F81403D3D72060
6FCB8A848257C973C7F02AAE896ABB4EB0E5BC4EF204E240BF65211A22EF9A20
624468EEF8F43667B79E809F5F38468C15B44107090BF341DC7FFAF030A10ABB
310B4D67130AE7053A2C227BF14EB123661F9D677552B91A9CF74F2A195EAEEE
DA16C98CF1CE7044E94F863AE060C15384AA3B971E94EE6C587C8E8D5E549AF3
C414984EC3C46F08110639CA1A05162C888865D9ED512D024828F35A805DC0E5
55CAA49C4FA7B4597C15455276ED0FCD4F407B558A3481CF70EB9B427D70363B
DF86FC1BB235B2ADABC5EE6FD28B3A9C698FB5C15E15ED402A0F46027DDE61EA
D03E8DE7EE3E33217347F896029B671A1993426378241B3230E538EA2821A6D9
E81C09A8F68D09775E743288B3F0EFF0D6228E2A9C62FEEB32602DA2B5FA880C
537F60E1394571392C367B06EF33AE56B4A806FB8CFDC71A216F7BB5502ECBF2
11EDA4A8B352A8AFC8DF1DC78144CE5BB1A707C2702AE36932B1C53EA3354836
05847F13D5093441937367DF0FE34CEC934F99C14E909440B5457AE748722DE9
7C11ED7860C0DE22AD177610374D182906892912A7F8A4CF8C1F0C4EC952C94A
D319C715F1CABAA2BB9F7F4BF6E4395759956C3289C70D9CDEB2829AA25E4ACA
0916A2B55D3A5EBF6914D30C9EFC212633E22DB83F411B321AD1EDD99E5730DC
27FDC522357E129AF3FCEB74715E4B670FF15BD8D3D5FC316E5F0F7489198136
A21934E475C3AEB56C167C6F11F0660A31457CA8DC222821B3974899A4C8F8BD
1EB467E4EA1351FA1786A16DC4A287E97299F879F03087AA660D7872FA7ABD51
CBCCA01C4388CFD69EC4A91F54EFFEDC78774F93B2DC916E7352BDDA9B18F720
457A4AB35CD203DDCD5F57AD0DCFE3A2843B49AAB52E51A524CEEECA742E86CE
2046F0B38880F4C73580E4CA12D0599FCA16EC1E68346CDD4824C20DF2326795
28ABEE18DBCA9D487009403716609E326EC5B8DFD78A27E99CD5718098386B2B
E70BE819606FC82DE34657421F7B1EAD52A97DB78B7838705C74038EAE309DAC
1593F3D840B66E2A469CF478523AE67A611BDE199F7CB0388C58D108AF21713A
806CA9C60D3A774AC7E3491F67384FB8EC00BC247DB6B3D734351E036DA79E2A
EF18EAB42529A1292C1B0DA2A164DE6E0A9731A52DBF39FA446FFBCD5E52196F
3E8E54D5B449EAB7C6F6D76DD96CC479460A243E467E127879951442B36A5EFC
6AC3D9449B50940AB2D610A308E242A05D015A9A89EFB85FFD3E49CCE4D71069
01AA5046EF531CE5358335FDD1A041E2092B3D6EDB51420EFB3110A1E43B8454
4654028111CBEC9928D970C4FBCD5615954EC92F7010AA81F34E4CD56615B497
BFC547BB8ED37C9B71529CD1A306DB2A0D8A1C45FDA319EA936D0B6239F79FE3
6F29BD396C52674699D9F0B00F6A327D62FD217BCDDC4A3CA43BD56CD4CE0498
C38A67673AD1EC48B76B7FB00B7026D3CAE5BC78147BD9F5B8510809D0908A97
223B110E60016B4E539A10DC92E640961A47EF4267749FBDF55F18D7127D3F67
2F9A977124F540002B18EA63418CE46A10B9FC01051B2AA43255689E2A33CB33
547AD2B29E24B96C1A4EE98B8DEB53693D3851464EB814B83C5AB87C073CC420
E9A5CAB419CDF24B40B4393F5EF3709CBA02FBECEAE37B8104F18D7333BE578B
37630C06A94BF56FAAC07B425C3808B9D0FC98BB757ACE99FBA633B1B0C6A87C
4DE4D63869B40CCCBAEEF1E102139F1CFF22219A6CCF09289E5BB096D013C71F
A6B9574014B98D1030B59129C2A3106F412D05A44139B4B52EACC03DDE212B32
2A63F3A7FFD30F6A3505565E58DFEDC695041D0FC126AADC04BC9D3A695EED83
5DDF0A92E14340EC8798E5D47DB5C81F38999D013C59F9AC8BDB00708FF80530
B61459EE94F1453F5449648641FFBCF82DE42E70334906C1E0F4C13A3BC312A3
1F3FC9F045C076D881C417589FACA84BF77D5DC4105B3CB7A48E5646EE1D1D0C
14B6A6ADFE12CD6AB0F2E8055089F1E737274D1AA6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans10-Regular
%!PS-AdobeFont-1.0: LMSans10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Regular known{/LMSans10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Regular)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMSans10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-420 -309 1431 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFBD8A43517ED5F05168EBF9D3AFE
25EC2992AF87F286EB5CBCB7AB5454926B000DE86BC7DC7722EA9CC5AF351D71
F88C22A045179501515ECAEDA3F7CF9A23FF4ED29532BCC5A2D9C4566653DC0B
F99B58B303B412848BFDFCDC0BB4CB9FDF30F98236F5A2863FD3E28016CB2182
2E10F5EC6419BBDF2A9031E1EA217B147A06BABF1F87C9585634C5265AD31FFB
EB313C8110270894F41E54896FAE4A5E1A9B04BB8EE53CB5F143D8A3B77AC1B9
96AEFAEB5EA99D855A53026FDEE6A856D3616D7EA42379EC96B931867D9E55CE
3ECD8877C379F6C2FB63E92F146942350BF980AF3D7DE17DC4C2E4B304AFEFB6
F4A34CB06164596B7DF119147C59AA2A1A8D448EB219B2682388F94393CF4D74
532926ED5F2B9D281EF3324258F963D1A460D08DBF08127EE66D40C3C74B98AA
22B9AD6BB84113F84B085EFD4982BFBC507D1215DF109AC39E0B12230FD6DF02
C4B69CAB0B3375C9924071A89A799AFAAC3EE2010B8FC82E42BCBDF021C9DF72
D2D02FBD2CD3E161AF409AFC0828954F2BF56A15E1ABC0815ADB9C244B0AED7F
4B9A54CFA2A286FB4D9DE215B8B5879444B3E683FCAA95D0F1520A716BF2325E
E76716BB5C5DB5600A7CAD11F019AD5B3965B61494D228A3473256E4B8B22A6E
08F055AA199E8E9FB2B6F04B01BC31664D95FE7CAE16648E0344934054BCB06E
44A33F278B8A2215F77018BE752B8FBD6518461CCFAF61F07032398367B284D0
B0AAEF9509F632534C7084BEA8B52EFAF676C38D4A720D4078C0B3B525B7178D
9F85BD44B13272DA283BEA7AC239A3E1A0FEAFD3E9F7AEC9CE3296A054919E74
51FDCDA8344A2E134E285D682648203E81A5343EB6EB96FB42F1034835DD0440
3968C3E86CB7B20B53F9CF8FCB188D635FE58370AEB11453FE69A0DB8341039F
EA654B8FD7323E5536E130FA10100643C234CBDFB8E1CAF1E0C1D9073C3299A0
24F2E4D71EA82005EA03B106986AF98B4557B8DAF0F445E3A884196DB28B1A53
18E8685614ED45AEB1877C4476546BB89CCE98E672DAAE41559CD605D3A0B336
908546BA19F7904806B40AE9F9B354C260A49D0F9A5A63AA4C14879041AC1935
1612FB0B1E70D87D202BB69739202BD31EDAA120CE54ED0DE7EAAAE94F94D991
D70B5EAAC7A6BE89AE12FC2E5B8795122379B1581BBC77A369F72FA35FCF1889
1D5C096DD00D9B2454293E83D46B10EAB91C83A0C09316FB0A6FF881EF3CF6F0
74AB70369ABE28B7078F57A4D6313458E50D0EF41E9F39098B65E43FD1227A26
F6FF812CE452F35A377FF6243E9B38814F9CFE771F4A5F8ADA32416689DE8852
D903268B55D5F7EC0111D574BA4192FAE8EB478B7AE71A3F43E960F8B52A4B88
828D97DCFE9C170E21B59E05661E646D8173A5BE71EBC504A63CCD244B0A8865
2F5A1EC5546FD4DEAA2A82A209E241743C65D91E8B28382FDCEEAA89A3E0A6CD
429A2A543A65852D1A5B12F15CA11F3FF558FB0F071597ED37918F90A32C4175
B6BFB279024EAE1B04D721A6C54683966B3EDE9EDF028C0019ECC8CAA5E07458
583101D0DF5B7963E6EC917BC6FE271EE6C23FBF532ADEE1AE68E21535FA1B41
FCC74614129FECD357C3BE8A00D25EF38327EBE4A4D71078881731C0445AFD7E
A2004ED5C54658E35E1A0E9807D360DC5F76FE4F4EEF7CE1B4DDBA614FD05F7E
2D2E39A8E797DC888B65AA9747C1AF79C1DBFA2B4E18761EE75D3F611D602F5B
7D433861B13CC921709810ED004944D4B18526D4B876AB2F473672BFFE79BB6D
99AD5AC62145C7A4FE583CD8078DA0D6C0E48F1D065844515CC08B55C960DAC9
BE031F7626389BD3E392CFB2EEDE173452C0642747A58F73F774021371EDC57D
CD18653DE577BF1807023434FCDE1C8E7526FB5F8CDB189CCAC92D86370D5D39
28D33F7DB0985F0A3C2E9D379189360FED33DD98194C891292AFECF8A055EAE8
1C7D2B8D845D3F92FC7759245BD5AA1A57DC0E956ADC19E19CA5DF2F8CD96237
E6FC9CE04E7AEA2C7E4A824F8054FE402799EA3A54190E9D909671965AC8849B
3B885B7DAA70ADDEBFC239980A38968FF9B815E5DC93846CCC8A07CED537B2F1
57E170E61E6B7F4B710CF03E37DD2CF0B50DBB782F63D89425977C174DA23731
89135E0ABEBDFF1BCF088B4875981B3590EB6254FEE152B8F789FA9C0919ADB7
99ACF711607ADA252DE7CDF57750DE134BB96083B0267E52474998E3E6319EBA
B3D1D4F44B2743AC7A395E0A83ED0A777D023E226271C826E5FF8740DEECE7E5
FC166ECC5C25B81723F35B6E2C376C4A455A085D4DEDA1E64E8F09431633C3E5
A1C1BACFFCC93367F1C389CD51E7B2BCEC765248C2F863BB5A3540DC67E7B0B3
618E10ECF17EE37A6267ADCB0646D4C2533C0356C7D6AB6BE4CCF1C2A978C9A8
DAA2BC544560980EFA1C84D5348740B8A4885ABE1FC79E8197DBAAA15C2BFDC4
46E8217DC2E35350718D28AA6D2D94B04F46C2A763DAFF6642ADC1ADB069D7BE
B4251CA8A1DBC399EB5D0F829D893986A2F003EB1A3218EB83BBD59F36683025
86D730EAD6B05AD28D44DFCDC6C77027AD5C2E9F99072EC12419BE377CC7ADEC
7DA555678E261DD2E5776BC8AD0B6155E5208D976A9561F7A2A4AAA27D75E801
6345270887C0AC4B0630AAD1FC0B5E43AC491292E94DB36DCA74E4BB24CA63C8
8C0A635E4B8E7C4743B043ABD659BC2580A685B2B8A33EC0C118155DF304A3D4
CDAC6B7AC4296BCDC0A475363BAE2998C2FD754CC7FA7A0F008D1751CE85D367
7E2992991F8911FC31AA21685EA394047116ED7629C74E8171EE39B9968333C6
94674855FA15F3DF491937181FF24CD77631FE7FFD260042AFB4E19A95C7D9B7
1C7D637420B70C1D851B93E01E80D140B1D3E84DC0A52286CE9CF86129007D4B
BE72C55874B10A1413621330BBFBD9CB1C59F5B7EBD718248AA3FA53B85D3EE6
DF698FAC50F4174F1592B0997E15984F42D4B724DDEB44FBFE435F9CDB045368
2BB3519205D57BAC8E8D1035C703855412B353BF98D2CCD6A88B0A67C909E66B
76985E7B9D061CB5F20B5D4A4856E5013EBDE652B37E911AE0E16B1750131E90
A5EED0AA43FB91DF06F288DEAB608FF4395B19AFD46F6695153F1A30638D2222
8B1095657A53E3B470A5800B4FEDC4A99823CAFF87E567B96570D836AC8F1ABF
62A78E43E123A0777BD6C4C11441997E00FB8A600F088414D8992ECDA0ACC39A
B210921D08ED2C97B53738B4B2ED56EBE617BEF17B9DF4F312C20A33C0E343BB
16449961F30B34D1933177E5EADA8AE094B48AE11662FFD3D82CDC8C6B8E693C
A78282A08BBA1FFC28AA0B2660C443D24320003930CD829A0EC1E9F9DF9E9129
E83B988B18A9BC4C44810607BAF5735486A45A6FAA91966B4331FEC05449AD7D
0EFCD4C7304FFA804319305B7CBFB2AEE28CE031D22460DCB25927B9001E6ADA
AB86BA6B2B4E28F3C65566EEA6A408FCCCC97F38EC859BB4944602BE875C0E8D
325837EE7475CE269618C727B596C3C119E92E26231D0086D6A0CA26D77F403C
06D65B7394BF1FC7D06D3682DF6B17216756AC75CB0A6B8FD43C58490E5807FB
5937EFF572CA73E4E558E2B016B13DD10CA06A919E2E8308B3CE320C7448E0C5
0541DFB3E5E98186970AAA6D68B6F7CC89EAAF585B97EE0A1885CA97B6B40521
8546E5322FECD2F1FF85CF470F1B3B617E061104A978FEBF5783565884B33832
E598350A470C355ED1D3A0ADDFF4C3ECD7CC083D70252227836371FF838F6F78
8F3539558236857EFCE58DA619324AFA8E7B0E01A2D369E9DD9EDE9AC14E4FD0
9695BBDBD7994FD6CA31284BA7C4DA696046756D986278D56C22EE0220E42A6B
C4B0B91385CDC9BD557E8A0BD7A9A7D9B6856E23E0B550CABBCA69BBD062515E
16F653C7F38A209281BFEB0FE849E292D6FA3E7B6584779D8BB0797C30E807AC
C6151DACB35708D019A7B9AF5B124290AAEE8EAE36D1249689B95DCCC0576057
EE2EB1058D670E11FB243E4876AD9015F71AC4F78C20D80F5BE8A86EE175A3D3
261F152EBA489EC9E5BB44ADFB7558DD95364412907A0811E8EC4075D24EB068
2E7602CC252BAF0E3503300CB5AB595D7C58123CE01E1590A3015450F9883520
451636E19BC9CEA795AF21EF3258E5238D15FD86F9823D235D1907954B8F5A30
F6AC497821DA8DD730A54885A1164A287A8C8C869CE3BAB8C4891D68A761D9AB
5E1A47585A4736B1045640800B0984898282CB81A3B8188093FF5CC9FE8D9AD1
6D04DE108727FD7C001FC63527F9CC772D4890F05058B3311810C6867550C0BD
F62364BE5F80E23A8F5206C817E75FD12153EF75A00DC599523AFB8D80C54177
E7D853363B246759EC16209E840889804C28E32FB3BFF145BDDA844AFE41C670
9E487288F926C658B30905B56CCEDE37F37167FBCFA2CC9AF629638CBA1EC08E
9F58EBD80322680FC4456E2E0FAC9D31CA1B8B7879B21FDC78BAB3C944BCDCD6
A65B67F3692C8A007FF162F64ED65962C52C7A22BF7AF3BC490D2046235D8EDA
64581718ADF5FBD7277E57E9919BD1055B0C3865852D1A5B12F15CA11F3FF558
FB0F071597ED37968F89385864B2CB30DF6E62F4C135D31756C2EBD239A0989C
705C3684DEFF82699C0F42B3D41AADEF9B66291911495B0944DAB553727A204C
65A18A0AFA2C09BA5901A21BC5A3C4E6BE9637FC8BD3E94D6257BE1B7BFB1472
55171592ECF80CDD365650AEAA5E1D52D8F88DD49EE66A18A785B966F2F87215
1505BA71296A18E04AA75B99F091D4876A83184F0F93C9A09C65A698455D1EAD
5C22014A05C3E613E093228678586D1590F4C85CCF00A967ED60FC7E9B9BF26D
89F808B05C2E483B9171450E4CF28EEA6615C296181A2ACD808BC68EC9476D35
40344C344C2B60468F2EF9010C645A00CCC95B68C83FCADF3F1D0940B1D86DF4
B2EC81023B5B9E354CFE201E2EF6220BCBB479309AE973BB998BBBFE4C486AD8
9EAB0D0C229C0DD9C17F15D490A70F55BE1A6C135C1123CB216D77DC5FBD69FF
F5A9A7B1874BC65B1F468763282BC437C5ADA4086BBB9BDEA30FE67FB424B337
3F37DC4B4FBB23CF81A92C6EF1F4931DE0B7C7E22A39CE53FABB454EAF6C0497
97CEA95428844AD4E450427A92DBFB6061F8B1DC1CFB1C157CA626EC056A68B6
6C652833CDCF08803C36CFF6741A5C45AE186A2F9E899153F7F2F9E5AB5817EB
28F9A81BCEF06D768E9AA488079366B9E331D0A01FCE02B60BCE7A4975433D1A
CFD965F3C47D22B2B8E48DD5E4ECEB25B18BCBACFAF313AC51BA6360C4F0BC34
6CF0AAC6E0FDC9A90A49DF2C1C539755080AA332B33481422D0D3FE03EE61C77
4D39E1F2A3D374AB25B33CD03825FF80B0C4C682AF762302005B0400CB5F7CB4
982A85E65A0951E0B20F41B614C43F5ACD9126970121B0F16C9293AEA08B8FC2
5115C2B59B1671AE16E0B35E28093CB8EAC2E6EE446E7F17182D266F978C8222
761BB99939E778C4B37430AF88A3F85132DA00251F5A4E3AD99E47E4439FB5F3
27842B7C07EDDFCC655BC55C28705A1140BF6D9AC356F55822EEFE030D080291
D452ACEDC5D0E804D136D99B130E3BF1663339F4CE8710E4F3D621652DD2C7E3
356119D1E4BD658E9EB5C64396D14E541FDA2EE73E38B3362BDE4FC9E600BD41
E30B56D88F2DB4AAA1CF706F141A0A108ED471DEAEC54ADE2497021A2B138845
2E5D5F195A0D61A2E5CFC76D816168B879E23DDA5BEFAE5601A9125A3B90CE13
1D3B48612958B389F643AB70F05A3150435FFCF92A7779C6EF4E98BF1D5888DA
C354013964E7B15772BF5D304E3DAE023DAF73D816CBDDA634BAD23DA4DC7FC3
B4C147A3CA6B939B4B19E81AB22056D6564B0C2F3B595C9F8B8A3106AC80DB85
CE6635AD8EC793DA7E638388619EBAB9C62CB51FA723C5F22B0532A91A1CB942
1DE1DD7BC5D109B52B7093D785F43D7EF1E43812D566927F29AB24C087E0F89E
AC202FC8AFBFFEB7B9107833EB41C864CA53EDD6880C3D75B079C63B983F451A
4DCF54441D2E2D5B38F8D4FF1997C6524E9964D7214CE3CF8764FDEFC9ED5DF5
588991BE92E4F23EB14AC341B307C9106E1820F9F1844DD2EC4C5C58AEE11D81
27C5663D02A3008D9542F00B3342404EE1EDA12E74FFACCEC903E9ABCB6ADFA4
EB07AC36443DC19A5900C03C00B458426157AE838C755ADA472EC3CD85FFE717
1CF4F92D539D3293DBF97C4E7FC581F54759C550CAE58B26ADF5E7524C729305
DA2D0F38669F0C1927595AB7CB3397338DE5C961B3AA70DA22E24F5D5F7DF0EE
61C18E2D90D46BBD8F7B95A7BACEF0F59D7A86D619FE072F92AAEC6CE3913A5A
406A455C4AE0BC827DEAB840570975FA224A7914720E92784C5E7013ECA08614
30BE54C47A22685D87B84ECF255178D2D2C4B7F7857E7F55762825505BF7D845
97813143C60D3D1A515D52CB8732B9E06BBA3735D4459905072804AFA49FD272
3E90E176A3473CD094863189FA8B4FFCBCD6D275F69EAEF9AA8C50D9AABEED05
25C116ACE245596D4CC442AB836DAC4807A66F6F1227D0D8FF71335393E9F72B
BFCB7462632EB4D32435A384E0F489D72EF60183282F5E586BA0F374357D84BE
CFA8DB75819D33B4F40A08BBEBADC84A7E00A389D5DB40B69F81A0737A4EA1D0
B1F0BBDE4C21E3DC108365BEE27362B2B9547B7F1803732D18A9B4687989E55B
AAA158678817EEA76FDCD8248221B5D57C11305FF53A443EA9334659FB1B8C19
15E83D18817B3CAD46646300ABC90A568A8D9E0D6C1CB168927E4925532684A4
29F690536B79F694C129336C40DC786D901579C497C3EC6D98BCE6B0497E4A4F
0F2C9DEDFC2C3D1C14EC30CBF83E5729F1C074D4F1665F35710D25F710E45117
68F708A00D003043473B837D9FF5D17B997EFF71C0B00B951A7570A341DBF602
CEDB351FC747926594AD9E1914F07F659282255057A4BD4A3191E6B9AFFA3E99
50914CB0781D5442DC61E235A20EA2DFA0726454C7D49477C1BD064D8CE9D646
DCB9085FCF3AB2178B4192782402D4F78C39F044ED6AF03CA44330F361BA4F29
1D8D47BF8B6976162610749242714C69C6FC03D28415BE077393D77C96B6024A
57B5AE20CA48D1DEB4C668AE63B11D15A49B6E46D8EC621225A259A61AFB0124
260E0A4B165539944EDBECC4B4B8D44609656A9B4BF36A724D7F414849B63D41
9F4B45BB03148722C1B3C1764AD9D987DEA45368072750CAD0C9ABC3F49233E4
97183869EF2B04A9864319494CA4A0C65C626C8EB38F573208788DF39F63343A
DEA9D821A658006E6AD135F28AB132EC69E9A4A7A08C2F5AE0174990833C226F
12A20DB04821702D0F93FBF513D7B85603C8A0F37E522ADF2D327932D9B3AF9D
FAD4E9492EEED55C4991067229F13CE376FDD5BBC9D27F6D857C35FD568C4B21
07E8BC3CD6A1DD200D31F6BA872ACBEBA94F1FE5920A18A7EB469BF2FE0868AD
5FEDAB9A24D99EB12F66F5579AD1B2607C2C1AF8F72103F1A7415F526A2CF3C1
6B800785F169D8E9C1E5FB3EBE07CB1ED5EA53FE5E6D9A09EB31ACEBA9F8E0AF
2AF7C74DB79A2B45A47D4119D363B0AB3AE612FC23069DF8D162A2B400EDE05D
F412F5D3AF80887F93DB3F8EA2A7E25B58685556C172074527E260514D6618D0
58D7B7A624A24E9ADD421346F6422F76D7CED18DDF69931B83B3329DDDD044BD
3C3C36FABC9898C3995CE530994176F942821D2B314893F2B9317FCF4A5AC193
09E617F2CA0C7D35F28EE7422F7CA31B3A514AE5641A7DE56207EB2E7480E120
7329949BFAA4259A32EF3F1D6911750F761F9907A438DDF4506C6ADBAE868F89
301460A0C3D4B521916C7DC880DFA1EE1E270FC43E31513D45928169754EFD6D
AA3219E5AF8DFD8B263DB06519EF5B4DF76423A7DB7ABF711BB0C7C703843BB4
FDBCAC9F30D92CBBEDE059D026A5A2D9B65246D93E36A724C65B40C79A86D885
8830DD50D4A0FF28CBF3E55CCD8018D117CFA1598DEFC33624D698D3FA83EDC6
E2540414C7DC4CAAD2542B807009054090770432D63B1C903E565807815E3EBB
14C6AD0EA3E77DEADCB28F65FD2288E0DE96412F82723A5B16FAEA0A235897E5
7D9FA6F817BA69AEF2259E1A12F791CF64CF7BD79623962FB0309E68ED1789EF
28815477997EEA26D31D194DA347C0CBC91E57A63F800271FBCCD9DFAAB5E93F
903A8FEC0119ED1E6E83C30EA9BCF8ABEE772BF8AB008463B09B4CD634C5E6F5
BAB41A286B113076AA924BE26082FC12F01A62B1C78D857A01BAA2C5C2C79D85
78DF1E5081EFB6EBBD8ECE892063E0D6B5706557B831934ABE6D113D7FCC36B4
D65CA1EF84B8FEEA425E21913CBA31E0267C2BD4636F724AFED7E0558C96A7E0
F31A48B1DD6F27D321F6F925E2E8FC4B58E6CD01B59C73A14DBFB287B7017F6A
E0F5CDFA61BF88C32EE1E82A65845A59CC7C1B147826CDFA9B35807713E38983
34BD99CFBE66C4FDBDD9B9180627976C0EA7D9EA5958819F5CE03BEF6B59B669
723240EC31E9F9EF398C700948FADE7A6E4B2335E903D3CCD648A76B4A70232F
0EF82F448559F8CB85DD9909A74AD69082D52D62C959A39542360C638A47B363
1DB34AB2DDB7CFD30739F5638F9917A41081B83612B3EB27C2D8530C61A98C7D
F0449F81590719B9A9284E841009D3C81A0BCE888D2F9A6B78E6AC615258E663
C9D255FBECA07BE5CF6DF749B1803E3C1EF42D935EFB4AEBC656854ADB4B9808
2A4E7C290926DB52258A8EEDC66700FB549A92821750897D004C5FA7A412AD92
4829C2BF2C24F464D9A27DF84D86071B06BF6FE1B4C2BDC611BA31140569566F
65860211D121430D11E87AA6C12083B29AAEA996FA91FE82C131611B0EE9A983
FADCC302B6E3FDE8F35C619FE7B82602E25624AE69AEF32464B022ACFB895544
3960EFA5C3E0FE565DDBD45AE467A782725D8B3E30CF0794B6F7FE3D52148AD0
F1C8B8B3873F10DD19B813E15DA410D38649A1B1B360921675AEF8F27C12484C
CE6E4530541C1FEF198165415498597436449EE0F9445B4C8063B612B52CD823
2E2BB8D40EE21FEC76772B068BE063365D8C1887BB13D0DC1902B31D1DC2CF9C
9DF2B07BBE645A556C0086C730D91093F42EB0554BE826A2F95A986F8A63D052
24C9DBA79A84DC57C2EBDA8E422A9550A2EB2BFC8BABC1AE4CB0FD382E26BE0A
83169B6C371950D7EA612922EA97B59C1D004F8ABF17246D4C8C41D27CD2CF47
040B5255F62BD2B6A93C68B79E9026102990E064176B21C5E43FFE8183B78BB6
C934338EF87C2614D35715C3E996E6DFC40960E118A3C99F54BAD880A38BF73C
252636CE6A7D12A16E34AD90D4332D31C2662EA19C6577035F9EF833A4B1B51E
56065ABFEF1036EEAB8E04F3244F52F4D7C0250D658C633D68B6FAFE895787CE
65A90AFCEA9F50CF9A75519684785B73039B66EA4D2CAFA5ADC40451308337E1
B50D361D971B735BF61EC499EBFC84988AFFC667D0BE39969DAFC31182DA4A93
9000AB06DEA5AC315C170F158632C17F42128EAE3004F4689475892ED9B8F060
B969D4438A98A52B02183737B9E9E6D3D3EA99366BAA2EB284777A24DD129026
E160A6453D3FAEA6ECE52E4B3584DDBD03B345F3ABD2897BC9C6E095B807D458
D51B76C73173263805C120912C4A40F9E2F872A02C4087386CCDA558F5050025
A45A1049C9625FC6050E6B829B614BCA4AB1BEE9F392284E2BD1043E43EE8134
5E182C07AA0A48FA9399449616273B7D5CFC97271C11CF090CF5F36B3DA0FF93
246A390879AA6AA248B850A3DF9DDA78F22714FB9DE80D3833DEEC7848D7C0BF
826C4825CF63C13B40CE21656E37A0FCB6836AAAC07DAFC63145B05E3EFAC5D3
E3EB004A689C295DB72601D19A5487884D04B679187879EE3F15F166F1E2367E
46F3F3E4E67EFB8C82885D9D7F74EC35DCFDB9D794CDEF1A995E730BF1D7F063
A8419830FC907CDEC4ABDB741828D147C6450EBF5E7AC5FA295BA0A76FF7FF80
4898146B135BCC304C5A1C35ED8D6BB55D3F5FCA77ECB3172F5432AE022F1580
43BEB6A6820566EAD71325D69BF3460E97C92CC31DC7139C3C3E760D058379C5
014882A7FB5165AFF0E95E988114B4AC5E6DCAAE568B7595A72DABE9FE776A7F
1428C5CC1E86F6821160698242C7566FBFF8DA17AA315E2E1C635618BBFEE940
CE89127BD552B9E753381828EFCB01B35A95D0E929461A4A0166B3AE0673BB53
1BB92A1356887584B94B00DABCEC84A5888BA907890E2ED2B94AC84E717DC761
2D6EC842A956F9884A40019536053E2BD0287A3C313E1F43F07D3DDDDE40C2AB
B4115710C6FB48E552AFB2C2BC452857FBFD3954795643DEA2FCEAFCB4B635CC
9D88D8EF06C084C8DEA328EB687FFD23BC99D34FCB2E6586DE317EE3BC34234A
EDFFB2CFB9113CC5A830B5C5D5ED73F2F7D159C45B12286875546A3537EC6DED
AF60D1723DF115C7FCDC57DBB593278232FAECB356174BFDE732B68F61B19CB6
C0D61EA8F1D7AE9BDD7E614BFFE78D628646C32C1D95C0DAD9F3530651DF4BB7
1BDB3DB5D7275AC8492ECF2B562A20068380A59B6F6E4940DFA3D1002523E04B
E24E0A032DBE31CBA82CBC29FEDEE39359C351BA8960636ADF062E957855C4E8
28D61D7937837DF89B62C6E21AB81DFA802A39C5FD642AD61CD0776567E48DD8
D9094FDBA1613FA279A4DA14E2A8D7197B0F7D204DE6A601E8C160B0436B0D03
235AF50043582A0BB588897DA22D5C20F8A2C7CDAFD6BEC1CCD81D28BEDE22CD
263C60160BEC9FA8BAB9A55EF96A710C206B78D6B9EB6AC39B6BD772E8E2779E
6A5588EDF2D3BC8D252111E8DB45FF21B84D20BF831051B61AE37BD4586C793B
4E7904D23627E2FA765DA5E53D4B81EC83D03F502E7DBF202BA558B4EB271C57
922DAE1F23415C912EF1F70CC3895F4598A5BB79E23DDA590FF50155377D02C0
0E0F07C97277B173AD9F901D26B25E87B1A441900C9DFCC0F7FF114C014E1DA8
00226FF9AE5D98FFB02D8E94207DD4475611B45D1F1026A613D0D2FBCF4D729D
7E131335C212B30BA91220BFB289D605B6A8319FAC5C83038807C1CF9869ABAC
639B076F9522A9188CEC6E67F64B36C58C36A88F60969A764BC3650E777F2254
B2B54A972B3583047D43D202EC047CC23B82BF62646A00758DF5D608B586C124
751DB340CCEC2DDC9D395448D09F8AE5C4472A15B636F7BCECEA17F062BE3DF6
FE6F19A849D53640C5E597BE394D55A8FAFF09FF9AFF3CE6F97C2B2459661177
AF96749D92671386A21A1746A71DD2DFD10FAB2CD911298790A1A918750549B2
0CCB32D2B7C11EF06056690527A4EBD1F1355C3BD6CFCF9E20C9F30363291678
A7D920F128855CDD17E51BDD71449A9B7E90D35410E9FC9BF1625A2C942739DE
B8C2E5E9E7530208D2A856AF05D418450827DDE99E776709346F4855121FEEDC
70965D0185F5E174F0758420612059AA4DC1FB491ACDD3A0CE09DF3D2AA01AFC
9DDFC009015756101446BA8DF32E30062BC9CD9533DB03DDFF8F03465B6DC1B2
450D42BD399CD6885317C80CB800A292BECE4041CEBA92D692FDB946D81E88F2
A0BFD5C81EC5A93CCFD1FF296038CBA5719C17A44F9B5F4E39D600BC97E27C97
0DB371D59A05EE148F4BF935435AAD1748882D199B9B7DF58324AE6E3B639DDE
323A6EEAFEA964B4A6DA929B90EEFB3B1EF3AACA3FCEE17C7835239CD823B382
FDD02424F0BB509687B0C6958967CF82C547CE1F1BA09D861C5D5F0BC58BC526
CBED223A031BB54AC9602270528785F331E02AA401E30A909608E8C4C56CA2EF
0B672289353980885FE5EF054D5AE538348F53736896BD7508ADAA2EF193AD1E
8F143823BA37E501B80227A9008E0DD8F572D884436E862A02B218564179C9C0
23B7F92E948EF4BA6C72E63D1DCD11964CA636168CD464420EA747724E5E7D7F
020BDE094D7C51D1278A614DBAD1D8A12F43EC67BAB7373D6BAB4F201EB91D7C
99C1349786D17C13D70004F43BC14DC87F654239C8074700361D4B61C441932D
CEE3AC33B952FDC3C3B9D477F6D1981B59B4F70B33D7B638D4FD147E22731F43
647559A90A7B4F21F4026AADC7808CCC49BDEABC4DD658E02AC0769E0426C313
F48E11B936CA8122B2B8DF640A796F4BE98DC43EB2D354D39C27111B7A9FCCEE
111F30567D294DBAF36C8A89B0D6A120A582344B4E77724339F27031CB75D9A8
D026BF41741F384965825276E2B0FE907671EF8B6F2C8648D63D975FBB6DB545
6BE27ECA9C560DEDAA4418F741BE6E4FA13DEAC6C4F0FCB8C870433333766A88
FE23E05C921096AA97DC56CB17517DF95D8D5E51D994BACE39AC902E2000C12B
3D31DE5E0367B7006F757508FCB5D653DAD14A83E2315D23CBC84FAEC848311A
E8163E5C84BF9A609509DAEFE1C3C16145C2EC24E3221E75291BF9E827F48759
855891196215534604DC2653B9108A90C99438F4581F17B6AD83AFF5DC5A2FD9
3BED414FD9C32FA545510AEC7D7CEFCAAC59A93214150E094DC78A584CF1F59E
6E13E74C5CFBB828DA384BA1943518C5D0FBE0776EA17C52C3D0452031549764
58922AED09E56CC6D3BF92770A027E6F9C6592605A206046CDABD9D54EA413DE
4E7EFBA58BDCD0B2E9F6600943B0A5587553DA49D92EF4318E28998E07D1D372
48BB4F3D06424B5EDC5A9B21DBDC65B6C8DA146FACEE8E49B98AC5CBE49D8456
87BB12CD0913F48FC834675E0F271FB9A33DB9F2D4862713623BF1092EA9A097
ADB7C0ECDD63B978644B8117193C4861035074D7D66B05CAFBFC59BCDA8D7AF0
6EF6B060A0EC53E187893C462730C14CAF93E7AE5638CD88A43C54F3095D6F11
5BD772CC4C3ED8EABFF2230567998B58154582EA334C8BB3B65AFFBD62E1EBC6
3C182EFEB487A03399B23134DA7AC5BD0F503D3ABE63C3D4530E353E5270D5FB
1C45224799C0B710586D3E3DDF28A5864D566F5C53255C9BC3EC91BA2BFA6730
6C1B77709912482BB9F187F1279FF1C6109ED956CFFEDB3AE7F3478503EE68E6
0D873979980A6D4BD4128A5158B9B36B65F5F83E66C2C8397D23A1DAFFE71586
198A4597046B0703EB144DED5218D1FFA5F4099812BCA61A501D21F6A8A812C1
CC027C7FEA0A1B3AF89372E08DFDD9F79AC2200622A13BA8321863578E15C7B5
9E6BDE2866332FCA9EC2E13B4460236900BA62BEC0438675C93BFB1714F93EEB
462770CE65BADB6959B750A71144AF1DCC06D9452602C6756C587166AE35A578
F0E3442BF983B90CDB16C5317E493B43F8D11EC87D3070964D4C686B65B808CF
CC21F32777A4165FCE5AAED1C763C7F5CE594CD93A26BD00C7DEB59D63753FAB
6F4BF4D7B35D01E3A198153B3549111370EB71799DADD1A6BE6D49998860482B
626C628499DF73338950F885151F0383F5188E09A9E1B8C023F7E27955B42E11
9AF4464083CD0B55B8BCCACC8D0360FFEE1824EC7F9E54E92E75E48291ABB565
C1F8644CD5D9F01A26BB879BD6062EF555AE24118F105F6770EEF2A57E3DEC53
3791CF0EAE32CD4DDBAEE2F40653E139692FAF964B9CA0BA5B54BC20ED3F9090
5703ECD2964718CE9B2A4EED730C4363D4761D025AD3FBF0D53A5374BFEF17D0
27F432B3E0AEC8A58B690AD1613D52526FCE3942BFDE611E4CFF66EC4AA486E1
88596008303B55B96499A11672380CD95B44F2A9B05C38909548AF14EAE3ACD0
9B51507B3D3CC39B7994AA043E4E44E7AD3ADC6C73336EEC461C81B8128C629E
F0E86EA18E1315BBE974AEA2DC5B35092957CD9F412B6520E48EC59AA2507B49
00AF3112637E5B60AE1CECE81C816F2426D24C595818B41216FCE5B3E61FC4ED
B48D99497A134DB1219CED437D0A2DA2EDED2A0B6E30A17EE78F5D095C49F828
D3CF9ABC2827A00AEC209962BD3406653A98653F419EAFBB18DF86BE789911C3
3E05D53C5F042E512B2E4AF08B012316E752486FD5CA9E865D7C3B977284E5F8
4B725038AAC6952E417835F42C463C6F1E62512F86E3D9709E693D04ABE2A2ED
A73E7835CD2CC6032BEC0A209FEA7339FA1C3DBA60758C37907319AA5E3423F9
BC866B6FBB910B766B0D3F90E93ACD646C1B9E0113A1C09295667F372F2176DB
8BB9CC0E8A5A052F4D53D6124E3F3267EDBDAE35B3385F8B4958813842795F46
3A942A211DDF7F5179A1F26394EE81797F629FA6B66BFC686A71E401C3D7EFA3
F6906B3D8C355AC254508F6207BA17A89280FE34639833E29C1EE7A88A2A8F73
013AD9CCB7B21C8C516D79AF9D3324976DFB257839F80773833BE29590B7EBBA
A4E3CAAAFF37BF3CF3B287B7836368903A8BDE9A3F340F55B5D301BA87EED52A
6916DE024CAF6669085A3618E4F19060455971B05B84B2E8A8A3BE438BB17572
42BE47C2EF1682A05ACB1435C456501A6BB2E325B32A178A1E5DB965018AAB7C
7884EB7CB4542043A31C6F8B4D4D32F2F7C002945F2928A218DA7B66FC13D706
C4D7F6CB65990B7D718F6A16F933DDDC891E9C6987D0EF50FC3859C0CCD704BF
425C64379E8F07D1B4F53F6F860FDB2BA4B97A09D1EEA744BCB83950B3B55DE4
5D887C483E103C1EF48ECA5CBEAEF0E30C9C97E095CC82B1865ED0E8FB1BC460
59CBF4CB7E81A0E37F669BEB740F13AADB74F675BC0693A324D5BD4C1ADC0DAE
9A91044DD214031FE8339581A9798BC43DB300B5113FB87655EC865C3BEAD9DE
F9F2F8521C2910464AB9A96FB08FD0F3114A13C2A8CBBE519A8F57C66E29E1CC
E364DA954F895436AD8E34AB6B32B5003F5D18F039A152A5C611A52AE12A4658
8DF13131F9DB8437558804DA9BEAA7E70B4C0C5CB3807EFABFDCF9F836D142BA
9DC9FBC9D6E6646AABBAA96BF229A004245E590EE6A9EDE3CEA40FD502ACBB13
9DABD34575DD1D97765E4F69C06E0E7854CB47132679FBABF1DF31D16F8FA295
CEEBD5539B635B544499D40AA6D343664B19774783F390D93E1A3971EC0CC9D3
D768CCAA5872307AB505D02D5C2644779E66C691DCCE64B3218933452A24FB1A
8C30FD6512D2EDCC7996CA18CEC5780844BAF1DE96AFFAA9A7FA81BC79FDEB57
0EC16360B75E6D18B57ED29D3BA29C7E6C7A2B0D86B7025004216CD9C9B0D14E
85D92DFE733657BA7C2104003CE178CCD75A3B1E3AC1950186E0DB76B4D664B3
9CB56007BF7CC083749CEB41151AC74059F3693861AC442CC827F809441FDCFF
973600F469746BE07335FA4632A25690B759A4BF191894977F894820E9BC22AD
9CF62C6CC4B4DC0B6EF3F945B1D97853B113E3D9AFCC98AA7117C2D597A3684F
43A22990EE76A4C6D50727B83A75006A44513AAB8A076F4A6739934FC130D357
20A37E511A043B25D4477B713B015A306F1EEFB6694C1311F0F4FF29D43DE342
018E67F6B116ECD19D0A6D59F2EB2C994C0DB80E2A3617825070AAADF3FC7112
1DF965136E5D846F2E9EC0646B0DD0094704C02E2FB6C5A1FDFDDA92FFFCF7B2
D6744C0F0A489FCA954A0C135B844618DD087768EC44A893A7EECB6D95C35BB8
7DA2B4A6F86A443A7BCFF3C4EADC91E9061F9EB6F8C21A2581078CF91CA4EF83
2E7D6DF3E9E03BCCEAD202AABA714EEFEEEB173B2F166FDA22E38A447F7408BD
9DC974B521AAF7B7EBD718248AA3FA53B85D3EE6DF698FAC50F415ECABF34840
1F4EAEA57B8955BA7DC58262E52A30CC96D2271A985F7377BEAA49275B5E62BC
871BCFAE9AB64225827FB951E69F5F24D03D05ED34391BF881DDFE353EDA9F08
8274216CBAB096E8804492D23773D92B41C75BAF27BAA2AD4F426E594CB35E31
2710D48AD36C39363EDA6BB45BAA486A85DBC2F45566226D9EA08B48360A2F4F
181909ABFC4713C309364EC9F6EA00BCA686611609FAA32E9099E2E8FD5A0CE5
50FF5EA6D00E3564015D09906F94563D4CCE02F844A9C839DFD377F7F4332FBA
5C0D3077FBBABD436AD86BDB2B16400416A7048A811626E0CA3AD54070C80AF8
2DC8CCC76C007B90466167D1AB710ABBE19B2C7C3BD37B2B6300A083E7D1A125
07FB48161F0D293A0032D6CF19AD21811FD0A4E11C873E88DFFDF2E3E5E7B769
96E1D85CB9B62BDE07EE8346E30F68FB69331E39FE966AC1214E4DA30F2D2AC5
15EEAC8E075520156C2CFFD8EA20EA384D74D11F9273358E7F80EE28813D66FA
AD8EF6D6DD77674A3480CBFA62794496BF3FE420F08D2A07B4F53B9FAD619964
4165A2747A198D86A78F708DC404283546D7814BA53FE7FA161FF626461E96BA
77319C3433A852EB0B3E5A1B0528FA9F8BCF9EB55B4E443CE79BEBA97AE481AD
4AB1DC86D8BDB89DADA06B87EE6B063A416ACB9550790198029F2205E51C059D
CE4E6EF6E89AD62D53F8A4BAC182999D231A2F0B3E70AAC7E2D3226CB034D1F2
61A00C76FAA4EB347390DD0833B3283B75010E5542A389EA2F787A4693E25492
1B8C3FA4F9F7EEE92BA769DC7E4C5AB3F50FE19F3A3904ED7C5543D23196B59C
4A11C5BEEEABF1FCA0E3E26DB60D88639B27CCDD74EADDD86CF9DF579B3D7234
9C643723C189EC1FB27501361CDAFC3655A9221EECD425FF9CDE81DB6A122A70
DED859911B0A0804598D0E3C90E3AE0FA61274A5062BB1CDB5AC5FEED5FB69E2
AACCC8CBB70698E0BC5560F2A9F926A5855D4401FB1F62CD6C9CA9EC7948776D
0EB6C3A88D10A1DEF8E194E095090958F9C7079255FE5C958B33971B67D73610
817762EFA48C13C3C2AE1C9E87321EFBBE2BFBE55769AAD700ED6BD5A013FC3C
7CD3F340209A802E7A1D33B7842B4B07436844D9F59948C99E8772503511D86A
08E1612EF010DCD9299ACEA7D4AA01770D98660F8D9620B7508B898B740631E3
60AA6DBA1E54991EC7922725600CA64C693341F7D4011AAE2D2BB797DBC6191F
8081CA1B6042715B72B4368D643CB7D82BA474B175215A540A6422D802CE1EE6
302C0AC1C7CA421B81B6DDFEA56902F018B08F868E7D5604DED821AE4C939B52
67804B0409836B6968F3F1C3B79341CD06E983A7CE9009A72B6EC01E7C007289
A702EE7999C2A97A199035EAB7BD49EEFBEB68157F979DC0DF7EE8E51C4BF6C7
0BC794C6BBE8A2AF2597F453C076341D757B09A3E3EC6954EC35AF45D1636BD9
3E154262B37BD16AF15612ED9AC48BF60CFF85EB4DDDFCBA1A6971678EA3492A
1641851FF8280D2C1BDD3B7599C24795854136B0ED501CEA8E19CBBF7C91D74B
FC107FB82A56592F27FC27F1D49D5FF4BBC0E1623180793E351159C5FAB5960A
2E3E913CC7EF0A07843E37CFC4DFCE94A4355AA673AA61555EE91D01EFAB45F6
927C79A86111E0D53472C70FC6A1EFB0C052CD7679FFFF591DD50D28C0A71C14
99CEF50F2E8C9742C8432AAAB19E4B6CCA656C805A230721E51750128367A0AA
72945C9494ABA8C58F6CA8228F29E7E73BC9CA5E20B1B2C5ACB701BB9F706F97
54F6798BA7B8225E8763679D012D9FB775AB1FA128C91C36EEE43CB41592BD13
837B9EC9735991A7EE6A4F6A047A230D44CE6210E275C4AAC7931329F71A25ED
5DE92278F31B2E573FD86696D98800443F32C94E2FE3839477F4ABB1565BF009
732AFFDD2FF708C1A3F3FA5CBEC411EEBD07899B755DAC1126CE5CF71C5BCE24
EA5CD771D0452943086457A0A9E830C0658485CA66A65554C5AEFF1640292FCB
CD73A9F93A2AD55F57D78667B38E110795251CEBE01D7F81D61317763D0C226C
1DF759FBA35B5D9288B8F54F0FB93B7AF74423F534302F11F0F9E782EAE32417
8B35316D55536783294509A4B1C135211F81404A39FDB273B64ED685BB2F05E6
532BB97E36C76B0EB28FD20AF1751A73E37D5200F5A884569DFAECD2F7F6618C
375D1EC39D0B866481D723779B37801F9AF7ACD4DC86B73EBA2F8F54CDC503FE
67ADDA409A239E153D16C17CD2F83B971005CA4FBAC0E247CC0DDDF00B36554C
29EDD3DE5931CC93B4859A21AFADEEDBAEAB31D735233093AAFA54FFA50A3C77
5B46790D67CC0BC63B05BD4B9621A6A1E57DFCE7C5DFEAEDFD98057DDC351E46
4C6B20242E8CD67888F92E655BA87F5EB2D259FCC4A764B4913744BB8C222DBC
80B3A27C2B2E9819048E9AFF58CA2C6701C4D3E39979022FEFF095DA482A48EA
00E71C0A4414DA781D49720DC88187A0F82B0BEE953525372CF172D46B6B9441
2E7CF8B2C54489E6D6A8959D3F244D8AE9FFF3F592BB136F41F11AFA8CC986D7
951B792DFF270E096FDD8292CA3859740F191992BADF5C684F561B4413C38DA7
401609733F47D9990B238122A8AF3AEE16B83E7A2DDB24B704DA1014F052E527
C49A2C9C840C2B0A3844C5C96C3FBDFD4730D55851D0844A43E24A5C47C34D83
5DB493AECF6389494276FDA492539AF25757A47A53B42F29771497E9F5AF68E2
540408A71377ED4273E07B8DF4BA5D60BD978A4104ED1ED365E7464A6E912124
84F66764A0D815C7E354B73B808F50AA314EA21AE73286559F73B1DFBC1D26B5
445FF5374BFD8E2D97B32CDAFA0C2270679A62DD349CB6F6A20E796E7203FE97
E71B0E19D074858D2BB30FEDEF6C34FAC4077DCA11296D37D0B3F10D8795B37F
4231A18A53FFE7F6E40840193197DD6640CAA6F371095A260DE5DC01B8DEA95E
C206AEAF56159B724B67EB2937B57178972ACEE54C5F8EA613685F38BD1613D4
5D37DBE273EBD4D52570D68DAC80F6AF3A9121D8EF4BCFCC80EC71F78908BDA2
269DE03FE1F01FCCC7F5399762D1BC994E94B6179B1A7FBAD1D309EA3B41E58B
2A7BBEF0F174BA9AD649486C799E667065BA09725BE6418C64C62DF43E87AD00
D2E826F97162E51BF95F2A67090FAF972407EBE347570AD63AF6A82E984B2496
11BEAEE180A4A48200CA7C3761CB4143C5E8B2EC957EA523BD60F37EE2857AFE
C47E25004E55C593424A1C0FC24255111255AFE2F18C1272626A0CE41B25CE1D
16865F3C7ACFF6ED4EA6DFDA17340E96A8E6CDB2F0D6755D8F7F5A6F1A68BB97
4C12EE5E31D9C5563A0A5557C1E0913B055F591F8F2E8A74B365795F7276E374
1C8EFD42A1792CE5A2B6C325C39CD88E4B559CC695F7D2F96BB74F5E3F01C4FD
8DDC8DEB238A2554A0963350F1E3F16FDEAE6A34ECDDB9C87ADD12BBA280B558
73F38C194C67DE0043104AF5E61366D0E9E9307B6301BEDBA4107593EDBBEFF3
B140B7CF51BD51B099045C8CBEEDD6C586F5C0FC8BCC3D355A4F3C7BB8FF0113
F134EC89F518E225C5ECBBBFCB7D5E1BDCF7DF04DF478C8AA46788DD87665BF1
43F03485E11FFE1F67FB6D16AB556EFAE54A5D3FD3AB69E247AC2F1758689851
A9537A6DAF49D0A85D7764EBB31166A29307F6343DCA5AE980983A41DF300A7B
3E985855FE521816004F7653175F8C470FD1FEED1FCD70B4A6855E2109A878CE
4621251A2CB584650B079CF9D096F0A14DD3A276916C2B7511F9848EC764A5EB
0BB4F2C8AE029BD1172B430088B5786E7D6C82680B06372211F15B3ED7370585
1BBD2AD9D78C6781F2932122CC04FEC35A0023F82192384592AD70FFB73ACEF1
2D16BCB3BE5B4EB51671AE9357176D5AC145011B77175FF02C58724CDB27DBC1
BEF92517B2A7265C3E602A8308B3CE320C7448E0C50541DFB3E5E98186970705
425583BE8D6250D70C0DDA781474A6E41A25F0C95B7B1B6DA4D7D31A9F6BE6F1
46D4A9DC78F419FAB7C9E2F027B9183336B45E338CBD396A3D7C0CCFFE26F87E
3AD1D4239B902891AAD7B57F2597B0570F6ACE63F4CD6CCF332771B58DFBBF60
7B969FE66E1FC555E83C6C86C010E5250BF9754AA7C5A07A5FA1B81349CF00E4
546ECF6CA4AA10D95E252D6475E36DB2A4461B3384EB9847E836B14D85F4AD8F
8A00E390D5F674E19ED86F205FA763D8FF942D8B488177A8C8F976CF1665CE82
2B4A6E09BCF9EFA9070614291B2B0E1276E86866650B00DCAF38B80F8C4872C5
A1A252445F61A49B5AC2746B7D099884D8021E9C8349EAE8AD6EB72B6B3497E2
4D8740D062C120BA087F61117F95536BA202392A840C03215E11765AACE17613
FB790982426BC1D4BE99E145B2D2EDDFAAE8997018DB164FF9257055F91B3581
4D90ACB1E3A4D69168E55656BC6FB799B95D5889EF9BAB214F051179E2EF5B40
210461A17DF138F374C1B265FD4D65092AFC970854436B8D5B512083C90B476B
73608413B83693B2E331EDF447D57414E52451C9E15AF8B79C03B5A165007236
EF014B547DB1113DFD7CFB19D059D34F9571BB8721A1B143F5DDC930ECE952D3
17A217BB46D660A5971B8B0488FF7B789D5597FE88BC0DEC2F16E6D8257DAD5B
E7A0300D34614549F7AD03D9D1C3CE7A4BE86E4A67B1D8D0BF702F517829D4A4
450EC385936F5D85031896D58E534234ED7E3C96AC75FC0B744A6574A0709BB1
DBA2AA29249BAED5FACEA56CBE6C2B3E31CA0860493707D07DC62F7707A6A3ED
98A7DB137EEF6F9B969FECD3B149C00CA28E9D7F6C6FB36D145C1FF6833D0F19
14865E009C6F55EDFD5801AF83E86C7CE9A38EB349AD42715D6B2D9764F28113
06D168A9E62FD42FBBA19FD5E9DD82F35C7BC4FE5A46D635A608592B774EC212
035244710BF5710BF0ADEFA17B56E2DCE6910787BAE7B4E55A023CACF650F8D1
21B14F3B8501FA7619F5EF57C5EB4AE4534C72B64FC10BA7B7F89D9D507BB697
F2675E801C13A3EA2142D8189FAAD93C0D3E5B44F34397C16353A36D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 13401204 17836795 1000 600 600
(media/cache/mscLiterature-figure0.dvi)
@start /Fa 202[30 15[50 37[{ enclmrm ReEncodeFont }2
49.8132 /LMRoman6-Regular rf /Fb 197[25 58[{ enclmmathit ReEncodeFont }
1 90.9091 /LMMathItalic10-Regular rf /Fc 200[45 45 45
1[45 45 45 45 4[71 43[{ enclmrm ReEncodeFont }8 90.9091
/LMRoman10-Regular rf /Fd 206[45 45 48[{ enclmec ReEncodeFont }2
90.9091 /LMRoman10-Regular rf /Fe 137[55 1[41 41 2[58
1[58 1[29 2[29 3[48 58 46 1[51 7[79 15[40 73[{ enclmec ReEncodeFont }13
90.9091 /LMRoman10-Bold rf /Ff 134[42 4[33 35 31 2[45
47 72 22 5[28 40 47 2[44 13[51 14[66 58 67[{ enclmec ReEncodeFont }15
90.9091 /LMSans10-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 8 1
TeXDict begin 8 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (Literature Survey: Finance in the Frequency Domain)/Subject
(Lorem ipsum dolor sit amet)/Creator (LaTeX with hyperref)/Author (E. B. Legrand)/Keywords
(thesis, msc, subject) /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 1 0 0 TeXcolorrgb
67 -8 a
SDict begin H.S end
 67 -8 a 67 -8 a
SDict begin H.R end
 67 -8 a 67 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.8) cvn /DEST pdfmark end
 67 -8 a Black
1 TeXcolorgray -600 6416 5098 748 v Black 1 0 0 0 TeXcolorcmyk
-600 6416 5098 316 v Black 0 TeXcolorgray -600 5673 5098
9 v Black 1 TeXcolorgray -600 6304 V Black 64 6059 a
@beginspecial 8 @llx 25 @lly 155 @urx 68 @ury 1470 @rwi
@setspecial
%%BeginDocument: STYLESTUFF/TU_LOGO.eps
%%Title: TU_d_line.eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: Marc Vleugels
%%CreationDate: 02-05-2008
%%BoundingBox: 8 25 155 68
%%HiResBoundingBox: 8 25 155.6373 68.5352
%%CropBox: 8 25 155.6373 68.5352
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: TU_d_line_M2#rgb.eps 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2008-05-01T09:44:39Z</xap:CreateDate>
  <xap:ModifyDate>2008-05-02T13:49:22Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>120</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAeAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;VNbiB5ngWRWmiCtLEGBZQ9eJZeo5cTTFVTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq0SFBJNANyT0AxV5P51/5yd/KfytNJafpB9Zv4qh7bS1WdVYdm&#xA;mZkh69aOSPDFWDaR/wA5A/mt+Z2oSaR+WvluDSoFot1r2oObhLZW6OaKkSv4JSQnw8FXtH5e+RV8&#xA;paXPHcajPrOtajL9a1jWLo1kuJ+IXZakRxoo4og6DFWVYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq0SAKnYDqcVfFv5zfnN5x/M7zXJ5I8jrPJoRla2it7&#xA;Ovq6gymjySsD/cbVUGi8fib/ACVXjHm7RLTQtYfR4bpby6sVEWpXETBoDdgkypC1BySOoj5ftMpI&#xA;+EjFX1/5O/O78k/JX5aaNY6BP9avjbwhNDtInN7PfSKBIJiVCh2k+0zGn8tRxGKveY2do1Z14OQC&#xA;yVrQ03FR1piq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FWPfmI95H+X/maSxr9dTSb5rWnX1RbOUpT/KpirBfyC/KjRPK/5a2c8K8Ne8w2CXGo6olPXQXU&#xA;YdIon/ZWIMNhsWHLFXgH5hf847ab+WnkzVvMHmLWo9TvpmWy8v2UKNEHmlfeWUsxJMcId+I2qNyc&#xA;VTL/AJxS/JW61fWoPPmtwFNG01+ejxSAj6zdIaCUV/3XC24Pd6fynFX2RirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqX+YdbtdB0DU9cvEkktNKtJ724SEA&#xA;yNHbxtK4QMVUsVXapHzxV4c3/Oaf5VMpVtJ1xlYUZTb2ZBB7H/SsVU7P/nMr8o7O0gs7XRtbhtba&#xA;NYYIVt7QKkcahVUf6X0AFMVee67+cf5E+aPNMfmHzjB5o1/6sT+j9InisItPt0LcgqwxXCs/Qci7&#xA;nl+1UUGKvo/yv+aXlbVvy4i85aZZ3VtoUf7iGzaKGOZFjmFsFWNJGjChulH6fdl2nwHLMQHMuNrN&#xA;VHT4zkldR7vM07Rvzd8t6vqltpttbXiT3T+nG0iRBATvuVlY/hmdm7Jy44GRMaHv/U6vTe0ODNkE&#xA;Iidy7wP1s4zVu9Yd5j/NLy/5f1aXS7y3u5LiIKzNCkbJR1DChaRD0Phmx0/ZmTLDjiY18f1Ol1nb&#xA;uHT5DjkJEjur9ab+VPNeneZtOkv7COaKGKZoGWdVVuSqrkgIzilHHfMfVaWWCXDKrq9nM0GvhqoG&#xA;cAQAa3+Hme9hP5of85C+S/y41+30PXLLUrm7ubRL1HsooHjEbySRAEyzwty5Qnt4b5jOcxAf85qf&#xA;lWSAdL1wA9zb2lB911irO/In5+flh52u0sNI1T0dUk/u9PvENvM/snKsbn2RicVeiYq7FXYqg9Z1&#xA;S30nSL7VblXe30+3lupkjALlIUMjBQSorRdqkYqxP8rPzd8t/mVp99faFbXltFp8qwTLfJFGxZ15&#xA;Ar6UswpTxIxVEfmZ+aflX8utFj1TX5JGNw5jsrO3UPPO6irBASqgKPtMxAHzIxViH5T/APOSPl/8&#xA;xvMsmgWWkXdhcpbvdLLM8boUjZVIPE1B+MdsVev4q7FUi8yeav0LdafZw6Veave6k0q29tYm1VgI&#xA;E5uzNdz2sYFD/NXFVun+ePLd3p4vZ7tdMAuGspbfUStrLHdJ9qBlkIHOhBHEkMCCCQa4qhb/APMf&#xA;y1Y6kmnXMjR3L3M1swYxKEW3hE8tw5Z1pEAQtftFtgpxVPtJ1bTtX0221PTbhbqwvI1ltrhPssjC&#xA;oO9CPcHcdDiqLxV2KuxV2KuxV2KuxVLfMmiW+veXdU0O5keK31W0nsZpY6c1S5iaJmWoIqA21Rir&#xA;wf8A6El8g/8AV91X77b/AKpYq+PL2BYLyeBSSsUjopPUhWIxV9YeWP8AnDryPq/lrSdVn1rU45tQ&#xA;sre6ljQ2/FWmiWRgtYiaAttir0jUPIWm+Q/yUu/LWnXE11aWrq6TXHH1CZrxJDXgFXYt4ZsOyv8A&#xA;GI/H7i6ft/8AxOf+b/ugwD8vP+U20f8A5iB+o50naH9xL3PE9j/41j/rPpTOLfTnz5+b3/Kd3v8A&#xA;xjg/5NLnXdk/3A+P3vnXtD/jcvcPuZ9+Rv8AyiV3/wAx8n/JmHNT23/fD+r+kvQ+y/8Ai8v65+6L&#xA;wL/nK+KKb89/KsMyLJFJp9gkkbgMrK2oXIKsDsQRmnekfS5/Kb8rCKf4N0P/ALhtp/1TxV4D/wA5&#xA;If8AOPGg6LoMvnjyVB+jH01kfU9OgLemYy4UTwCpMbRsQWVfh477U3Vesf8AOOf5j3nnr8t7e81K&#xA;T1dY02VtP1GU9ZXjVWjlI8XjdeR7tXFWS+ePzU8g+RkjPmbV4rKaccoLUK807jpyEUSu/GopyIp7&#xA;4qx7yt/zkf8AlD5k1CPTrPWvq17OwSCG9iktw7E0AWRx6dT2BapxVlv5hf8AKAeZv+2Vff8AUM+K&#xA;vBv+cK7mC18mea7m4f04ILuOWVzUhUSAsx28AMVYN/zlP+YnkfzrrPlVtA1VNRs7Jbhb5o1lQRiV&#xA;4v8Afip1VD08MVfRvlf80vyVuLS8by5qNkttodm11dfV7aSIW9pHRWanpL8IqNlxV4L5o/Pa3vP+&#xA;cg9KvLbzTO35e2k1s7LG06Wu0A9UvCFVnpJX7Sn2xV9Q+T/PflPzjYzX3lrUU1K0t5fQmlRZECyc&#xA;Q3GkiofssMVUPNGk6/Preh6to8NrcPpZuvWt7u4ktgwuIggKvHBc9CN6rirA9f8Ayr83Xl5PrYFj&#xA;eatqv179IWRnMNtC13FaW8XCR7adpY0gsEWX92jOdxTpirI9K/Li6tZIRcNbTpCl1F6jc3cia1t4&#xA;EP7wMTRoGJq3fqd8VZB5E0zUtK8m6NpepQQ219YWkVrcR20hliLQr6fNXKRE8+PP7O1ab9cVT7FX&#xA;Yq7FXYq7FXYq7FXYq7FX5bat/wAdW8/4zyf8TOKv0p/L3/lAPLP/AGyrH/qGTFUD+bH/ACgGq/8A&#xA;PD/qJjzYdlf4xH4/cXT9v/4nP/N/3QeM/l5/ym2j/wDMQP1HOk7Q/uJe54nsf/Gsf9Z9KZxb6c+f&#xA;Pze/5Tu9/wCMcH/Jpc67sn+4Hx+9869of8bl7h9zPvyN/wCUSu/+Y+T/AJMw5qe2/wC+H9X9Jeh9&#xA;l/8AF5f1z90Xgv8AzlT/AOT98o/8wOnf91G4zTvSPr/FWMfmgts35a+a1uqfV/0Pf+rX+X6s++Kv&#xA;A/8AnCq8W08t+c7qdmFrbSW0zeACRTM5Fdq0UYqwn8oNS8g+dfzI8w+d/wA1NSsoyrpJp+najKqw&#xA;yPMz8QEc/HHbRxqgU7bivTFWXf8AORFt+QWs+RrjUvKt9okPmfT3ie2j0x4IpLiNpFjlieOKgeiN&#xA;zBpUcdjSuKs6/K3zdf8Amf8A5xl1C61GUz31jpmpafPOxqzi3gcRlj15ekyVJ69e+KsY/wCcKIIZ&#xA;/J/mmCZBJDLeRJLGwqrK0BDAjwIxViX/ADlZ5K8o+XfMfk6DQtItNMhvPX+tR2sSxrJxlhA5hQK0&#xA;DHFX07p35X/l1pkV5Fp/lzT7WPUIGtb5IrdFE0DkFo5KD4lNOmKvlnzV5N8qW/8Azljp3lyDSbWL&#xA;QZJrNZNMWJRbsHtQzAx047tucVfXHl3yn5a8tWstroGmW2l20z+rLDaxrErPQLyIUDegAxVJfOGo&#xA;W2m+bfKV5fXC2lg017bPcSsEhEstsWiR3NFBb02416nbrirBl8z+aUtvM1/5a1K2Swi/TOsW000P&#xA;1qO4+pTRKqxuHT90/GRCyk9ivuqjrvz75g0mFntLeHhr1xd6fosaR/DHrL3NIPVK7skqSvI5PaI+&#xA;OKpFL+cPnaKTU0BtxcQxatwtpRbObf8ARrtHFI8UMxuBVkAkEqqpL/AQKVVV/N35i+Y9K8y6voF1&#xA;rFle2sdndRQ2a28EkjvHpL3TC6jEyTwlpAxUrE8RjopYMa4qm8PmzXtFk13UrnWo7yw0nUrGbUdK&#xA;MSB7bSLmyg9SWMKeapC0/qVpQ+k/djiqe3nmzzDb/l9Y65dPFp13q11bhrmeP93p9nf3QETTISAX&#xA;igkRGLHj6m7fDXFUl0C81jzF+YGmtc6vHf6Zob6qLWWGFPQu5LcWafWAVbj6kY1B7diNg0b8acji&#xA;r1fFXYq7FXYq7FX5bat/x1bz/jPJ/wATOKv0p/L3/lAPLP8A2yrH/qGTFV3nrSJ9X8palp9uC08k&#xA;YeJB1Z4nWVVH+sUpmXocox5oyPL9ezr+1dOc2mnCPMj7t/0PnTSNSuNI1e1v4l/fWcqyem21Sh3U&#xA;/PpnY5cYyQMTyIfNtPmlhyRmOcS9wh/OTyU9kJ5Jpop6VNoYnZ6+AYD0/wDhs5c9kZxKgBXff4L3&#xA;cfaPSmNkkHurf9X2vGPNfmCTzBr91qrx+kJyBHFWvFEUKoJ8aDfOk0uDwsYh3PE6/VnUZpZCKt7f&#xA;+VGi3GleT4BcIY5ryRrtoz1AcBUr80QHOY7VzDJmNchs912BppYtMOLYyPF+PgHzf/zlY6J+fXlN&#xA;3YKi2GnlmJoABqNzUk5rndPqs+bfKoFTrNiAOp+sw/8ANWKvnv8A5ya/P7y3L5ZuvJXlS+j1O+1O&#xA;kWp3tqwkghgDBmjWRaq7yU4njUBa13pirNv+cf8A8rb/AMtfk9Ppuop9W1nzEs9zdI4IaETxCKGN&#xA;x1qqAMw7EkYq8M/5xh8l/l7r/mHzD5X88aVHca3bhH0+C4klicGBnS7jAjdKspKGnWgPgcVewfmb&#xA;+XH/ADjr+Xnlhtf1jyok0XqxwQWsE0/rSySHogeZR8Kgsd+gxVOvKj+ULj8gNa1Hylosug6LqOn6&#xA;ncQ2M5LSFhDJE0hq8uz+lt8XTFWD/wDOEP8Ayi3mX/mOh/5M4qlX/OZn/KU+Rf8Ao4/5PQYq+qsV&#xA;fJPnR0T/AJzQ0oswUG408VJpu1ooA+knFX1tirFPzOv9Z0zyZquracljPHplnc3t5aajDJPHNHbQ&#xA;tN6ahJI+JJTq1fliqE0/zvptlcNo+vSwtc28psp9QtLSaHTI5PSEy2plkaVVf0qEjlx6L9rbFUJN&#xA;+bXl5jYtZWV46SXaJJbvp9ytw8VxYXd3bzWsXANJ6v1QioGw5cuOKq9p+Z35eXV1bPaiST9LtZwt&#xA;erZTelyv9rSO4m9Oil2+AK52bY0xVbL+Yfli8lin022Ml5eTWkFpd3Vq8SXlnNfwWc8ltMyr6qJ9&#xA;ZBG/dWoVNSqpal53/LnWNMv4b6OcWV/a0WX6tNGdStPWS3C2jqoadHluEjCr9r1BT4Wriqb2f5he&#xA;UdQuLrTZHkt5LZLgXkF7byQBRbQwTXEbeqoB4RXkbEdwSRUA4qn2kyWFxplldWMPo2ksCSWsZj9I&#xA;pFIoZV9MgFNqVWm2KozFXYq7FXYq7FXzfdf84UeV7i5lnPmS+UyuzlRDDQFjXFX0FoWlR6Romn6T&#xA;HIZY9PtobVJWADMsEYjDEDueOKo7FWH+Z/yu8ta9O92Veyvn3ee3oA58XQgqT7ihzY6btPLiFfVH&#xA;zdNruwsGoPF9Mu8fpDFT+QicqjXCF8Da1NPn6v8ADM/+Xf6H2/sdT/oUH+qf7H/jzIfLv5Q+WdJn&#xA;S5uC+pXKEFPXoIlI7iMdf9kTmHqO1suQUPSPL9bsdH7PYMJ4pXOXny+X67Zzmrd88i/N3/nHTRfz&#xA;K8yW2u32r3Ony21mlisMEcbqVjlll5EtvWsxH0YqwhP+cIvKYdS/mS/KVHICKEEjvQ70+7FWf+QP&#xA;+cavyw8mXsWpW9rNquqwEPBeak6ymJx+1HGixxKQdwSpYeOKvVcVeN/mX/zjN5Z83a+3mXSdSuPL&#xA;PmKRhJNeWi843lH+7TGGiZZPFkcV6nffFUgs/wDnEiG+1WC988edNT81RW5HC3lDxVUU+BpJJrpw&#xA;ppvwKn3GKvbb7y3p8/la58t2yCy0+ayk0+JIVAEMTxGEcF6fCp2xVin5Pfk9pv5ZabqFjY6hNqCa&#xA;hMk7vOiIVKJxoOOKoX82fyQ0r8x9S0a+vdTnsH0b1PSSFEcP6jox5culPTxV6Xirxv8AOH/nG3R/&#xA;zD1+LzDb6xNoespHHDLMkQuI5BESUfhzhZXANKh+w2xVlf5TflzqfkTRbyw1HzFceZLm7ufrBvbp&#xA;XRlHprGIwHluDQBP5sVZN5n0OLX/AC3q2hTStDFq1ncWMkyAFkW5iaIsoO1QHrirFLz8n9Du/M1x&#xA;rEkq/V7u4a7urP6ramVpnhELAXZjNwse3qcVavPvTbFUw0TyNqFlcWM2o+YLvVv0bLE9lHPHDGiJ&#xA;DZz2lKRqvJ5BdF5HPUgbAYqo6L+WVjpVpcW0d7LItxc2F0WZVBDafcrcou3ZytDiqhZflVBb/oqK&#xA;bVri4stASGDQ7Zo419CCC7t7pUdlAaVuNlHEGNKLXYsa4qluqflPeRaDDb2OoTajNoVrHb+VrOVo&#xA;rUW4gure5iLTrFN6kkf1OJUZ4ytF+JfiZsVSyP8AK7zTrGkOPMrqdR1TzENTv3jlQtFpxsI7Ce3d&#xA;o44kf14IPSZEWgDg1YpXFXr4AAoNgOgxVvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -76.5352 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 76.5352 li
162.638 76.5352 li
162.638 0 li
clp
[1 0 0 1 0 0 ] concat
38.3853 44.5191 mo
40.8775 44.5191 42.231 42.8643 42.231 40.5425 cv
42.231 28.7007 li
47.5318 28.7007 li
47.5318 40.8072 li
47.4791 46.1363 43.2105 48.2291 38.3853 48.2291 cv
33.5601 48.2291 29.2916 46.1363 29.2388 40.8072 cv
29.2388 28.7007 li
34.5396 28.7007 li
34.5396 40.5425 li
34.5396 42.8643 35.8931 44.5191 38.3853 44.5191 cv
false sop
/0 
[/DeviceCMYK] add_csa
0.764706 0.0470589 0.00392157 0 cmyk
f
82.9195 41.6587 mo
82.9195 40.4117 li
82.9195 36.7281 80.8331 34.1285 77.0591 34.1285 cv
72.8453 34.1285 70.8824 37.3902 70.8824 41.2867 cv
70.8824 45.2105 72.5806 48.232 76.8482 48.232 cv
80.0298 48.232 82.3619 46.7222 82.7603 43.6998 cv
80.1099 43.6998 li
79.8169 45.6343 78.8374 46.4029 76.8755 46.4029 cv
74.3023 46.4029 73.4488 44.1143 73.4488 41.6587 cv
82.9195 41.6587 li
cp
73.5054 39.9087 mo
73.5235 37.8331 74.7798 35.9585 76.8755 35.9585 cv
79.313 35.9585 80.2662 37.629 80.2662 39.9087 cv
73.5054 39.9087 li
0.858824 0.850981 0.788236 1 cmyk
f
88.4932 28.7007 mo
85.9732 28.7007 li
85.9732 47.8355 li
88.4932 47.8355 li
88.4932 28.7007 li
f
15.5054 47.8345 mo
20.8062 47.8345 li
20.8062 32.4136 li
26.7447 32.4136 li
26.7447 28.7017 li
9.5669 28.7017 li
9.5669 32.4136 li
15.5054 32.4136 li
15.5054 47.8345 li
f
28.2388 19.3843 mo
26.9458 19.7901 25.6119 19.4654 25.6158 17.7359 cv
25.6177 15.1001 31.8082 12.8902 32.6666 10.5865 cv
32.8794 10.0123 32.8921 9.53956 32.6177 9.5542 cv
32.4205 9.56592 32.5748 9.85206 32.1412 10.2867 cv
29.5767 12.8521 25.2798 12.8482 21.983 14.3248 cv
19.8208 15.2955 13.4849 18.2769 14.9439 24.9273 cv
15.0132 25.2427 15.2017 26.3013 15.3951 26.3013 cv
15.6197 26.3013 15.6177 25.6724 15.6119 24.9087 cv
15.563 20.9488 20.2525 19.8443 21.7779 17.2574 cv
21.9605 16.9478 22.2759 16.5142 22.3511 16.7154 cv
22.3873 16.813 22.3638 16.9566 22.3023 17.232 cv
21.8248 19.358 19.6011 20.7222 20.231 22.2418 cv
21.0474 24.2144 23.4048 22.7437 24.1285 21.4761 cv
24.3228 21.1265 24.4312 20.9039 24.5611 20.9488 cv
24.6587 20.983 24.6548 21.3834 24.5943 21.7437 cv
24.2076 24.0318 23.6812 25.3169 22.0064 26.6187 cv
21.4712 27.0357 20.6285 27.1226 20.7388 27.4429 cv
20.7671 27.5259 21.1304 27.5171 21.4195 27.4878 cv
25.8785 27.2027 29.608 21.9449 30.5962 18.5103 cv
30.6998 18.2691 30.731 18.0416 30.6216 17.9566 cv
30.4869 17.8531 30.2916 18.0914 30.0923 18.2681 cv
29.5826 18.7154 28.8834 19.1822 28.2388 19.3843 cv
f
116.254 33.2491 mo
117.648 33.2491 118.218 32.4322 118.218 31.1822 cv
118.218 29.7178 117.359 29.0718 115.951 29.1133 cv
115.25 29.1133 li
115.25 33.2491 li
116.254 33.2491 li
cp
116.143 28.7007 mo
117.772 28.7007 118.699 29.5391 118.699 31.1822 cv
118.699 32.8238 117.772 33.6617 116.143 33.6617 cv
114.803 33.6617 li
114.803 28.7007 li
116.143 28.7007 li
f
121.949 31.6558 mo
121.901 30.9888 121.543 30.4878 120.829 30.4878 cv
120.155 30.4878 119.798 31.0508 119.743 31.6558 cv
121.949 31.6558 li
cp
119.73 32.0337 mo
119.743 32.7686 120.08 33.3873 120.925 33.3873 cv
121.413 33.3873 121.818 33.0372 121.921 32.5621 cv
122.354 32.5621 li
122.141 33.3873 121.626 33.7647 120.794 33.7647 cv
119.764 33.7647 119.283 32.8785 119.283 31.9371 cv
119.283 31.003 119.798 30.1099 120.822 30.1099 cv
121.976 30.1099 122.395 30.9551 122.395 32.0337 cv
119.73 32.0337 li
f
123.549 33.6607 mo
123.137 33.6607 li
123.137 28.6998 li
123.549 28.6998 li
123.549 33.6607 li
f
124.867 33.6607 mo
124.867 30.5899 li
124.172 30.5899 li
124.172 30.212 li
124.867 30.212 li
124.867 29.4766 li
124.867 28.8853 125.106 28.6172 125.698 28.6172 cv
125.829 28.6172 125.966 28.6661 126.089 28.6929 cv
126.089 29.0225 li
126.007 29.0093 125.918 28.9957 125.835 28.9957 cv
125.272 28.9957 125.259 29.2779 125.279 29.7715 cv
125.279 30.212 li
126.063 30.212 li
126.063 30.5899 li
125.279 30.5899 li
125.279 33.6607 li
124.867 33.6607 li
f
127.033 30.5899 mo
126.346 30.5899 li
126.346 30.212 li
127.033 30.212 li
127.033 29.4766 li
127.445 29.2979 li
127.445 30.212 li
128.229 30.212 li
128.229 30.5899 li
127.445 30.5899 li
127.445 32.899 li
127.438 33.2139 127.603 33.3863 127.919 33.3863 cv
128.043 33.3863 128.167 33.3794 128.277 33.3448 cv
128.277 33.7022 li
128.146 33.7369 127.995 33.7637 127.858 33.7637 cv
126.985 33.7637 127.033 33.2071 127.033 32.7398 cv
127.033 30.5899 li
f
115.25 35.7872 mo
115.25 38.9957 li
115.285 39.8965 115.8 40.439 116.617 40.439 cv
117.435 40.439 117.95 39.8965 117.984 38.9957 cv
117.984 35.7872 li
118.431 35.7872 li
118.431 39.0025 li
118.417 40.0674 117.819 40.8511 116.617 40.8511 cv
115.414 40.8511 114.817 40.0674 114.803 39.0025 cv
114.803 35.7872 li
115.25 35.7872 li
f
119.723 40.7481 mo
119.31 40.7481 li
119.31 38.0748 li
119.31 37.8077 119.289 37.5328 119.276 37.2994 cv
119.701 37.2994 li
119.723 37.8077 li
119.736 37.8213 li
119.977 37.3951 120.369 37.1963 120.815 37.1963 cv
121.941 37.1963 122.031 38.1924 122.031 38.5909 cv
122.031 40.7481 li
121.618 40.7481 li
121.618 38.522 li
121.618 37.9239 121.275 37.5738 120.711 37.5738 cv
120.031 37.5738 119.723 38.1441 119.723 38.7618 cv
119.723 40.7481 li
f
123.371 37.2994 mo
123.371 40.7481 li
122.958 40.7481 li
122.958 37.2994 li
123.371 37.2994 li
cp
123.405 36.3023 mo
122.923 36.3023 li
122.923 35.7872 li
123.405 35.7872 li
123.405 36.3023 li
f
124.477 37.2994 mo
125.665 40.1783 li
126.813 37.2994 li
127.267 37.2994 li
125.898 40.7481 li
125.432 40.7481 li
124.023 37.2994 li
124.477 37.2994 li
f
130.2 38.7418 mo
130.152 38.0748 129.794 37.5738 129.08 37.5738 cv
128.406 37.5738 128.049 38.1373 127.994 38.7418 cv
130.2 38.7418 li
cp
127.981 39.1197 mo
127.994 39.855 128.332 40.4732 129.177 40.4732 cv
129.664 40.4732 130.07 40.1231 130.172 39.6485 cv
130.604 39.6485 li
130.393 40.4732 129.877 40.8511 129.046 40.8511 cv
128.016 40.8511 127.534 39.9644 127.534 39.0235 cv
127.534 38.0889 128.049 37.1963 129.072 37.1963 cv
130.228 37.1963 130.646 38.0416 130.646 39.1197 cv
127.981 39.1197 li
f
131.835 40.7481 mo
131.423 40.7481 li
131.423 38.0748 li
131.43 37.8077 131.402 37.5328 131.388 37.2994 cv
131.814 37.2994 li
131.835 37.8077 li
131.849 37.8077 li
131.973 37.4566 132.282 37.2095 132.626 37.1963 cv
132.763 37.189 132.9 37.1963 133.038 37.2027 cv
133.038 37.6011 li
132.955 37.5943 132.866 37.5738 132.783 37.5738 cv
132.171 37.5738 131.849 38.0132 131.835 38.6729 cv
131.835 40.7481 li
f
134.721 37.1963 mo
135.374 37.1963 135.922 37.4219 135.979 38.1509 cv
135.532 38.1509 li
135.49 37.7178 135.105 37.5738 134.68 37.5738 cv
134.294 37.5738 133.903 37.7247 133.903 38.1304 cv
133.903 38.6392 134.569 38.5909 135.503 38.9205 cv
135.861 39.044 136.088 39.3536 136.088 39.7247 cv
136.088 40.501 135.366 40.8511 134.638 40.8511 cv
134.04 40.8511 133.353 40.5694 133.339 39.8067 cv
133.786 39.8067 li
133.82 40.3223 134.274 40.4732 134.741 40.4732 cv
135.181 40.4732 135.641 40.2676 135.641 39.7857 cv
135.641 39.2916 135.099 39.209 134.549 39.085 cv
134.006 38.9542 133.456 38.7969 133.456 38.1578 cv
133.456 37.4434 134.115 37.1963 134.721 37.1963 cv
f
137.298 37.2994 mo
137.298 40.7481 li
136.886 40.7481 li
136.886 37.2994 li
137.298 37.2994 li
cp
137.333 36.3023 mo
136.851 36.3023 li
136.851 35.7872 li
137.333 35.7872 li
137.333 36.3023 li
f
138.705 37.6768 mo
138.017 37.6768 li
138.017 37.2994 li
138.705 37.2994 li
138.705 36.5635 li
139.117 36.3848 li
139.117 37.2994 li
139.9 37.2994 li
139.9 37.6768 li
139.117 37.6768 li
139.117 39.9859 li
139.11 40.3008 139.274 40.4732 139.59 40.4732 cv
139.715 40.4732 139.839 40.4664 139.948 40.4322 cv
139.948 40.7891 li
139.817 40.8238 139.667 40.8511 139.529 40.8511 cv
138.656 40.8511 138.705 40.294 138.705 39.8272 cv
138.705 37.6768 li
f
140.903 37.2994 mo
142.064 40.1846 li
143.218 37.2994 li
143.665 37.2994 li
141.761 42.0669 li
141.308 42.0669 li
141.83 40.7481 li
140.401 37.2994 li
140.903 37.2994 li
f
147.546 37.5738 mo
146.714 37.5738 146.385 38.3848 146.385 39.0235 cv
146.385 39.6626 146.714 40.4732 147.546 40.4732 cv
148.377 40.4732 148.707 39.6626 148.707 39.0235 cv
148.707 38.3848 148.377 37.5738 147.546 37.5738 cv
cp
149.153 39.0235 mo
149.153 39.9302 148.645 40.8511 147.546 40.8511 cv
146.446 40.8511 145.938 39.9302 145.938 39.0235 cv
145.938 38.1163 146.446 37.1963 147.546 37.1963 cv
148.645 37.1963 149.153 38.1163 149.153 39.0235 cv
f
150.115 40.7481 mo
150.115 37.6768 li
149.421 37.6768 li
149.421 37.2994 li
150.115 37.2994 li
150.115 36.5635 li
150.115 35.9727 150.355 35.7042 150.946 35.7042 cv
151.077 35.7042 151.215 35.7535 151.337 35.7803 cv
151.337 36.1099 li
151.256 36.0967 151.167 36.0831 151.084 36.0831 cv
150.521 36.0831 150.507 36.3648 150.527 36.8584 cv
150.527 37.2994 li
151.311 37.2994 li
151.311 37.6768 li
150.527 37.6768 li
150.527 40.7481 li
150.115 40.7481 li
f
116.405 43.2862 mo
114.803 43.2862 li
114.803 42.8736 li
118.431 42.8736 li
118.431 43.2862 li
116.857 43.2862 li
116.857 47.8345 li
116.405 47.8345 li
116.405 43.2862 li
f
120.61 45.8287 mo
120.563 45.1617 120.205 44.6607 119.491 44.6607 cv
118.817 44.6607 118.459 45.2242 118.404 45.8287 cv
120.61 45.8287 li
cp
118.391 46.2066 mo
118.404 46.9419 118.742 47.5601 119.586 47.5601 cv
120.074 47.5601 120.48 47.21 120.583 46.7354 cv
121.015 46.7354 li
120.803 47.5601 120.288 47.9376 119.456 47.9376 cv
118.426 47.9376 117.944 47.0513 117.944 46.1104 cv
117.944 45.1758 118.459 44.2828 119.484 44.2828 cv
120.637 44.2828 121.057 45.128 121.057 46.2066 cv
118.391 46.2066 li
f
124.073 45.4439 mo
124.038 44.9146 123.702 44.6607 123.131 44.6607 cv
122.499 44.6607 122.107 45.3204 122.107 46.1041 cv
122.107 46.8936 122.499 47.5601 123.131 47.5601 cv
123.667 47.5601 124.038 47.23 124.073 46.7564 cv
124.519 46.7564 li
124.409 47.5464 123.956 47.9376 123.172 47.9376 cv
122.142 47.9376 121.661 47.0513 121.661 46.1104 cv
121.661 45.1758 122.176 44.2828 123.2 44.2828 cv
123.908 44.2828 124.485 44.709 124.519 45.4439 cv
124.073 45.4439 li
f
125.612 44.9083 mo
125.626 44.9083 li
125.866 44.482 126.258 44.2828 126.704 44.2828 cv
127.831 44.2828 127.92 45.2789 127.92 45.6778 cv
127.92 47.8345 li
127.507 47.8345 li
127.507 45.6084 li
127.507 45.0108 127.165 44.6607 126.601 44.6607 cv
125.92 44.6607 125.612 45.231 125.612 45.8487 cv
125.612 47.8345 li
125.2 47.8345 li
125.2 42.8736 li
125.612 42.8736 li
125.612 44.9083 li
f
129.15 47.8345 mo
128.738 47.8345 li
128.738 45.1617 li
128.738 44.8946 128.717 44.6192 128.703 44.3863 cv
129.129 44.3863 li
129.15 44.8946 li
129.164 44.9083 li
129.404 44.482 129.796 44.2828 130.242 44.2828 cv
131.369 44.2828 131.458 45.2789 131.458 45.6778 cv
131.458 47.8345 li
131.046 47.8345 li
131.046 45.6084 li
131.046 45.0108 130.703 44.6607 130.14 44.6607 cv
129.459 44.6607 129.15 45.231 129.15 45.8487 cv
129.15 47.8345 li
f
133.828 44.6607 mo
132.997 44.6607 132.667 45.4712 132.667 46.1104 cv
132.667 46.7496 132.997 47.5601 133.828 47.5601 cv
134.66 47.5601 134.989 46.7496 134.989 46.1104 cv
134.989 45.4712 134.66 44.6607 133.828 44.6607 cv
cp
135.436 46.1104 mo
135.436 47.0166 134.928 47.9376 133.828 47.9376 cv
132.729 47.9376 132.221 47.0166 132.221 46.1104 cv
132.221 45.2032 132.729 44.2828 133.828 44.2828 cv
134.928 44.2828 135.436 45.2032 135.436 46.1104 cv
f
136.554 47.8345 mo
136.142 47.8345 li
136.142 42.8736 li
136.554 42.8736 li
136.554 47.8345 li
f
138.884 44.6607 mo
138.052 44.6607 137.722 45.4712 137.722 46.1104 cv
137.722 46.7496 138.052 47.5601 138.884 47.5601 cv
139.715 47.5601 140.044 46.7496 140.044 46.1104 cv
140.044 45.4712 139.715 44.6607 138.884 44.6607 cv
cp
140.491 46.1104 mo
140.491 47.0166 139.983 47.9376 138.884 47.9376 cv
137.784 47.9376 137.276 47.0166 137.276 46.1104 cv
137.276 45.2032 137.784 44.2828 138.884 44.2828 cv
139.983 44.2828 140.491 45.2032 140.491 46.1104 cv
f
142.605 44.6607 mo
141.856 44.6607 141.54 45.4166 141.54 46.0489 cv
141.54 46.6802 141.863 47.4439 142.618 47.4439 cv
143.408 47.4439 143.711 46.7081 143.711 46.0342 cv
143.711 45.375 143.347 44.6607 142.605 44.6607 cv
cp
143.731 44.3863 mo
144.158 44.3863 li
144.144 44.6192 144.124 44.8946 144.124 45.1617 cv
144.124 47.23 li
144.124 47.9175 144.158 48.6387 143.395 48.9961 cv
143.12 49.127 142.935 49.1539 142.611 49.1539 cv
141.987 49.1539 141.245 48.9415 141.245 48.2261 cv
141.691 48.2261 li
141.74 48.6387 142.227 48.7759 142.667 48.7759 cv
143.203 48.7759 143.698 48.398 143.711 47.8218 cv
143.711 47.1753 li
143.698 47.1753 li
143.498 47.5811 143.024 47.8218 142.578 47.8218 cv
141.54 47.8218 141.094 47.0313 141.094 46.0826 cv
141.094 45.148 141.513 44.2828 142.563 44.2828 cv
143.065 44.2828 143.423 44.5235 143.698 44.921 cv
143.711 44.8946 li
143.731 44.3863 li
f
145.174 44.3863 mo
146.335 47.2715 li
147.49 44.3863 li
147.936 44.3863 li
146.033 49.1539 li
145.58 49.1539 li
146.102 47.8345 li
144.672 44.3863 li
145.174 44.3863 li
f
96.3882 47.8345 mo
96.3882 36.2837 li
99.4605 36.2837 li
99.4605 34.5318 li
96.3882 34.5318 li
96.3882 32.3834 li
96.3882 30.8453 97.1285 30.5816 98.5621 30.5816 cv
98.9839 30.5816 99.4097 30.6363 99.8335 30.6597 cv
99.8335 28.5689 li
99.2437 28.4351 98.6421 28.3033 98.0308 28.3033 cv
95.646 28.3033 93.8687 29.4986 93.8687 32.0455 cv
93.8687 34.5318 li
91.273 34.5318 li
91.273 36.2837 li
93.8687 36.2837 li
93.8687 47.8345 li
96.3882 47.8345 li
f
100.908 34.5318 mo
100.908 36.2837 li
103.188 36.2837 li
103.188 44.7613 li
103.188 46.5313 103.213 48.2315 106.954 48.2315 cv
107.536 48.2315 108.083 48.1768 108.677 48.0738 cv
108.677 46.1392 li
108.267 46.2378 107.749 46.2979 107.35 46.2979 cv
106.449 46.2979 105.708 45.8448 105.708 44.8941 cv
105.708 36.2837 li
108.782 36.2837 li
108.782 34.5318 li
105.708 34.5318 li
105.708 30.9009 li
103.188 31.6958 li
103.188 34.5337 li
100.908 34.5318 li
f
55.4874 30.9786 mo
59.4068 30.9786 li
63.8296 30.9786 65.6646 34.3155 65.6646 38.2691 cv
65.6646 42.2227 63.8296 45.5567 59.4068 45.5567 cv
55.4874 45.5567 li
55.4874 30.9786 li
cp
52.8326 47.8345 mo
59.4058 47.8345 li
67.5894 47.8345 68.4483 40.9083 68.4483 38.2691 cv
68.4483 35.6299 67.5894 28.7007 59.4058 28.7007 cv
52.8326 28.7007 li
52.8326 47.8345 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 11.0
%%AI8_CreatorVersion: 11.0.0
%%For: (Marc Vleugels) (Studio 3005)
%%Title: (TU_d_line_M2#rgb.eps)
%%CreationDate: 02-05-2008 15:49
%AI9_DataStream
%Gb!U'pNem4c7jQ^J9rDmFNF)@)Ej'*V"[3+&/&.pHggY,nQl$Slm\M16Qkj,c["*JIRu@;>F&hX9:f6:di#TpNHRJ6q+icg7H:Bd
%jV9Mm7:NNS`^R#uH*/E';&5geOAJ>F+>%Z*b-4l]%naN1V:P*J43^O(T8[C^.CZ'"jZ5LQ8+16<B'8(!9XA""Nl9A$nnXrHX;*e0
%<d>6V'-+m-=7YX!+5VS#nTP=(Cfd(CC97Ulf;aTXGhg=El7;]/Z8NO"MD-4baCJ*7O'+jNm=Zg%)Yq4e^T+.3rm@"OMd!gA+8!^.
%7]63t8k6Im[CXWRTLS&ob&Tf_`FtbX7.Q6T@(ZRT+mg"._2GUV<(ps4[,Vl]_8utF&is[6\&hYI=/5KXA@.St'>HRZ'I[hH]tn:?
%It.fn`$[B9f:oQ'-NmFMkjs^@Zdua+2[4BPksM$8E71`:RKeT?;J;AY0HC#2_ge3P+)PssmaZ(T=QWA"Lf?o7FbMWCSISlCnisOR
%4i1@2f"UG)&<u4f,U[g?\4&9(-M/^iF)mN.,rI/#A/I0RM:U<=\q(^lK`.8?W3C.c=NRmUUY]Z3j,sNZj#"?eqn5JL?=I;&NW):W
%PL,]sFn:*?0?ehuW3n'YjP/4$VhJXdeqmsGl.a!"btafnZ[O8t@(9X3U.YE64mbN#7N6?'S<>8RCT0=I8,L!FY^>%%kX8J"e]rLn
%>/ERPmB\_Kneo^ELAfH^<N";NNB/!qO(^3AYW#roNuS8U#5<%[oW,^4j^thrn!1MWNJ_*;50p?NK&.M.+=pHpB(nUj[!n$_o<L\R
%l%c,,Ok%"g)l#puVtJn\2Yo#;@g6EB5)pjqTpiB4[;U1Ts0N@g2Z@7h7sC9"I=TOPQBjf-m=3ZTSM!9!$W:kDUUT>k2lKs!m\A14
%!`^k.NBtfqkYA1:dQ`'R=mdKddus,1fKJU#LrW#(S;CV"kn=bfK7B=4q)=AhSU\,j+44V0jUk$]*]=8LX3o2@EiTu3LhpBU5`F==
%-=$0o@S/g6M=/Ld\;5Yj:^%_ZJukX':jA)P+A6r#`<iGW')B?mpd5^jkZp6d=^q$k+8Fk%Iea&l^S=^!,l7;[7B6F%]82PWWfbP(
%).jQ<MF9B(:\[Ln"=1571R9GcEYIM@NQe*g*XSaj&A`h6""dLsV2R:-g%-Hs:k\7=WdA>G)Z43DH&b(_q[0t2Ige#Qj8oO-DW#90
%fN`\uNl56_c+efIn?5:bWDW*^6iXk^.@u.N,_)mH</n?%:6u(H]H1AS:TN0'#''R=%4npp4;N;:J,ZWlF(dDWURR#mVW74)T<@^+
%1YqA^r@hp8#3@<W5!8uFmh#7q\^r7E2pnkps#2(jIiX=E9e'u4D(;0;B!k]U)f8hrb;9?uen_o/#DhRJH*lP$9<qnoTnlq4IsGHi
%:W\GJ^,$hTQ)/[([5.(Z3j#N7`XL/0s6_Y0F7:deH'%r*\EO#9pA\>ELND)R_iDLm!gl'RlR=!u3*O!SLpP8(pQ:?(KpN[GS]Z/Y
%3duPF:-47=rtjj1@fMd"0S(eMDr*#gM<(1Rs5W#:f/-mMfr4iK6N*%'>]tk88r^crr[[0m7/<I[-sGT>c&5c9q-V&)s7e(VZ*WEg
%bGOeO^M/)H)YMGH(?p>3_O/DkVtKLJFmqD7<`[`E^M@!Wo%mN_G6VFj(2Fuo)He%E_<>L.e+rI#R<J`4,t\qpdf7@1m-GG2N0%ZR
%%u)ndZqDM3I+4$\ON;ON=Dl`Gja&L^l?%ee([I5#9"eECf)&N#H<'jg+I]Jl#3GSKZS=.%ZQb$DZ3J[Njkeq/;smY\'g+p@o$O%C
%d#DmFn(#YXNc"Z2EJ?#8Jem-@YRq`,P!NJlgNS_Lp,6ut/j:BLb3aYe%-q*m#DR"nU]&44fLj=4],p@*]<r\BC^ljZhF<ujS>FoC
%dFiKc*=ee[jo1q(C]"]W(q%[t%.n)N4"%H8kEn1fa82:<'Q$+9nt61CY7]Z*AE3,:R.;7_Y)`$\A%Osse>eL:M])#Pg%g*`BcObc
%.0pk&U5\!ig(KQ7AtZe&Gh&U;[G+6^YUqdQI2Ah^mXH0d<_SBnb>m:;8KUFN_a2>;T"4h?Zba08LP9c0[#=sb<Z(n\]U,,LG/_)E
%N`Ua?bso;\*Pbthf<RX)FhZ,6cNc;01`K_.8IX>N#PLM*a>W1?Y.<j[s/Pb'(`;Z;PMI[605Jgbnc0H1fVt+)\6+1MgeUUJD1Ql<
%hI2F]aZdGU\/C<A5(^2AFF)J@eVd7Go<^<@jKZsYS$jHqlrAE2"H<Pp/U1'tEkC-F=N%"Oj(W$:[VmrBi>?LN@Cn:l#q/Um82\ng
%@UK+12rV!&4hX48::E8(e"Aq.LJ#T9(L7K3(IpFJ["7BEPd*`=A[Jg'$^#R\/O?[(AXpgF[-Y>-Wj7+Aa+!_fq(>tIdAmb:5d!-%
%0k0"qoWqf)okL9!C\#!cbCbq:J9D#-!ufjiKlWj4C'MFrm91MeahL;hp>3SJBM:)[n_1`mc/;>\g4MeCptd)I0l0a)G'b;O947R8
%)/[q+o>r[FI*#Z4I4&4[hKQa+nWBL<F6MaLgH>nkHI1o2DVG:-hW<jF)M<F9<S^c4B[1!+U:#\tLpdep]k`[GM95BrmYt[nCtE0W
%+icG,Jn<\MIrr\iggasUhh4\ABTj"g^^4(X+/kJC5LNmUPK$t#pH`<9oL+PK#SL/0d:eQo@b@oGVl!tX3:qu5X%KRa(k@H]RWs9C
%#i"u%Q+"4@KtoV&B#WEqR_Mt"c-":7ia3k`)3g+2S=WPgeQ;NTlV=X$p)3$n4eYE(3i_T1BUX$)rPiNJ_cF#@h9SjbIgioe61$_H
%#,\_dl*/i6=;KONB"X+@C[02_B/!d6@7si"q=>Wrjqr.?>J)m!X`E$q14rbo=d8gUV%??_UH.1GpMPXm7l@C!qMffJ*4`];?@qrc
%,6Ss"oEdjd?Q1:A8[Eo%CW8im7W`5MQ'J]j@-(faHegMU"0VB`<m\"#3KFXj+_thEoA(X7HU^T*$$;>#27@U[Qk8r<9l1W=8O?6P
%Q;Y$V08H*ons+jSUe7sg7Q27S"7ugmUK+d-%@3@5bS\`B(Yg/j_>W'Z4$rGD`>qe@3?jM/LSsN6pOPn]nf%UoEjJ4T.,4@MZ6DZ'
%O-DOA7r9>bN7/NK7rbd(@*FZ"JW\UNf<D_jn:\&Xs1?Y^RG%Q\-g/iMJ5'DFS_m<-*Ric1g"?BJBTt/U7aG='Z6N%QZmh`UNnKV`
%77T[Y,6KgC>Pl*S("EG4MhZ,$g_8uo)P5ToTj`^M:tWTLh$>61ffiACS'.I$")X@C+@F]c10h%LL+n0#lsW;hLM)6Lm>`3QLc3s4
%Z@TU?0/=6mj_qN@S,GVSIY\;0T=,uY@cW'gN:VRJ_S5GZ%MdL#g`1i"Q6p>u:=NI7W&5[0pXmKFI\l^uZ)o9Y+meF(>rU<D-7(M%
%?Y?T]I.V/<6]@-GMkBK=8aIDH>.\^lUrT/>)STu/*_7GX1Xa:hGBGaO3Za'2@B9V?0t&fFp/-FcDCboF0Wgi^bJ?Mi%MgDN?st5h
%(+/$K@1j%c*#q)TB:FHP?Or]Em,D;'_2j"U!p15&bWD74"ZQ&L\S7)d+dlDN1@M`m'/2']`4SS8cWKVs_fIIq&bki0EA'Ngp[XMe
%0CRh*?;!h`jD.s]qR:`P#9g0^ij^p0N'*-pq+2EkG;8Z%cK*f?4Bc"\Tc'8jKTZ(%(mtb@A1V=3bJd_20'4M?@W!ABjsK(sDA"Sa
%**fT9$!EC=,<:e`-fea^bJhWV5pkN!cGdbtfogDtn^u,SE\TKZ(NV,DO"c#4SY=`ZoS="3hbgJELcURVg]k2mRGoch^b0:t"aV-M
%ZcFK1=U5r5l-&GPTdJrqh^[49`7B-tpgU8<H8hHX5,ruE<mQJAl6l2/,41r7mAdW>=5Bl&@r:f"emZ>b;0XT$QO@m#O.6Td^3B1_
%aU-4CSA)K_>c!V>B3fdZ=q?bJG5SJh+e?Go>Q+3Un9QD:I]rL*GBSI>l/UOr6Edk&DXTN&^>:Ya-g0ad7[nnag>d+Ygd6.NcXdWY
%Sk3#L]0"i9e/&qIfCqH6,!dIe$\?G'M!VdP2nGnWWFNWVWuZ$6-46:Kkp@%dpRWG9gdC'"Wj%]DWVGGYgKgf01X2B*V7+.bSdK7+
%B:Hm@Q1RuBUV"[d-kAal0"]g`DfC;kT$MeU?</iSLQ<W1lFD/=Aa>uAoa/`YcCdDr]U[Hce(e[6.b@KgA*(GJQO:"cb"I2s0.o\&
%9L"r'CoslUg/l.KI_VhOf@JLb]eaC"4F+?KF.n!TT)*R]+Vo3/I<U0Y8a6]^';4?EQItP>qr7"o_?^"L]#n$>mW/RjDk0iQf'@2G
%+*u7;V)+-mIjOJ.1Bu[uT;9*FieHopch5LJi1Pts[5g_]NPo)>ih5bRQd,2-s$9F:WsdP8B$kPDrkaSVnJa:t_dO(!cdh`KhctN$
%/ah3!.VC,XKD(%<ad'9dp=u.pTNm'&gEqR4Y&qui=]j1^54j@kn"7,,<T`(\VXoLZ13V5.\SqubUQApY(HTM8!\4Z%7n)[\J'b=s
%Fml:R*9!PphDLk='k?fB3>-sQiu=Ri9ePiPK9hgi?)oG\WV]CF.)2'scT;A[mQKI??ap;o]l+=KI$Ln9ohF=0?fG.bJV0tl+.(1M
%K5T#;pA2o(54Fs.>YF@?ahOE5qocVGI))EGkN[)b[dP+K7PS'1H$t%?jdrN`Wb$J77i@on%E]EGcSGTS.LRt6PP9mopR/((s2l';
%=',BRmP!uZ'l0Gn^4YjGCH&C^aXECh#>=Tt`$ZQ^s7BT9&9rZ3^RX$Aj.P.u5n@:+o$:L+K0d&XHdLd2kqhZu3p_9B`AL^s:*^nY
%#F->c>d8FSq@@m35LbSb(!RdV&n?YZCXrss#<bi[F>j7*I9bqfMa'T/6''!O8?>oAm*5@Op$/c$(c^a@M/r8)1h_o]iEgVQ:m_VH
%Cb`YC<IJ0-nf@AbAZ$V0kfl`e[2UqNX?LhIhokf@[?t=99kh;Bn":11="f,WIa)471\RKWA*gEq$MReS>PB63oXaR`N1Fk]%f5a:
%pDQ#),hAs^XjdI8qK0Tfjbl/!5mu<Br8$</cu79;mkhad%/MT.(3<*EK6;So0@E/0o7MIh<(ck=@[=ntG<LSMmB$5ujR5u#W3YY+
%'I]:6gi"%IId:dP6";!to2Lt_R="q[.3:+Or9<6*%_CiRWMf:*[^]=h6+?Y\bY@#Cr[U8>h-8!>\4#:rF^<iKK8PT/m'0Kef%,&P
%dmkB7m2@eoK41%tr6G8W!=YG0?%^E/RBo\!d,]Jh2:JbS:B$^m\p%F23lqbQbL^B^kZ$L$K==aEI4bq3F$d22:7cg)%[Z=rC9-\#
%<!'+=G?:rXShcJD#OHEX#^H6\`9"JSo(8p%(3nKjMCDCF:VGcd!@0m2]\&F"Su9,.oiMNHRcR<,DRH.8H1%bSG[XFmkP6WPRJe00
%]`#@V?/@-V"[,S!=/hAuf2J/JO"toBpQP)rH[Ce=%Hg^NWE2t<E&ZBi47oM!Rn8Z20Zm*Q^)-FSaPAK6l(FrPgoZac#!FPX%h%[/
%8MT]*0CJZ(@4gF)-^B&XqUc("WcKiF>GCG_9sLT1pStmk!H5aHpr(mk*:U>J_Wu-W8\if!OHt9+l(ns`r/s9.T0E[->3YOSha/RG
%Bm#]Us#OHnU6tl,^=q9^4SZZCoLj8KX%0)KWNa%IEo;>6SkC'!G3MpunlZY?#0j\ql0+%NSrKpZbf9%.`%m=IPEY@2EctC6c9EU?
%.c%8[meEr6YkZ2Sp*p61Ei%::ebKb&keYPEm[MO72NM`s$albQgtqnhPnour)T$FiV:=X83=?nch,C$4FpfCVikb?.I=*]UXW0tV
%E#-s?gM:N.YU8]DF9^a[]Tu3\(JaN?c_m6MAODi_&,9`3-22DE'/r^IC+<W$#-4@s+.=DA]+kmj+5;>uX`fcag<D;(mEca^C^Fu]
%W#hecVpXn5\OcH<Hb=h6g$U<U>jbrcp@oDL/lebpf,'n?X)tth*Q\r8)Xb=7,7*3P?eXdGRD5(`ndh"XO3P\iq^Q"m_d!,A?!(hX
%GV%\H\R&S!?-qbgjdjh;Y-sWTr8sWjet]3r(KuOZa-#Mj,kiIDMo<E#h@W)I`t`^ae4)(k3Uj4*>/H1*\Oar"b0OL02dbcA@?B7$
%Ge7B8V-rq]CFe]538/5q,m'2r*b3PI/r)]qf>$15$\@)<l8a<)H[JJgF=6gg86YR'f6j)/?m3)>i3?^U6"K0Er@n6m:EdmHgWl3Z
%p7OkpB(]`fC7@&J?r4(fk<]SL='p!l<W67_O'X>7?eQVbT@mQ6PZ%AQDKPq4DL<8+WPe%L\Ld'r7f>=!X;"\Fn*UJ*PiCFJC%Z$i
%!QNm6FsNCP<"HRNj5Zbjq7NNilMGd.@<mnqjEOu08r9MPFL2gL%Fb'/WuBXYk*H+db;Gg],C.nF$"8:kVD11sm:pA2AH1qo>ith*
%;a$JW\DFHBJB>9,ruJ2=A;@+heFmd(JW`Pab+'-O)=Y3iJVI9aOaed6_J/,Y(^3Dl2j]1kj"\TXA\JM3Be6AGV@ea>s5:tH_ZOtu
%G>7-r5EXSOdITf0]XW@ILE+<uguq=FA'lh!6Qh/"Pos<L0dfY(Dn\@MLLI+(*L-#538F\gFNL[B-7gce*>`@s)OL%REX%S!ZPm)N
%r-E3rUqPh88fcZukp*OTE%^V^s&h\k/=V%a.4'u!#`b_VC#ruU\$XZDWlsN%jO9*uNu-"HDf(S%Q,*fGfTuGE2+J\49W+N9r2f!h
%oH00k[q'6.b@/V_aO1H4S0O0QqsFmGRJYq*mp-',+s_SpG+f6+'ghm&N.ft/>MM%<U_9P?GABgXl?fa'b<KRo1mYbCH7=rqB_)I-
%q'FAMTDSM\"LH3L[8LIJ\%B6-oi_5UY5YnZkZk6kcWZ;Dn4\l[=?1Qt(VKT!F7i=Ns4+lFcb%edlb6nXenQX#IU!"R9\d7j3gg;n
%p.MN,CUq#EjC,jR2S*5&A>&"Kr$.?pgVP+1Z6YAB.??Od%@mKqf,d4,&dq1/2RqVNN!N&j>]'^C9ZT?[8#%NAU05-t@.l8H`#TVM
%A,"P)_7R0=?i1d'Qgcc9>Sq<Y74`jp=]\(RqnYEZ%l;77<m=MtaN<M-`(*:_k>1kmql[9>j!P_7KJq+,#Yu.b-f3[fa[hGr-[s!/
%gb=*^[iOWAX#nKmNbMdAlhmi;-gCbnGA<,MO2anCZr.DXjd<UF,OGg_HX(19&F?LG<YdN@*-c^E[,j3Sa-U2G%BR;$o_:Td_GVKi
%B=(bPf2hXZgY&FV_mgN.Fn+ahC"MHnERsI(%X&qC\Loi20I@6K6BS2Y9CX';rj)6%l\2ZL7u/Sj/BM"3Y1EWeSU)59[e5&-PV4p$
%.6Wh)8SOd0q@GFc.Do;mA6hODHQ_E?2Y$Q8;PH;iX9`%<5Xd)3mU!aiQfOd[GXY_!n=$V5^(D:W?=O*"!_[QaB9rk`a^Me$(VZrB
%\bhumS"Gg3n-a]fh#/dYVc]VhCf>-OkBSo'p6+SdZ_5rd,2@XPrMcHhEOE"(bsWuUqoFTCKJ$RR8fu5@G@^BEVireQV+<.";TY2Z
%8PilTC*/ppYhL8#LOB5#n)>gDn3e+Qbc2_"7UkWJKcODkDE`L%SEgp\g;PBpkh\pLn-^V6*io/$rBkZApEue/JCb)S"QOWnhWr,D
%Z,h3\D#]l#=Nu%LhTYM4ZE<>hB>R;?YD/#V;J\\Y13,6m""G+Xr+T^R"`e:,G9]6E5CI[ehfL+%f(V*H["CV:l0H\LLc,\C9l#-^
%/O"c:EZbC^IL3hF5.3tr*b]nVMgBU2M=gf($#^i<#ba[RKK>-j%\YVTDaodO6+#O(d.[7pA^Vh:$P>cG'gc[VKa=B+UtCnT2!S0%
%jGntG6*s5C<C_LB(tN9h\/mqMOq8Q.0>U0s6*s5#:.Kd!8,UN\OcS6.aBAN43,7F!DN."OEURY(,=dQPR.h/sHgGl#"(P9iUA*[(
%p%j9\j87(V--p(r,@%*/(=pfa*g]76Wf9P,?'c\9Ef=53(i$2HO-]o":S?@clAR,LkLIKLEQ^)K%:n5mNVeAf/5"K-Jr.uNN^=;R
%Vk:3iAK78\*h3%u=?.pI`sTi9d%'22nI@[dHKbW<kU</Qg:38"8%!TG\fUQ!-Vt<c3HfU,j(#,@XD+s^hRXQiVZV\6GAebNr^F,P
%NQ$r&RsjjfA=Lis(%R)8Q:HA.?cXUbheLdq*#ZGHE>_h@VrPPTZ'f<5ZbQ5@GV&47#BY=G%Q'Z;@UCugLrPK&T`^`;T'NnCnCY5Q
%Va,_50jG)01*bWs"%4L'1$G]X"GTAL6pOiVK,Q&_fCD[5_UQ!>8X&V?LkNs#!&ZcrH=J-E=hi0'5NW=mg-btWL\<89P:+H05n$ES
%o-G>Cp1.^8I(JS?o!mTEM]ku&CK$-*P;`oN-cA%9\G;9.j@o2=s*K0_1Og4%D/G:@XZ-fNa32_C+udQ6nq9O[n8V`qMJMpj0o]J/
%1)$*9EG&7piU2GR.GaOThe5a"gCrS<c@8+bGc"UHLncqnSTEg1;>_`n2?KG:ag,fG2fbL"fCAJ(b>:XIpf.Z^h]e69iJ`"tA+[m>
%_rD^)aj;(V5&7sEN&kgKC:QIA^DE]3DaUJb8[:Cn<W&[sp?J"8r1,oD@k+kpX"Qr^`&8r@bN8Qo"[<DYVkR[hoBBn.[EP.A4-;Rl
%hU4?.j/+Vj#RSdpZs&L._J_Ve55n3_m)NVmI'+pKnh%t:o]1)<8hDDl2MbOs`-h-dZ@M!.jK;XY=sbW0T(>=9J69+$TL57SALiB(
%kZU280?KWaB^b@S$(>,hS0Lh1pKr8'f)*Q(cgf@-nLAac6Imf$C'mc7c4pNijbX5jc6oU5QZFA%P)NJ+ad'fs^$hTVC/q&6+0rT*
%NJdSGpHq@I,,#,4Gi8)G<)WHq(l9SMmQQ8/`UKk&cM6&jXM]p=qG4'6iUL?qqpAh@Vg\r7;@Uei=sF:,A'X2m*.:Ej,"7@8/e[d#
%iu,s#j7iP$\2\tO[:R;:E0T?^rdD-$9"->@:0MNF:M^upY[JplK'phIoleYFpR=,'=)unp6!m=!'WuUPGu?V-\CsmMae`@TL\u;s
%?sFkE8Q<"Kbi\FVTRHl^aX,HuIUR-]1;6M!17qnAl'5IoCP`:Vlb>%5.bWNB/ogSf67UiR!c.b82tr\RWY__%T$=)b2ng(/YOd*B
%7:mgrlgqBQ[9CBuq[5@WV(h;&(HYo(44*jg/]kt4+aRDN(@('+g4:4oE,/m.j9cdd/6'6^N-f+8\T!7`e&sF.mOp\-LRZKdIdc-.
%),r,e*T4%o:ZDh.IB/<d'.^M?p,mJ+F*D"8n+p)VH@-=3r4/-)?0g5?0S)+8pL.gDqt#M&(Pl<A`id>Q_8TOKP_Icak0<dJjN<M*
%qI&sh\RZ!"p%n?VL!dt1N&'Up"m((.dVa`5h;K!!*7cN.@Ne@=Bjl,WU"]?3@C13d:h->5fQq?hHb=:\/F9$G20s39qAj'4$bORQ
%;X3E)C.N>0m/t&J?1*=La30PcUssS#Y[G6^[h\)2lC32A_qo?'2.UiDB8l-hi+P+:GGioCpF:^J2!Sc60c)I7+'9Z,W\\an=[oq8
%3p"VlCIT"(>N$:#P^\CZ"1bM&`\-<rVJ4@[%Dh7^:#L5lmk_3V:QHQ`COB-$JAXfr83A7IUFUCT:Y0@qqWD(;>n-6/MJmd_cMLcj
%9[PUUJt.Sk>ks[foc:%fAM%`?11B>Wq3I]\kaQ,Oc*p(RL*NASBKJm6f;P_<;"Z4]#\`Al3s%]%KAG>`M>!)CQ_392EBn)`rol+I
%9PI1+mi^DbB]oH@I=*Zo$h@oaNXb47-Vl9$UtClL@!H.<FidS6IedR.n[QNC81Z;i1HKg-]3NWqkiC/Zj!0GVU2))rj,.k3LZDNF
%geh]>jaq:B#3M##PE@#L;'M\E;P;'3G;34PaGo'p+&(<k[kh$CRD`NeT<WYoTjl50B51Kn:5BL,^I[=mesiW#FL7:-(#8aB4kcH\
%/<b0m@<sl^A6#`!*eS@rECEC8pDD2aFRB4gfmqecjdhiY$0,RaKl^PlKitU;X,:m$lf)Q_::Di!D?BBi>*#[b%V<,(&5eRW<NeMC
%iF^MQjflJO"Jd#?cGW,Q-Ro!(A\j,9k6afF8QV=IPk=%mXU'X)h0h=L&_7I>GKf;sV6;(rTrMP(l`s63Im+_9c$?W$K"SP>or;GA
%8<R[tJW6r4"?fNH4HDJ*"H!Z*g`\AC@S=&%fP&[maAa$]FrX7>GYrMWaGA?!5&qc<b^n]NlIlek$<JRb`amg.+r,"a48nK\]5A+q
%j@4A=1?29GpJu=J81`tnS&:?>gc1jDs11L$Q^,5(mgMLGi$)=m'b.l9K7uT%OW.qt=MieAqd\p#<q;r-Dig1McFQ%.EO1/,)MjnZ
%($APsiN37Q^P0\LTg:'T?\ai#d*RLb<O<b6EY,-Wm$7+<V=`RCr66!!5sX!$)0,7YBEF2)Tgct@N*g_iUAg\mYWZ/[INc(*7s`.n
%jEsLbH$.6=mDOMIq;]HIPcWN&_T/5u%Xt#`H0!]6^TN"eMFf>)U"IaHFPb!X8naC>pZq*<G9q?-#]6kPl_@gAd(HiY+AuXK1IIsQ
%_<1Sk-HNV)I37G>go%3MM`lL+P0e45:Z9WH]#T7@hsZG9_rXZ_@Nk]_j(YY_n6,_Nq8t7OL:bKL\7&QuKr`:RKIK!SqC2VoRW(Ba
%@K_:G:E!`Ybq7u>1gr*cQ2Eq)@,9kr>_V)rYsR&Z3QOP-!nEPibO+#nJ`k*V<B;aP3G]FJ4IdB!T3#94q;i=rhV0j#9XHoG*AH8c
%^f[0kMg?R0)(E>'c:%2ciaq">6f5N*7Mdpe:;2DamY2pnhHi/<\!>h4Xai4T^8+96j,`_S6]J2q,%!eFW[GA%MCqS^<VRL=W_;#2
%fIE@EWPV^MM+m("_8+jZX"Y@bH8/t,6YYdh_1'i>XC*CZWhBQZl*qTKh*K^)=n2lSWR[JH-\l3pYbCX"CR;jnd^'4!JN?guHZ"f?
%eZDPKf=)MB-_'@YOlc:+3.E5PY^"i8oo-J?@,1[g6J$:=d4a+X3V,1SCsmsrnT#;aB$8H7;k@?&V>enMpF.f$=9$#3bJ]sERSkIm
%b)@bJY0M:SrX0JJhh:OL_IaA[N\e3]$HXX>k$C#F]KFJr$(5pg]J6jd.X6EDO%bFjB6#pFWV#&;*KPnQb7Va\)6&p?_O`X[ok3f^
%Y?HDO$!,5OTGgi_LWSi".b0H=f#9WIo(4_J[<ubjj[a4a9,U;IoLQA0qCXWN>KqT8oWR[\,Ki4h[7lIE/[[]@KS1$mHd4<n(bHB+
%epBHcbjsE1eM<;IW9)Ep_nT3p6^Lu"Xo>BINW2qUjl?b-?GD0jL^6pUl17a[YEos/o$_'+]@lLuB_NB"2`@2_^C.7>_pj+Kp*-c`
%.mHOj/Gk,e7XF%p45MoqBdDk06<8Mqh>8Gg>g7N!mtCqu6p*0gkP*ec^o1Urmj;EWl]g!9ptPr^7`9sKk@:\G!'(7:$$?PNporb)
%J$ui4!JX3[rA*NP!b8e0kEgXC?%MJ$^RsH@`mNBQ]_@8.4XP2,WS5KA2FGFY_lG@n12t,+dm@5d:=XB?XhD>GZMV;pg(\'M,<e`%
%IQW(X\VJ&HASQ:J.HYt140O)TWo!!QXXj+#Wa26r2UD,1r1RlWB<&(MW7cWug=;3[D"\sNG($66r*4^DU$C$HRFR(m?(\+)4MKKt
%W7k7m)i=O8LT4XPW<R_900WA&67roJP7L[*OMfWKK+Cto5#^jI8"SOlWn3e!b-Wp8jr^UHIAV>=Y@E@c:po34Z"O*1C=dG6F*#MU
%5?.#hR`]46`MWQ0Fbhj_P&WGX%omtjBJ<.\E/;pYcM5]^?[Sg+Q+kT4ar,Z,g7Bo'd*/_Kf5l0L-JrjD%orMg>L*48ec,B1Tg)Ks
%^1<WpcjlUb3SB1f6f_HHrLrM\ouLQ+<#q-Pj=I:m5%5"-khoP!ku4*hbN*#sB87n\rr(FdXRb]hmV',CnWDqd^W7Ao7<s'4ip<Wm
%ed\,,1?O&b0]gt2:IV04cONgB4n7p:hX^#QnIm6N@>aXB&B3?%<G<,3B8>-Q,HB1(Gg!4g?`#6tp1a\*EOKfB`M?RcN\/O'&n\`G
%lk%.h,AXBtf7f56cAo-"rN87E5[gtsNVfGl3#cu[L:.lpFa8.dibX)`Atnk_&B3>;=dO(LR@Rko6Bl+Y\1YNIcONgB4i8q$O!r:s
%hV7Y&o'?p`A53ee>FljeP\qH&(Zj<nMR,ZNf1p:'RU:%mqI3BhB87n\*lhb6b-OGH,;O[m[Q2)7`S$hTi>LKhAf#)U:U)V2\.(m3
%M-Y&/Kl5He:/RT'U,[KnF`!N:ljtQKeg?&'cONgB4_\L+.&/i5387s7LV$P'B3LOk_TpZ:`^^kidsjG@1-m@)W,H>GQC[m%=?4*e
%4bGe"T1o,r'RfJ[ZdFMqr;4&K^Rac6:(Nk6\8Q#@.3#b]?3@p54\gQ^qf[.mgDe/_;31Tt[dRLmU["d*PWE<gNGa,,HSu!0HYhcp
%Z[YD/:K27;S:@n3'XhIuFC*k+.`TA;%Sp:`mT1i"qhjn]I$H-K`HYLB9ij'pgid`1G89/QXlc"P@XMElrG66"%',H=N;m2&3.;%H
%HW3#kMXa5R<hEY=Q$N1`S&'PN0g>.LP*o=/:QTKT7E,$)?ceh4@bgA>s%UK-e<T\_Xg=Ct@XM/Ckj0e=_rQhQ?SQH>0iBh,G89.J
%=+;P3j,mHRrB"<(\>(\@cRQr4W_3\)0g>:XMO@G&1H`,BG89-]G\dR!j7I]X=#9kg]sD0qqJXr?W>N*]9E,@ffi3nl@nM5N1%($_
%r'eT7X30Rc.`Oi%(/n7m:\oe#hc5X4eL&MS@XS%,k/1/WLXn+W<K)9Lbbm;B'a+8#`Ai=/D9TJ9B2C<(M0V<X3;\U'd!'Y-<AFI\
%s5b%3j##='.+W$10oiY(B$L,.<K'`Q:#Xu/N;I8Cc+7A3G!%\J0\,:TrDCPDcYZj8:bg8F=G9Yr^T/4GdkA&2(oK=Vrq>ckYSH35
%\4c3*(#sjh6d;uI*5>u@jTTfN.`U:Obk[`cEIT%![9?%fCt=RF?,_'8(I2S:0og<0CW?CW@Q_m/?DjtDs,Gm-]OH8IhOdZa\:*DR
%C[^^A`^>(3;c\iIQmMR?MK'8)*rh)o.4`CcqL[\0/&o8D@0OHJ.`S%RpA@q0GW:b&g59n=(YSe^@XRh8VR*9>-T*,<c1hFS1L\7I
%i81)'`V;',Ams)$7)er^e`##.``g_[m-gslm<4WEhc5H84)9*@W&f>(>\6hRm[D<@<JMLpTJ&.<;Ym`bE4_PT4MF%\%_%RqdF#_.
%%_$5ka&^be;'#(+=[2fKE;%N8n#F:m1@7X!n#F:m6&j%`5H,.%CVuS;?tWddDX##SLc^BA>oc,g9A_P,%_$5k6e!@\\iP5MHK;<\
%iSj(@VQC@&er0JqFa/]q(s\d8S3;5t]BX@I[+QgM0sg.a]/KRg);QI:_aA'Y:K8G'cKP7sl>V5+C"ChnFr'=u3X^R`^TS,+anq7A
%Y@RW4FncZK#np9n]6r[(WXcM)M>EKe;]S%:`BmX]gJM2;I"1;/iHB)5Cq_8\/cladHfC5jLYMfG+N7qh*H(=PZMK&M*H(=Pn'*Gj
%Wt)US_^"SfHHr`Ugtm0Ic,e,0_ekG'q.f`LWl&](iVh'Cm&ItjY,iK,+&n$MrV>9E332=`]0AO+@TM%<r\i!%X2BFn/sB@lO'@t(
%</7gGnorXCj/Qp-;]Y;M;Z!N[E1<)C<LbkD%X6Y]Io@@OoD:.dUW]$q?^%sr4siR)Yko)Uk]>\Vq;)Zia:3/M#.qdW%YAsj^HW+U
%%jpr9rJdcYPVA\-;a4=:TK^AbnFAJX=!%.%Er&Zb>`Qd20=4M9Nagrm=r<-VqG-J^eaL-K5R6/2eN"*g5;PG*8j6)U5\e/Sr!&p,
%R-@Q,'!U+$U!b/lV&jU*KuNALS@O`Xlb5:W6&8b#-M#VW7I#4H^s`6Dr6=mNUV=V#Fsf4Do?Cg4?j[d*$SH<<\=I+/-sUH)oK7r?
%h2nj,7mBZ2lS+jr'lpm<ojs2N1t<DDK8_F,AUVX<T'$=:mR&k/)]<jdaE.A[R(DjWWI$f#$P,r*$#nA<AA0fT`CJs0K@-Z,Ok?HK
%jO9=fi:\N,g+i>eN;CQ@*e2ZM15Ls<$mNGg=3)6F*e3OeQt#'.>]MUJ3gsok..fIA0,fY)8Ubq#Q!?SZl&/mXMTmJD'PjU0>PNF"
%8-P5AQ@J<L6HMH1*0H[]?9Fqb![)S:ca_<6OOEfp&<jShB7aU%]AVlcf'nEp8ITf"E?(]Z2%kdjp9+3F0u<?<:.((WR#Mk6b1JlN
%]5d[KV9e0p<Pq]ck.(n8'#qBKlg#Tfo3FR.9('@s'`20-r^9bdSm.\S854N-KDQ&CiThih1Kf.L1J4b]G=7PPfMKUqiQ<s4IS%cC
%6jF+;K/B`(NeK+4\=BK[,;QtuUXTY@V;9P2Q``O'Ff3*HLP.+pp//Ff&X'C@n"-I?"0M)*FmG_bkrc[pSO?"\n>0EcC46"/:O)8"
%H^s$:#b/lS-BHcmC+I,%7T>^tK$1[Wgn(a!/<2Zt1;e*j4m&%d`)0'!e>&YWA:-,[A!l^QNpP/s#c:,S&p0Fo`O7SEA?]r6k^SBe
%$MCod@W.6`n(nR^S*H2*2<%ArnQ-3*:Qs)^]N(a,*NEis<$=.=Eh24PHr@?ncK^7>W`u+(2V$/-Qol(+o8P,`k:"At/f#W9_*p8c
%giO@TYu/#&>aNm;`$A5!bJkNLmt%+h&8(r+b]aC<+fp!k.6_eXI])dEciNk5VC0\b1,6EPSTcfkWdAiif`^2&c9LE>CM^Lu2C@36
%P8#=E>.:4:j1d!*mRuseA';*no2mVE>%*L?j1ZCioGHj[iCRq!Mo8FH%n<P[Vk9s=ZEl$?T+>^CN3+LOW9%Cn'4*8Ort^@X]fgp]
%q=^.ifgipKo:F-#InM[u/[K);^Y4';[6@VCLPh2?0:bn4Q<=S2ldisWg#Iq^lMY&;P\M*%f12fO9!L(HJ:;5NlU+Q9CAH.Ub@@>Z
%8@AB\P:6%70=.n,OB`YB/ouHM3a;jcH^G1L-IM_4Q*:;T0R=fpr*Bf(D],GC3[fUU92GJn(]O?KmtQ!5m1Nn2+^lj%*IAl,QmUja
%YYdWkL,\m2Q>@b0AfDW\F3MW"b!jCQj:E+[guGP!R-;04j"kYZ0\e%Wk]`pskcj&pfW_*L?cId7hts+bME^%NBCBIHl>0q[k$l)[
%^J/KSeeG)e+(8KFOfJf=(@_=U3'Y;@ObjRb8u%P^mN)F*YSfI0k#>Q[^C*mWFZK?T@i4ZWgit_n=#h)G(S+Mcdo;B4gZr,4`Mis$
%(H4VJ(KU!O/,OtNDS*,YW:H05&,VoY_HV#i]Y;#,[2^WmmXE>k9suc:eb1iV0fYT\\>s.L\`:o'=EkUqg;a%?l)!0*GEks2*=[a@
%Qr-t31s@8k5.>l%U&R+XQM;$t_p_'+anp'el_D!t05Th7KjJ[faR!4thlk8Cg8[!=SE(#uCRrZ?3?`ZnZG+j_Amg)$eGAk.k;&Ag
%m>>.7c_n:ioCE!l^G3CZMJD:9.m?-r\<F=LK"KfAQ=9G>?hZ>2p"+PU]30$$E]6GdLV)dl/TS=ImlBh3m/*/s*[L0`f>Dj&HX"+<
%EGsSbX1dA(I(@j)5:aErBBcWZ9F`-@$f0#s67hC`\T4fo8a;;uf'49[q0/+c\Wc>Q9Meg5bI,d8c,8*"@_9*P=;%F]e)e'^Uc*^F
%</Iec'hZZ]kM%it.6Em1g3heq!qNDbS^$p]p8t4#SmRqsUQlRAE.?0pDq*BF^OEP?SF!e,@EZ:%7pNR.oh^%de!9O-9>$U3Q"7Fo
%YIrsioIbamp$M-kd[/+0MEn'cmd4QH49UMl[ji#4_!UN0Kr`r0\%dG-lh.[?C4CN6e)c7:muRBUr%cY=^<I*G]$`$>UM?@TdG!Vi
%-Ec1EqX]EYpft#m]GWeHS6R<Y0,o-"bDj,/qP*q;$r)$oB,i!=AG>1G'$JijY?j$0>'e6E^C57JrnE$,F(V]LejjLk0n$d5?)4[,
%^KuFhT+YrnR?nZc4'!RS^T5;Y_q[VQG*cF3%eJB:rJNc!1g?MHD%="8;OdXM<^C*f0'."MiX7;9H[!5MF8(n_;!-W.BAj)DZ+W4*
%\(hGdI?=?amW\3`Mf&CZ-dt-2PsJlW1i2"uPiM=Yp2g1@+gk=?l^>!;q:+!ch8ahZ,;q*S*#p"LMlQcMQXY/A&3]4BGUK;+JmII#
%;ouY:#1Br?$>!)`)Q0bD]@EfqC?t(&VKR>L+H@3b$MUTTS1M.U+$6*km&0KE,B%C:%!/o2PLLiDs..HEZ;^NYaF6<RL6:+hmAbF>
%`)I[8"$L^+l8DPU5tbG&Mt[tMlp3<>\?`VLaF/KLjXY+fQggo_PWM',0(\VDppKpqGYqR'k$km=YFiH6HanmMP)X;Ge*%2OJ@1>Y
%ZGiI%`I(*WPqse+2t]kN]c>@0MDs.W\Ct7[?feF,F,/#Pf>:/CNR*$k+4$V#2[OY5Fb%p90&8]nqlruD6t2SQi`E>QG-[pHkATbu
%d`8i+SP6@n>tn\^go]]K%ke(!F;-qhjA0[#_VE/REjej%jKZ;rVi^k%hC6*"Y<F_TfSd(t]XuBh2R_Y.=Ltm6EGDepE8=dLduC_>
%^&.o*^Fbm.EAa"DbI2sRDKaI1:9b<Xh8SsR9<B$hM-I47rRC92\ih+kWNs&676&,"FGp);XMEg0Q?.c''$/;9:XL0I5s&1>#Wf-f
%Bt!Q.Cr1:4LWh#tK,_W!lCs8hUEk,E8:G!7;:<TJh-S.2%n2_"nbgC,ALGr#2$_gge'Vt1rG$?&7SfAZ?4Q<d[B$4LD<?1Fgor-4
%;L&!kjpVq+jBJU#AZggSG*6Q'<k8Jk'Sam"pmNml,<t*A*Z"<2:Wh8Y"02:>Z[$#p@khsr5J*ne'jdIm*U;JMSbjaikds.WN/q?*
%4X@RnIN_q_T$tY%F5\qD[FEIAokeG*^0JmPhsYV5`BI>omh`+L_UCfUQ9NK(mW6F(F#TZqFmb(Tm*84Nj"1mBmYf\r_Fnb9*gh$I
%2##D^m8CnRDI"l+l4<&:>9C`qDW9]S<4C2g;mQQ0SD@^gALP4YDg,:*Kt#TC%SR<,beW^f%K-2&HK/G,/7d(54\.$P!RP_&&c+\-
%j0lb$:X;,Ka8*tb4hgKYeeBu=aPC3?i8/_>KY^\-j@]AglR5]B/aW0)980jEq_[/L2nU>9p12U<n\p^Ya\Foj"c6&)p+tmpB@iPD
%Hh]q(::pKNk24MR:5HHRlm[/Ug&-O\0_Wl`I5>*@h71^XSG-Af/m]@bHk1Vcgd_)EEI<T*2TsiJaa/=0)DI@VEjbn<AC,3hdUBt`
%:I'RJ#DLchRj8nrkA1:I%-*a*[Wi/mE_F<H/)cIKNa_ru:_F^#(;LVI2Jc?d3KV]+=+r03!-I=K-^d\905\Cb-?t$_/\Z4hBu[<Y
%ZLrNnc4oOS>.u2qXf=>)ikE*ge=6'MX%3YJ[*"*irQ"lRlg!LbJL41Y>7FE<g'9au=,]9O_rkcocJs@is60nLBjPC0C$@$eXk]2R
%2e7c-+YRoE]2d7CQ2l0QHj`#W1uPjD*%^.+-.P[FENp"&_"0$jT-`E:.:62Vm6.@/T4_r:2R"6%^E/@B8e-Ob-0iUgc$-1sheL$>
%*3HrF_^;MljLLn&&Ag7X:#PX=I/3.JjD1Z9T/djTqcgI=XDN9eQK_fSqi!O$(MriD75"],mA\:NV2c\[D_jU:T`!D^laeWaRq=p0
%%j%5\jbDmF)*HR)"-'B8?<"8W7gfQH)c9JGM9hej76qr[DE?b3RV,%&jsps(7.OXE%]e>I94JtXZ5HLbd='g3=(If:l>K\jii\UC
%oekjK\npMj[)DiMY0prfpB2@n_N\J%I"sTZ\K[cuAQ-D$Q<#tRj/2s*?eadf[c;:[%Q+QsV5AGp5LPmNmP'(eYc8;t@pg,?mjHIf
%CTdt):Z<sKQ-OhZ/"*a&nd:7.Y_6?F^CM)4p(O+?T5HBe%oqr<dFS^:VSa:B%F5=kQ9_'ZD"=gk]?lruJC(>MJF$T+K(](F!k[TD
%-%42-Y2q1k5<?j"UuOF6K;]9e4<HiLVrkf:6Tu[F&+-ITXu?VpaFoEAN4Gqp&g6B3?P3mfU+55FX/`4kqm:mgC9.D-gaD=Tq+oWr
%nRQO"MFZtSE1(K_d)EtOqY[_oQ'U^QMN\4H=T^]fldCd9p"u'UQ-ALt+hfSB5$i&D4QN)aa)W++@gFK0(YcEQQ)3Y5rr)D4QsVKn
%p)-s$WOc1ZX,eqU"MiS2I<BQgV`,!KVle\GC*Q[QRI;$A@WB+h==lCnW;"i3KC%?:Ah@)2)a4sB#G97?Z4JNj&*?0R4RZ/cnt=L)
%EZ`WJ]T!_6?)/6Vbmg]NLkVu?NX%Y"fB24#.[f/qR@Mj;NoT9uDKNZ4W"0:#<cS9o;[fVScWl#`n4HK*nf(as!@+3qX=TtoQrR//
%Q[97dYX51fj8<IiM(bb&X*=/KCqaKVlW,,*e]YJ__+,Ns>ZNZ'#(MCk*bE(]E[=e33iV;o5@5IN#JQ>IJSdQL4n52-.6_kA?sU54
%aX9pCT8Og::Sh%]oU@S$orm6-UVTQ%KRIg-AuclK)u'?AI>jKM=8nmkj1rFd`$Pk"XaD,[K]>X*^rb4HF_@'%:;I9"h.K?jMtt6T
%I0m!GCj[%pi8HdNHlCi;3;RojNOO,EhE%-KZa8*8C&g]gF/bf(67TCV;6?!cX,)D8n=pCfCkL>P]Fo9_=:do/?&6[l?/3X#c'=ja
%K5_NFV@0PpU-7Y1CM1n`l_p4$$ZiSs@W(7#cQ+sQ"jN<-6Tfa4_8adn9LH19m\27>\D-1`O#AH"D`5sr.td(-qZ7(V)N@8jo?mH?
%9A`V@WBM-qb#e#gKM:uNZUGn[,?`/sSk$'TQL%.r'jXtea4ECYgO7dlCa=5HIX0:=\*(#AhmZrVo&-3H*NQ9f[[UViiOQ5dZ-dp>
%<c;kO[V@Il:K"`\?C;:`q*%XFSQj<dI%96+CCLd_r2rHIE+=g\qj<"*RkM3fAds'Vo-r:=<JD=LD>$mgX?o,tRG=:?(>GF-;sq8Y
%0Boh&_#p.tkCki</Xnl2^"'[os5n-bgE3B%N1>g`OQU6&j6Qp@:oOPC82#T@Y4O/$`a++B_WDXM-.&7e-/^LBU`OlUBml'u:s/Ga
%8"eAE5'<P%Sp2*J^^gdFPHqEk?EB_&U;Re,[nBDt_C>7TY7%=?5Mj515KL%#G-8WO3F,:E>*nnK[W7KfYGB[%Ch"j!mQ2hDojP"q
%4'Guq!)AhtKa^#]>l(b`^'(=e*'35K'&i*?&@BU-STdoNc'lL=XdN$a[m0A"j.$aiONrCdj%FJdf#.'LGL.W(:Xm5K:E]6t@cLKm
%W1Wr!'r0j/!2>YPYsaSih!C<;>q6Sa@&%SO\=Tk904$b<Pg7mhT)@6a&#Df*6g5sa8A0scBnPFJ;-I8YH[I.gJ_m"%.<4fkE&p!O
%Ok<&m9nX.V9!"',q`t;JQf9FShT$$SMu+m`rKKhu5AnP.iQ5..RN&P-%9ge=g]qZ:kH\li]B00!DU^kj)c?96>lBQ+TQg+p]2mNc
%I9b[,9DG1Dfu)$kUTg4@E9gqSFCq#'gj\Z=Alqg"TgEb$/pf)5@&hQ3n!T'H7[J3(G-[g>Su1Gr+?<_Rr?7_$@^Eo%m'bL>_pttD
%\3`YF$gb;d?`8#Hh0.pIO8p[EM!aQ;.qiI'_nOY'eT-.grua+4]AC"!Ud4%,FG^Z!^MXEd,Gfp10/<h>WP&L;+t"+[JN;@e`t6rN
%R&&L=f_g(TjS%s'jm:%UrZ^^'Q,>gHNWI8j%%dC=E=C!#a+;I,*61J&#;UdL*!<814HTB&iu$Q)NWY\63KAs7>R*$6EZ>/sXRe^>
%:QAr+q$VNlo-_R5)!c5_aSa/"%*Z\9+S-u$1&+`qa+;I,*63SPiB34tPN/&1c'&b%5itiHNVK%Gc29O*A?telk"h"IkkPU-+S-u$
%0gIJVJW.op9I>%Rh0ae4pO7M,:.:i=drPGYgS1><d(1/_5P(FMre,,?`JB8a]mkFe/$,kS2?8[%/LZ>M"V\3I%5uYNZh$Rp.sG+K
%\T,&&@5TWb\ad@Hb9%Wf2892hNR\W0K[jh(;d3Oua*[<`_V=D0%j8I_L?U`(RuR6lP,5]r%i-d@[`gCgS@.SV"H$\^/bNrt8/OdC
%C4PjdnAbLj"\JAA%PE&d(jnR2$>[hu+ZZ\JU/6,3^>@9S+5a,ef)!fXmHf)$Me]ed7,<24jPl6dp(7L@FB@edU%IqLg!;%-eD0Ig
%FWIub]W^C)763^5N?Ou%3]7d^s.jF$QnOtI%ga(3QtHACQ"G:L)ne6Ojl>RZg!Y:/*"?q\/q)WTIQm%6P2U)NgFntod'.N;"srF_
%/f'6c'7;uar:A$C7UB)@Y+1gFjaKohnq2HsW'BEZq7C2\Jt4H3gFBiN4!Jo@o:MGjEN3s@4nH0-H(#W-dac);k^F`Ir=c@N<^*l,
%4M?!cSB&3VbXRdTp%M_YlY)cOhiIMN,K7"+im(a\1$meKp:2*1&%IVk<IUou>HaFk=?[;D\i<HcQ6EJu9'/'NF!$hE4llSU'H[Rq
%TrE4DdC=U#?!V-1L"pG9gfRoHrKc/$a<h>gN<sk'!Cu>QlparK<"cj<7Q!rga=j#!_e-#pen`bSmH@#M/$bR,jSA+b[8Z;>C0.hC
%%!%o]YZ5HLU<2V2qD&Ec*i)K+;lrJI>c/[/%m(YdlrNd[jJq:"2#IZZ;hdIaXbTH+*#+R]@(`U*Q=-nlg[FgLk>ZT5gtlu+I(a1L
%:<q>QNAggL[E%0<,hFN44a;92cQ'RbMe,-qN^mX^7!@G9)r8u<e?RlfeIK$+'8=_a"PuM[p[l8_*X_XCKq7j2`=F&RO.0k7'J?fl
%IJ-WB><:O2A6/hng4`^dlS`u4BD94&I>i__?,^\%7ota+^Z-l6VT`gsVa_H^F(%&;nbI;d[rM#&TA)?9]pi5_Qfj@Pc/%h?YZ&Nh
%>^UT!7[[It1jA-BmIR6doh%Qk^kV1gfESUr?o"+#\5iF8/&XjXDZ+h*eTsB*2uXr$>0(=<k#5UpC%*.21X#O!f2H^3CrQ/3/\-3V
%]H1$25fbOq_!-0r$JG'UCtMulUK'5CQ--t4gJ8H:K*=C7>,_/1X_OGJr:4ScI9B\o@_U_o]$j4bl1)31f^fl^%kJ/hZ(u^_bt\;)
%_@CmAL5msY_)KTo1[Nsu$ej<@9bf<!LBmVbA5"bE3DV:X)/6>S)!(AFK26ipU80,>SCAY)@5JdJ\`ClDpkX<:9TXJn3YqrDlnSO6
%"DbES!Jns^I,]@R0=/*K4$Gi)iSB3@h$\[[`H!>nF/N4>0dFg-<PegGS!3f0+'.p)8[VWg*-MAR/`pR[V<oM+_UK4aDf+$YqsVbF
%Fo035Fb]X1Qt1?2&b_k$+$g:cHb#3^`RfKKiHroEW6gSr(=lMFef!)aRO!ke$8?:n9p3/+*&HJ"(Rr2F:H`fmZR"o<"S/Za>S^_D
%q]]-^X)"eT[IF$`&i6"aL+QY34+M*iJ[Oj[V:k;kaBK]F/BQp4p$+<Oq]"S]AS7Vq,O'ejU!DKG@2eE.mc^df"@gY]ZQ0Q"rYG>k
%J*IN[](k?ac.X1i;1.r`B'g's@Xe,eZZ_+3=8M!Uc.X2Dn$)^_GK<_;qBt\BAtjSBdq7tWOh#`-dq7tW@;`S65Af!)Bjb6AjJU6`
%3t8Qa:O_$!Zd[9JnE-Xn3]i>fI8>=GXL$Ah7)tjj2XB]dbi&!QVp.7a/`N7l2XB]dnEPDldq5/A"r-[N:RcKM)O8G4r3TU>Vr?M,
%k,6Hb3t8<3DgpEAZd\,TXJ9gEAs&WR^?b"):RcKM)Ms(@kA8Bs3t86u]_Q9Jc;#V\`KQoPlg-H<^UWj`At>IsF7I@JRrrlmiFG`5
%g8qX00Fr/8kobQ!+J:65o$_3ASH]cIT2%(_G+'e*Mr^e\3]eo+o?0q!F`s4%]$BH9brRrRGBo".AuF%Ve'KO!^J'aZcU44FFrHs#
%9pl>(,!-5knrtSE+]-%^@W-_LXL$Apn,G.KG(T';bS'L&E\ks8,B4PrIbLm0du;ff>2L3/Vm2ci-`Ndb4"V*B'8>FD-Wh#tR]1b,
%SHa+N7)mi[ZI><^g!!6]F`n\[2\=@'%("D:ei*oD^Y>p2XTef_A@'ER6]-0\dq5/AL:3p;5Af!)Bs95MY7$^Y3t9Le`a0H8F`n\W
%r*uo<Qo[;<V<-@q!iF7<6S14i\q$cddir5'$^`t:%5S.-?5G;<G+*E:2#=e6WO(&m=1[tOJ;^ecnF82VfP3"B0(k..9@fH$O+QTu
%r@!^coJ#>!4h41A@@`>o&LV_gSQ#a[4M)Z65DsjkZP2r;7-UO#Zc<mH1S-ZQB.8Sumlmg%hpAK^(GQNjS%3G[Qh_C0li%,Ae\s^g
%_eMBEH$?F&;"Ec6Hp<_qQgKEj^&3?Uq=up!mTf,thaS_V^heuH4E,SfI%RJn.eAAGo>94]`fgrfOYH#pGN[C<H81ItScGsJm00#.
%.T<N-+#B2-C5EVt$Dm[t-Fmd1H'"[].+O+N6hP,F*]ZK\*k?9I':P8mr._r^P1no5(<Hk2(dtu-69?DCN6G,tpo)T@O6@G^H\\G[
%hdT%5N&-IH%#X6FNaW"o>oKLlLPq'IfFN#h4102k."QJXFQGf&Z*s]1T[g;="&LIeA;=_\LDRG!AG66P,UBg7*i*&&6Q5*#'G#(:
%bpPYgM(f!Xp,d60iJ6)q2u0&Zb$KR.RbEA5jG2$E,ad(^CH$#MT+p]L9f[B1rn2TB&Q@]q:>&m(ILbgfS+E[1s'@fmjb3EO+FSFg
%5K]MOasE/9q`;Ed%3K!?-9`p!+!+>7N?S6Q'd5+%\M.^XC24XW)*qr%-tSB6!;Itnq9fqDXOj'](bIbUCCtENS,8auqn;o>CCkf$
%Q&]LXl-a&&KH;[BbaJX\.cofZ,86&@9M7#L77Xud0_LVJDPoS,QUQhQN1;a_h>+Tf2.?%:gdc\$KSo3;<.p7:WKoWlGS6,pOsX5A
%*A_A(g-,I<`sg/b%7&.r_`'_G0QQ2tJ+/h6RlSk-c7]ibeB;@J.a$WM7;s2AoiGAfrE)@%OKJq3CP`9k]M48ood_n7/(gaKB:2dD
%dqi%I_*H[XoHq`:/`o5T1X5RR7^3&;RenpZ=AqC_4G<N<c6SG2STlDlSk>s2P0uurgE43r06KcXpD:TYZ<s#nlo5=q-_P_;Xa/qY
%DVQO[3M&cQ5l/U?!^J,-h9-j$2.X&_p0(X!DSJstlgtN<rjnDX*k5YT.c"5`<Sm:=^0Ft]A0e_B-1#C-ls"19h_=#p!E8^"cYTjg
%rQ1;0r'OLe]RC!J8p2,m*:19t5'qT]50k6dG<"5Gl1rQdl")0i3''&c)_=>t?qt8kp62[,G?_<Ipl!p>3NkItHX9<M-.4Y]ZnaeI
%@*UK]O*>i-?csEoXa\^I2rjZX0dKqd3>nM\T)WF^Z3B$&aRcV2G*PcaMo9')\Z?6p?#1XuAnq!.]3,'1er0#pqB#tBiP2B6jTR4c
%a>*fV";fr?/'Ui&ZPkF(,I,kFFDm7V<!J=W]A392RRGNY8b)X2(JRAYL0N%?5_OK<V>suB7(65_mPVjMe+!Cn^E^W%B8d1IrW@Wi
%_(T-qqKGnrSjXZm\S)^^?GJdF<Ct9+/4<\SJkq&$KS1PLK(BMR=cn-1(g1RV7b;8&NNN7Ud_4nWCIb`LogBCuS*:5^;0:6Sq)^Do
%FZ'l>KZ\9aD.W_*D'l4g9pB2Bbl#B59MlG6U5?7Fq1mYI^k%oM!TC+,-3?j['4a$WLM%Nn+M3ar37GqOfo7g7!>[H:2DRRA,G()4
%JgbDN.gs?Rj/%FK#nG`B(t20?&u)*NNb0VsBdSZCR1gl:1D=@Z_qfALi=`.7_&s%Z;L/2VM)sHj#mIPd+.=bFdCXEee.SK&"'$Tq
%+nNbo&j0,nab!%b9FN<N5;bkBmD$2b/.$>R)_iKoZN0Z0O]QrsfKTUC2%_*b</F75@8RW20H5T+E+COD#^Y"?NW*4?LbN1ij"6([
%K<rJ=Fr(Dq29d2='!X\[/gAM57#Lklb\==)A*0MUcu_$c8f9ST.Zoe5)Ctk"(WO?78:+@c"C%Oa,:]ja%'pZ@K[+;Ad1@S]dYc,R
%@T8U*Wi?0D0VU18EYOgE;aKnVJ4`5['-]*`&<0<gMSbQ@'LC1cJ2'g<4*2&gk+fJC-7!\>8':E074("I+>+i-]E7D1JOCfXJgu9_
%&DK/U$8dAL<Rh4"lb![W&V5$:n>b:KhU)IgTIK01PSO7R(,SIrQRn4l)$5,H2,9jg/cql3*g4OtJ-sBA"=G>:9FtS^._J5q6PT_)
%!NO"F[ph\OFVQkP?K*tN[m<`aX2^o2K#&06<aF6`Q=N3.$&O:K>Dlnk!+XZaS00M&`.TCM.U`e=o-+8j-sZ9T*EQb<)E'9#LmF-E
%d34K,=D66qbq'EgG-J2>qaD1Jo_(^S>rGg$QK&$a)2/[i72mKZ^]^B`+J>SW.D?o[!075LP2-MN?aEQ_5ts"5LoR*c)jgkrf-Jil
%0VU2A'Ef%:J>M7NqPU.)N[+TBW6M@L'r<[A!<fA-P$uUdnO+G\L-3BVO!5qQ)N(9)](-sF@)JbPJO_1B&V)h^()R'5l3Em&#(23u
%$@d]\TW^lf$8J'TXCDW@Pt29W(<@mdlmL5X_=&M?A5uJU-J/NA(!-AE!:m\9-ZfgY>o_@L-qMEB0NCj*1bp.=#Fb1u@@DjdJ6j^e
%)VXJ>Lk6.d&QD..g2];a"aET?22!W(6r5DL_&uMR+R6922gIpPM6O@VcoE=B<C*>ZhAD&@)I,f:[Mgi]Nbf4j"^-r.$>C+a$>-*6
%W^^#[OB!8+-`J6MG[+O!-@fE"AXrg3*aaLN/JHh=a71p1#s]CI)?A1c3W**t8Rj-P!!GQq-4WF4"Uq1M&IChHB\2MUcmh.DQ\Yu:
%QY\Op5iPf?%d6fIbYd:E.4P>.3CtH4<(V`l)A4Y49dNd_WWuTucj5FD&/co?M7c+<_?$)*O;6WL'7#?=!s6=s-NK!H,,2`hGB?D!
%!&?<T8`3R9@)nt,"mcq_V[G)N3!1]lNi\$<Mkq:i!p]j@JD:oO"_Xsa)5r(g5QE96SY2r.U4EoPW&t+&!\=gV:#tM219V<sQ&&P[
%QSd7FHghCH#on,I"@q"'CCYA>.`.M#;:#=7aukG0$QpXV#sZ<96pubWIrZ1cI!dPs?G_CB.ns?41kd\".VAIFRKrVJc4^2UULkZt
%C5.!VCBA??GRDBK7ar>q"g?m&FNYcUo0_%"VTBA6&N7&4(_gZJJ`orKE=Fu4-DVfuM=BF@#fn2F'Pna.#('\gnNEWl0Rc9Z.oCXM
%'2i7T9bUQ<@(,"f@bNY4!.6!3`!?B"9[\nLJ/Ke?+@Ju_ES$qL'*Xt]32SrL0MrR7_2^bf9*>;s)+)\di@$F*?6k+,KoncVNr^ad
%0E[$'(XXR0RqR)0H,-'S<A^3od\Qr*,Z'r0M?Y=/2?s/U,UDp_+hE3Yb_,s_KTu_4D$?Yd8&b]<-c2l+6mqOH"hd606STljO<T8F
%&uR]N;?WE5$Z'sCP,aGO%B31B_2i&/!CY:nWK99^5QDHA%3-K#X<Q(`ePU^NL;ee__/a6JK[*Y#AVFt);pj"!!f/JP4:<n-S+Vs"
%i[M1H%0fmEd).FBj#ETQWPQ;8Lb+Ac5Qh;19iGj6iW^eC0kdu#k6/,U3<LH3b]$],'F]/q-6Dhc253K?<hjlJF@RP\;$Uj3%F9ZS
%"_9H"]>;Xu#`SO$(9GTm"H?$[,4hrZb^A#SC@h\G:(Wq*=YR3_^f2]p(s$&I&1.C*%%-^j#6nBCPaCB_TgT$<jomT4W9aKl5Tg%1
%/5R:;$ROimn]k/r>%Ii2+KI"!:=F<;!WqIH$O.eA+:]6>E=*F+^bQT+SYr:460Js^R(5,*+s7_R%',@1UZ[]@TLp%0Rhu]uXg7Vg
%-9B6M#e2<pK.J3&DgGh#1Un6A$nI'?6e'mZl5LtW#_HGEX%mIJQo,K<>n;m*"4[8^>m*GpFU*kR(L;&U%YRup0^j<rBO>Q+(a@cJ
%!\^9!!c>j^Z6;UNJO"`)(eB>ha[m]2LfWOK!8?uH.1i?j,#Mj=KrGpVTuchg.AB7"UZ:U%@YeODblSe%WanIF-gP1#3a3Jt(=>le
%!MGNBiei'6Ebb$HFf,WY6!:TtR'A^]*NPl".=uOL4-aJl<S'\)r$1TSZl4d>8-'H7*(ZgB1MqY'P4%N<+<"*kp?o:r##[m!0M!B+
%"26JEqgr@qN"?W"W"Kt5j3;NRH3OjI$&%"I`4ohd8Z%\iojl`O`c)EWMF#E[;asRs2(6hV<Cntt&!8Zb8dHn%+<V#HStQ7`@bAiQ
%o,<>(a;+oQatuX7i8PUI!Jui*YTe^Rfp;^QNH[\SS*b=J#T08YLDgr<SA#7=T1JW/:NX8N0l-uLPLrp7oeETN'B40,#?cik*hd!V
%;4(&a["4#Xkl\d]"i1KHc2g;&fF*9\;&$fg<2o9'':Zjh:kJcQe<j8pAT29T:&pBm[UkgpS6e[SNhWIK:UEQHTaSeJ113NdAojI?
%Xrkl4QWRGn8iMd>3MFF-)#D)l10X<6+GPY6]fF=LalFCV,d7Bt4N23Si"lfm"!4DA?e#Wa=tko8Wk&9Yfl3,mOG$YcmX3KCaXm(`
%Y&Q4Z!^$ZM=qmil<&/-m9_=)gnqQ'iQ]t!i79)_pK'W^pY$qYWg'XBH`=T%7@0/-A1MA;$GU^L#%)`8`#tQ<r-[%VsfJcd$Tm\3.
%P!eN.,33=,D2"]PU`rf?E!*<U%O9>c#QrPS77L:W-F-k4E8t':J8/FfH);>%Kdop:AS3+iIBu*o\%DsA%uC;Ep-caSU+i"eD<Zne
%(k.Yp%<U(0A#'.(%SgW4JNYNF#,5k"'6L(1nZk><\@bOp,*J]K>NQ#Y,-5O#Y6ABG5(VsWS0ef-QPc,D@`V&NjElT@aG\>lARWEr
%I"[V!\J(j@L2N),B#90$,%s)E>Ck6P6kPqET=E,I7>"*j+D.(FZYOFQ_mCM:W-T4KibM!2PqG_Lg0bVQoVKV1ZSFM1Adi=T+,3Ki
%<l-ZadqDRATn8#M8Y)rTCOI$c-;#EF3C_obg;tK47%'S_GT6c\#F=iq![/-di#A(/[Ldt"H5^;/M?G8?3h6G6Jr&VSam9]e^f)&>
%'9us**UF2Fe2cR16kqB]?pcahI&"Wg?jas_d^uSgd)FMO"AR0L6P?c!W+u`;P:/fFNYBeR;lL0<APmV;#R:'q$,Zj$N[LBUMTe[=
%S=[gE.69W;4D-HRJZb+=\jA0p7fj8[.Mjs;0mQ@@AAO!8#u'B%CAitjOf1N-<KpUZ$]?QUW^AW'3bY&![K?Cri\M2gRZY9s6?('c
%2-j?%M(9d'dkuHk#.oZ=S-g"(-97tK1T&24)R;Pt0aL'[!J6iiSIf+.<Fa#Q%%SV?,+X?\Wj9k5B&O*7hI+nH0lEI$n>dn"$.rjF
%%C8b;lW##<CNL*oUbX92Mh*V2:SI:\57f?`gq?FacB5i2A-a;XU!agTKqd5(U(_-I_n>;h.<rKk@MD4G.0a??@s/WHGuqIDVB=%!
%KmD8X"2t^J2IW+q4tCYaGGBd5l7?0*e<=u.5K74[ak99"2$9Qa[aOC@%!Cq?o0!JYC-$:mDn8e&<fL^Lin3(;K"u\G'gbA&M.9_W
%KZ3nf'-UnK)UGsE#I?V;aTusEZ\>3sMA!E=\4X]tdNg"m8</8$3L0[VIhgR590=72X5rcBUPU`3'2an'@%-"qn;q<'k?M^3H;jFD
%"R@]KRVfXDS1ktSB3kX;98<;<UrGM*\#G1]erm:(NE2_46q9a*^bc`WO@He0m`(DcemOFk@A.5@ZI$%+E_iiIg4X:'6p7saqC:r1
%R?Bm4C>pL-"."Xl0G@i%M?5\oh356,=E9g6#\G3ZMTiLqc89PnN1LlB24auXYVLR20mCsI15g+Zbg@sE`_*X(N19pSe$J??R*!V>
%]3^jV)f6F\9]W]$KU%\?6FJWNkXiJp_6[VmN+>@g>Oh@4PsFj*#9fh?R,0SG)XeOtKcXS8#u$Fl$KH4s-#Z[aNs:P6roQ`Wf`4tW
%hQjr(5RU(:4DrBDU(*'D1mrZ-2N/dd@)R,6+Nu)dqlU099,@7W:*1XtF;9Y0`!DgKZPdKnN'0bN<%+"a/e-/2_3fG/7#E#cZgp3q
%>l8!L]54iKUBs>UF!GX]9Q3KT:S^!8]#<&295rX!;@?&:_Z5b!agqp9@R[f[lrF1*D2e&e7%f%Y@q$,a(eUQs0Q>VX)ce4IBf$KZ
%kt+,b$6e>5aohf]fpNCtAh"+maL8s)W^q2>3#V<?C^BMh:X+)&#"G^ECLkEtR@](eJ2HTr-E1NCk_'[J;41HE)4:V&Td,+6qcXP`
%^f_bRgIHZ/\BnsH'KNgA&X_)p3OqU_E.h[54TQ_Il,4>r+I!XL<_.$WF&$aB&0uSgCb2qJ>1Nq2fpq\cq5tXXBG)@Wd*jpmD!<cu
%SfHVHYlW0EK:`!\\mo3$!0bCn$G2RR-Ya?.;;ahXJjN-d?F)nc0%/@1N[ufhL1@_3m2?4.>BjX19U(qa0X,B3G;5F];f%g5B]CqE
%-V9HAE9'"2AlhAcjWt.1$YHQ*h28*D\!bs)fM$/"9W#h$<+7Udr$iV9)4%>N#?D#:Q"2./!<g:Fbk-kUbk`kF)sno]9f0m(Ht^?T
%FpbMa14kl=L`t`-.!PlKju"m'!'rVBEFOm4NoSenWgOSm:(T916r?tU4Tf:(9+9Sf2<>3uG<$R;A76Hr*(TP;!4M]$J`[rY;<\*1
%N2a.c/E4_r?ciBL"35f6J2(`Z\9L=?bgn08]7)Gdr6n/a_:k,U@^\h?&/9^(CC=aq1C"=f,j%N,#d7'\_IK#F8[T-Y0s+qX*OE_,
%)cgM>0`!P4MNMsr0q3%f5E"2K#3lcr(lbA)AN$l'1m&dIfWFoO0to2F@fRjV=Wj1FQuF3/dkhr0c"S_fEZ-9EOo0N`LG6Lnl:qM5
%'9o&.dNX[mBafN2>1R=,fjGmC.2YXg7*N#?QqI=,N2Mb28R#S2N(Hj:\f0UmK#T\]5V6sWgQ;ZEV4%k2UeB]mRiPYt@?&:.RY?sU
%b/2oua?;W.?Xe@=P=I;2X"17e[SgI0!b+nI"*%#MJuOnF.lM]/<=DMR;\*:V:tAd=#j8!t)VYo-Z,X+X(04I3(?Y&\c,<sU+%@"`
%q*]jJQ85e6hLaGOaaVhPk2f9Y,'@?NgRMuq/;D$_O!(]$BBCYKS>jA16jNal7LlQVP6GACD8@c`Z?igdc5Mc&9a`JXQ&W?-P@o>&
%D_aIZ]W%T1TWp#+;/]cP\\NeVAmiF`Nj<u:\;m8M`LBmfb\Vt^!KsB;4g>Q>4<%m@AbBSBm[i<0GZ2Iq'Mc(o#P*d@_oAc96'u1r
%%]Y9q,-\)i!Z:d8'!Xa@67b.t3j0GTdBW266,PPr0dVn]5T7u\M+Gt`iY]c\Hi]C^ArC&1#>ak99V'4V#89uYd55,R]$kBtrjsH'
%8e:FT,UYtkN8_Q[e;<j6^l/PjW/E3u."E%97\V*='-(*S`E](Yg1hlO8T#BI_38W>"MA/ZP9`csSco3W=b0#t0Hq@$UmhE`,I'.h
%7Yn/&&1q$B>XkcDSgFn&X['M`#!6mNqSYWQEZrNDHNjlo=X)Kc:V=J\D&c>kmVG9`O^tn_LhE)E>o;SE9Fk,;V`W".gFs\/[@B^^
%5:81C^-s9HZHOeJHg7!>K;Y"n7);5q(P0AFeO[msH;Y1.-$DH53E<I1'Ouu0@E]_<@Wqi4Od(,F0K_+Tkq8&+QeK704hHUCm$N#V
%L)jpoA0iCV7b@_T'8n-s.;?BWgtX=8A_@AWjN+nNS#8f3OB$?DRP8h7H,ZJu&4;V<_"Qq\0?DMSNp+K$<oN=G0rAII<HDhU$O#0]
%cpUbgK_7Htj:@De6",n$d0CrDU5:3!ib2&TXr7H_,iK5HX_Tau@K'Ph!5qE/1Rk'%Xj\OY"VZ6*4?O3iL*N'4Qnr-$"RJoOG7m.B
%<b``_$oK)];C$f?abm<;#b]jC-3+7jj$n`:!iD!P)9J<1rEB9G]1+k$`jS,j.54t`*;]M^CpI4tH9o!ei`S-:9#fiKL<9qY@UW;e
%49nJE;e:Fq3p6p39ZFj^HE<,<JJSaj/ts->Ye3J*C^=iK%aub8Kl*Y`3J\4fj/NA^BW@(^6[mrPfJ&$U,#&-6R7\=['(PT8HH2C'
%!>$g_!)_/Z)hKKr&Vqd<XY>L3;U\geCf:O)6mTUa"L40lrM/mt!6eV>k$:1g8!E<\e44(A%hWXq^.U6U]rP;3AZ[AbAM@ge6"Y>C
%X;d!R2G5HsfiUI4d7gQZe;:R5,-C736u3,5=*-T?F^c,d=9FtAXGr6Gi8VQaYt&LY@lf?:PI,I4ZVX_&)q9fpU2c]9JeU#I%B(H@
%YfCR1Kt<QIL@teL8uiVi^,"=Wej(RT@\[FbMI$^LVS"e*CGA1pBumcajGnt>4;*R;b4XIgYM<gBHBENgr3';2ghq<?j[$!V:SRMg
%XZu%AC=3#nkMHPr=3Tg3=T5B5q0rDp2qpF~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 2322 6042 a Ff(Delft)30 b(Center)h(fo)m(r)g(Systems)f(and)
g(Control)p 0 TeXcolorgray -600 1660 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/XYZ null null 1]
/DOCVIEW pdfmark end
 -600 1660 a -600
1660 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -600 1660 a -600 1660 a
SDict begin H.S end
 -600 1660 a -600 1660
a
SDict begin 13.6 H.A end
 -600 1660 a -600 1660 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -600 1660 a 264 -293 a

 264
-293 a 264 -293 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 17.01927 94.00821 -103.69772 19.83716 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -100.0617 25.59436 ] concat

 pgfs


 264 -293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a 264 -293 a
 0 setgray
 264
-293 a Fe(In)m(v)m(ested)35 b(capital)264 -293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 14.89809 36.44652 38.47035 20.89775 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 42.10635 24.53377 ] concat

 pgfs


 264
-293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a 264 -293 a
 0 setgray
 264 -293 a Fe(Yield)264
-293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 14.14182 29.09044 -71.23883 -7.0709 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -67.60283 -3.43489 ] concat

 pgfs


 264 -293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a 264 -293 a
 0 setgray
 264 -293 a Fd(1000)264
-293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 14.14182 12.72661 50.3303 -7.0709 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 53.96632 -3.43489 ] concat

 pgfs


 264 -293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a 264 -293 a
 0 setgray
 264 -293 a Fd(0)264
-293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 15.04727 47.87868 -80.63297 -64.21725 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -76.99695 -59.67578 ] concat

 pgfs


 264 -293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a 264 -293 a
 0 setgray
 264 -293 a Fc(1000)22
b(+)e(0)264 -293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 15.04727 36.96947 38.20888 -64.21725 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 41.84488 -59.67578 ] concat

 pgfs


 264 -293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a 264 -293 a
 0 setgray
 264
-293 a Fc(0)h(+)f(50)264 -293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 15.04727 56.36363 -84.87543 -120.91087 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -81.23943 -116.3694 ] concat

 pgfs


 264 -293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a
264 -293 a
 0 setgray
 264 -293 a Fc(1000)i(+)e(2)p Fb(:)p Fc(5)264
-293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 15.04727 42.42406 35.48158 -120.91087 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 39.11758 -116.3694 ] concat

 pgfs


 264 -293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a 264 -293 a
 0 setgray
 264 -293 a Fc(50)h(+)f(50)264
-293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 15.04727 56.36363 -84.87543 -177.60449 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -81.23943 -173.06302 ] concat

 pgfs


 264 -293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a 264 -293 a
 0 setgray
 264 -293 a Fc(1002)p
Fb(:)p Fc(5)j(+)d(5)264 -293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 15.04727 67.27286 23.05719 -177.60449 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 26.69319 -173.06302 ] concat

 pgfs


 264 -293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a
264 -293 a
 0 setgray
 264 -293 a Fc(100)i(+)e(50)p Fb(:)p Fc(125)264
-293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 15.04727 86.66702 -100.02713 -234.29811 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 -96.39111 -229.75664 ] concat

 pgfs


 264 -293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a 264 -293 a
 0 setgray
 264 -293 a Fc(1007)p
Fb(:)p Fc(5)j(+)d(7)p Fb(:)p Fc(50625)264 -293 y


 pgfr

 restore

 restore

 save

 /pgffc{1 setgray}def

 save

 /pgffc{1 setgray}def

 15.04727 86.66702 13.36009 -234.29811 pgfe

 gsave pgffc pgffill grestore newpath

 restore

 save

 [1.0 0.0 0.0 1.0 16.99611 -229.75664 ] concat

 pgfs


 264
-293 a
 /pgfsc{}def/pgffc{}def
 264 -293 a 264 -293 a
 0 setgray
 264 -293 a Fc(150)p Fb(:)p
Fc(125)j(+)d(50)p Fb(:)p Fc(375)264 -293 y


 pgfr

 restore

 restore

 -56.69362 -7.27016 moveto

 -56.69362 -48.51244 lineto

 pgfstr

 save

 [0.0 -1.0 1.0 0.0 -56.69362 -48.51244 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 -56.69362 -64.4165 moveto

 -56.69362 -105.20605 lineto

 pgfstr

 save

 [0.0 -1.0 1.0 0.0 -56.69362 -105.20605 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 -56.69362 -121.11012 moveto

 -56.69362 -161.89967 lineto

 pgfstr

 save

 [0.0 -1.0 1.0 0.0 -56.69362 -161.89967 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 -56.69362 -177.80374 moveto

 -56.69362 -218.59329 lineto

 pgfstr

 save

 [0.0 -1.0 1.0 0.0 -56.69362 -218.59329 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 56.69362 -7.27016 moveto

 56.69362 -48.51244 lineto

 pgfstr

 save

 [0.0 -1.0 1.0 0.0 56.69362 -48.51244 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 56.69362 -64.4165 moveto

 56.69362 -105.20605 lineto

 pgfstr

 save

 [0.0 -1.0 1.0 0.0 56.69362 -105.20605 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 56.69362 -121.11012 moveto

 56.69362 -161.89967 lineto

 pgfstr

 save

 [0.0 -1.0 1.0 0.0 56.69362 -161.89967 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 56.69362 -177.80374 moveto

 56.69362 -218.59329 lineto

 pgfstr

 save

 [0.0 -1.0 1.0 0.0 56.69362 -218.59329 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 -42.15518 -7.27016 moveto

 40.84692 -48.76581 lineto

 pgfstr

 save

 [0.8944 -0.44714 0.44714 0.8944 40.84692 -48.76581 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [0.8944 -0.44714 0.44714 0.8944 -23.34349 -10.45366 ] concat

 pgfs


 264 -293 a
 0 setgray

264 -293 a 12 x Fa(5\045)264 -293 y


 pgfr

 restore

 restore

 -41.24983 -64.4165 moveto

 40.84692 -105.45943 lineto

 pgfstr

 save

 [0.8944 -0.44714 0.44714 0.8944 40.84692 -105.45943 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [0.8944 -0.44714 0.44714 0.8944 -22.66449 -67.48683 ] concat

 pgfs


 264 -293 a
 0 setgray
 264 -293
a 12 x Fa(5\045)264 -293 y


 pgfr

 restore

 restore

 -41.24983 -121.11012 moveto

 40.84692 -162.15305 lineto

 pgfstr

 save

 [0.8944 -0.44714 0.44714 0.8944 40.84692 -162.15305 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [0.8944 -0.44714 0.44714 0.8944 -22.66449 -124.18045 ] concat

 pgfs


 264 -293 a
 0 setgray
 264 -293 a 12 x
Fa(5\045)264 -293 y


 pgfr

 restore

 restore

 -41.24983 -177.80374 moveto

 40.84692 -218.84666 lineto

 pgfstr

 save

 [0.8944 -0.44714 0.44714 0.8944 40.84692 -218.84666 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [0.8944 -0.44714 0.44714 0.8944 -22.66449 -180.87407 ] concat

 pgfs


 264 -293 a
 0 setgray
 264 -293 a 12 x Fa(5\045)264
-293 y


 pgfr

 restore

 restore

 50.13106 -3.27806 moveto

 -40.84694 -48.7658 lineto

 pgfstr

 save

 [-0.89438 -0.44717 0.44717 -0.89438 -40.84692 -48.76578 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [0.89438 0.44717 -0.44717 0.89438 20.26616 -11.98883 ] concat

 pgfs


 264 -293 a
 0 setgray
 264 -293 a 12 x Fa(5\045)264 -293 y


 pgfr

 restore

 restore

 41.24983 -64.4165 moveto

 -40.84692 -105.45943 lineto

 pgfstr

 save

 [-0.8944 -0.44714 0.44714 -0.8944 -40.84692 -105.45943 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [0.8944 0.44714 -0.44714 0.8944 13.60535 -72.01584 ] concat

 pgfs



264 -293 a
 0 setgray
 264 -293 a 12 x Fa(5\045)264 -293 y


 pgfr

 restore

 restore

 41.24983 -121.11012 moveto

 -40.84692 -162.15305 lineto

 pgfstr

 save

 [-0.8944 -0.44714 0.44714 -0.8944 -40.84692 -162.15305 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [0.8944 0.44714 -0.44714 0.8944 13.60535 -128.70946 ] concat

 pgfs


 264 -293
a
 0 setgray
 264 -293 a 12 x Fa(5\045)264 -293 y


 pgfr

 restore

 restore

 41.24983 -177.80374 moveto

 -40.84692 -218.84666 lineto

 pgfstr

 save

 [-0.8944 -0.44714 0.44714 -0.8944 -40.84692 -218.84666 ] concat

 save 0.31879 pgfw [ ] 0.0 setdash 1 setlinecap 1 setlinejoin -1.19551
1.59401 moveto -1.09587 0.99626 0.0 0.09961 0.29886 0.0 curveto 0.0
-0.09961 -1.09587 -0.99626 -1.19551 -1.59401 curveto pgfstr restore

 restore

 save

 save

 [0.8944 0.44714 -0.44714 0.8944 13.60535 -185.40308 ] concat

 pgfs


 264 -293 a
 0 setgray
 264
-293 a 12 x Fa(5\045)264 -293 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
